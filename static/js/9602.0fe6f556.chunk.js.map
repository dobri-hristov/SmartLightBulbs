{"version":3,"file":"static/js/9602.0fe6f556.chunk.js","mappings":"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","sources":["../node_modules/@iot-app-kit/components/dist/esm/dataConstants-71f11842.js","../node_modules/@iot-app-kit/components/dist/esm/index-b3f1c3a1.js","../node_modules/@iot-app-kit/components/dist/esm/number-3e8376bf.js","../node_modules/@iot-app-kit/components/dist/esm/sc-kpi-standard.entry.js","../node_modules/@iot-app-kit/components/dist/esm/time-b684d8c5.js"],"sourcesContent":["var DataType;\n(function (DataType) {\n    DataType[\"NUMBER\"] = \"NUMBER\";\n    DataType[\"STRING\"] = \"STRING\";\n    DataType[\"BOOLEAN\"] = \"BOOLEAN\";\n})(DataType || (DataType = {}));\n/**\n * Stream type is a classification of a `DataStream`, which contains with it additional structure and features specific\n * to the stream type.\n *\n * For example, for an alarm stream, if a stream is associated to the alarm stream, we interpret the stream as\n * representing the status for the given alarm and present alarm specific UX such as alarm status on the legend and tooltip.\n */\nvar StreamType;\n(function (StreamType) {\n    StreamType[\"ALARM\"] = \"ALARM\";\n    StreamType[\"ANOMALY\"] = \"ANOMALY\";\n    StreamType[\"ALARM_THRESHOLD\"] = \"ALARM_THRESHOLD\";\n})(StreamType || (StreamType = {}));\nvar TREND_TYPE;\n(function (TREND_TYPE) {\n    TREND_TYPE[\"LINEAR\"] = \"linear-regression\";\n})(TREND_TYPE || (TREND_TYPE = {}));\nvar ChartType;\n(function (ChartType) {\n    ChartType[\"BarChart\"] = \"bar-chart\";\n    ChartType[\"LineChart\"] = \"line-chart\";\n})(ChartType || (ChartType = {}));\n\nexport { DataType as D, StreamType as S, TREND_TYPE as T };\n","let durationRE = /(-?(?:\\d+\\.?\\d*|\\d*\\.?\\d+)(?:e[-+]?\\d+)?)\\s*([\\p{L}]*)/uig;\r\n\r\n\r\n/**\r\n * conversion ratios\r\n */\r\n\r\nparse.nanosecond =\r\nparse.ns = 1 / 1e6;\r\n\r\nparse['µs'] =\r\nparse['μs'] =\r\nparse.us =\r\nparse.microsecond = 1 / 1e3;\r\n\r\nparse.millisecond =\r\nparse.ms =\r\nparse[''] = 1;\r\n\r\nparse.second =\r\nparse.sec =\r\nparse.s = parse.ms * 1000;\r\n\r\nparse.minute =\r\nparse.min =\r\nparse.m = parse.s * 60;\r\n\r\nparse.hour =\r\nparse.hr =\r\nparse.h = parse.m * 60;\r\n\r\nparse.day =\r\nparse.d = parse.h * 24;\r\n\r\nparse.week =\r\nparse.wk =\r\nparse.w = parse.d * 7;\r\n\r\nparse.month =\r\nparse.b =\r\nparse.d * (365.25 / 12);\r\n\r\nparse.year =\r\nparse.yr =\r\nparse.y = parse.d * 365.25;\r\n\r\n/**\r\n * convert `str` to ms\r\n *\r\n * @param {String} str\r\n * @param {String} format\r\n * @return {Number}\r\n */\r\n\r\nfunction parse(str='', format='ms'){\r\n  var result = null;\r\n  // ignore commas/placeholders\r\n  str = (str+'').replace(/(\\d)[,_](\\d)/g, '$1$2');\r\n  str.replace(durationRE, function(_, n, units){\r\n    units = unitRatio(units);\r\n    if (units) result = (result || 0) + parseFloat(n, 10) * units;\r\n  });\r\n\r\n  return result && (result / (unitRatio(format) || 1))\r\n}\r\n\r\nfunction unitRatio(str) {\r\n  return parse[str] || parse[str.toLowerCase().replace(/s$/, '')]\r\n}\n\nexport { parse as p };\n","const MAX_PRECISION = 4;\n/**\n * Rounds a number to a pre-determined precision\n *\n * i.e. round(100000.1234) => 100000.1234\n *      round(100000.12345678) => 100000.1234\n *      round(.02345678) => 0.02346\n */\nconst round = (num) => {\n    if (Number.isNaN(num) || num === Infinity || num === -Infinity) {\n        return num;\n    }\n    if (Math.abs(num) < 1) {\n        return Number(num.toPrecision(MAX_PRECISION));\n    }\n    const integer = Math.trunc(num);\n    const decimal = num - integer;\n    return Number((integer + Number(decimal.toFixed(MAX_PRECISION))).toFixed(MAX_PRECISION));\n};\n/**\n * Checks if value can be used as a number\n */\nconst isNumeric = (value) => /^(\\+|-)?(Infinity|\\d+)(\\.\\d+)?e?((\\+|-)?\\d+)?$/.test(String(value));\n\nexport { isNumeric as i, round as r };\n","import { r as registerInstance, h } from './index-1cec361c.js';\nimport { a as MONTH_IN_MS, Y as YEAR_IN_MS } from './time-b684d8c5.js';\nimport { i as isNumeric } from './number-3e8376bf.js';\nimport { D as DataType } from './dataConstants-71f11842.js';\nimport './index-b3f1c3a1.js';\n\n// Dynamic on number of data points present\nconst urlParams = new URLSearchParams(window.location.search);\nconst isEnabledParam = urlParams.get('isEnabled');\nconst isEnabled = isEnabledParam === 'true';\nconst latestValueParam = urlParams.get('latestValue');\nconst numChartsParam = urlParams.get('numCharts');\n/**\n * Parse Param\n */\nlet latestValue;\nif (latestValueParam == null || latestValueParam === 'null' || latestValueParam === 'undefined') {\n  latestValue = null;\n}\nelse if (isNumeric(latestValueParam)) {\n  latestValue = Number.parseInt(latestValueParam, 10);\n}\nelse {\n  latestValue = latestValueParam;\n}\nconst numCharts = numChartsParam && isNumeric(numChartsParam) ? Number.parseInt(numChartsParam, 10) : 1;\n// viewport boundaries\nconst Y_MIN = 0;\nconst Y_MAX = 5000;\nconst X_MIN = new Date(1998, 0, 0);\nconst X_MAX = new Date(2000, 0, 1);\nconst NUM_POINTS = 3;\n// test data point dead center of the viewport\nconst DATA = new Array(NUM_POINTS).fill(null).map((_, i) => ({\n  x: X_MIN.getTime() + MONTH_IN_MS * (i + 1),\n  y: i === NUM_POINTS - 1 && latestValue != null ? latestValue : Y_MIN + 30 * (i + 1),\n}));\nconst DATA_TYPE = typeof latestValue === 'string' ? DataType.STRING : DataType.NUMBER;\nconst dataStreams = new Array(numCharts).fill(null).map((_, i) => ({\n  id: i.toString(),\n  resolution: 0,\n  data: i === 0 ? DATA : [],\n  color: 'black',\n  name: `Quality ${i + 1}`,\n  detailedName: `/BellevueWA/QualitySmogIndex-${i}`,\n  unit: '%',\n  dataType: DATA_TYPE,\n}));\nconst ScKpiStandard = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  render() {\n    const viewPort = isEnabled\n      ? { yMin: Y_MIN, yMax: Y_MAX, duration: YEAR_IN_MS }\n      : { start: X_MIN, end: X_MAX, yMin: Y_MIN, yMax: Y_MAX };\n    return h(\"sc-kpi\", { widgetId: \"test-widget\", dataStreams: dataStreams, viewport: viewPort });\n  }\n};\n\nexport { ScKpiStandard as sc_kpi_standard };\n","import { p as parse } from './index-b3f1c3a1.js';\n\nconst SECOND_IN_MS = 1000;\nconst MINUTE_IN_MS = 60 * SECOND_IN_MS;\nconst HOUR_IN_MS = 60 * MINUTE_IN_MS;\nconst DAY_IN_MS = 24 * HOUR_IN_MS;\n// Not precisely accurate, only estimates. exact duration depends on start date. use with care.\nconst MONTH_IN_MS = 30 * DAY_IN_MS;\nconst YEAR_IN_MS = 12 * MONTH_IN_MS;\n/**\n * ConvertMS is a helper function that will take in milliseconds and convert it to the highest detonator\n * and does not return the \"remainder\"\n *\n * It is important to note that the object returning does not represent equivalence!\n *\n * For Example:\n * convert(MINUTE_IN_MS) will return:\n * {\n *   day: 0,\n *   hour: 0\n *   minute: 1,\n *   seconds: 0,\n * }\n *\n * IT DOES NOT RETURN:\n *\n * {\n *   day: 0,\n *   hour: 0,\n *   minute: 1,\n *   seconds: 60, <--- does not return the \"equivalence\"\n * }\n */\nconst convertMS = (milliseconds) => {\n    if (milliseconds < 0) {\n        throw new Error('Time cannot be negative!');\n    }\n    let seconds = Math.floor(milliseconds / 1000);\n    let minute = Math.floor(seconds / 60);\n    let hour = Math.floor(minute / 60);\n    const day = Math.floor(hour / 24);\n    seconds %= 60;\n    minute %= 60;\n    hour %= 24;\n    return {\n        day,\n        hour,\n        minute,\n        seconds,\n    };\n};\nconst displayDate = (date, resolution, { start, end }) => {\n    const viewportDurationMS = end.getTime() - start.getTime();\n    if (resolution < HOUR_IN_MS) {\n        if (viewportDurationMS < MINUTE_IN_MS) {\n            return date.toLocaleString('en-US', {\n                minute: 'numeric',\n                second: 'numeric',\n            });\n        }\n        if (viewportDurationMS <= 10 * MINUTE_IN_MS) {\n            return date.toLocaleString('en-US', {\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n                hour12: true,\n            });\n        }\n        if (viewportDurationMS <= HOUR_IN_MS) {\n            return date.toLocaleString('en-US', {\n                hour: 'numeric',\n                minute: 'numeric',\n                hour12: true,\n            });\n        }\n        if (viewportDurationMS <= DAY_IN_MS) {\n            return date.toLocaleString('en-US', {\n                hour12: true,\n                hour: 'numeric',\n                month: 'numeric',\n                minute: 'numeric',\n                day: 'numeric',\n            });\n        }\n        if (viewportDurationMS <= MONTH_IN_MS) {\n            return date.toLocaleString('en-US', {\n                hour12: true,\n                hour: 'numeric',\n                year: 'numeric',\n                month: 'numeric',\n                day: 'numeric',\n            });\n        }\n        return date.toLocaleString('en-US', {\n            day: 'numeric',\n            month: 'numeric',\n            year: 'numeric',\n        });\n    }\n    if (resolution <= HOUR_IN_MS) {\n        return date.toLocaleString('en-US', {\n            hour: 'numeric',\n            day: 'numeric',\n            month: 'numeric',\n            hour12: true,\n        });\n    }\n    if (resolution < DAY_IN_MS) {\n        return date.toLocaleString('en-US', {\n            day: 'numeric',\n            month: 'numeric',\n        });\n    }\n    return date.toLocaleString('en-US', {\n        year: 'numeric',\n        month: 'numeric',\n        day: 'numeric',\n    });\n};\nconst parseDuration = (duration) => {\n    if (typeof duration === 'number') {\n        return duration;\n    }\n    const parsedTime = parse(duration, 'ms');\n    // if duration is a string but we cannot parse it, we default to 10 mins.\n    return parsedTime != null ? parsedTime : 10 * MINUTE_IN_MS;\n};\n\nexport { DAY_IN_MS as D, HOUR_IN_MS as H, MINUTE_IN_MS as M, SECOND_IN_MS as S, YEAR_IN_MS as Y, MONTH_IN_MS as a, convertMS as c, displayDate as d, parseDuration as p };\n"],"names":["DataType","StreamType","TREND_TYPE","ChartType","durationRE","parse","str","arguments","length","undefined","format","result","replace","_","n","units","unitRatio","parseFloat","toLowerCase","nanosecond","ns","us","microsecond","millisecond","ms","second","sec","s","minute","min","m","hour","hr","h","day","d","week","wk","w","month","b","year","yr","y","round","num","Number","isNaN","Infinity","Math","abs","toPrecision","integer","trunc","toFixed","isNumeric","value","test","String","latestValue","urlParams","URLSearchParams","window","location","search","isEnabled","get","latestValueParam","numChartsParam","parseInt","numCharts","X_MIN","Date","X_MAX","DATA","Array","fill","map","i","x","getTime","MONTH_IN_MS","NUM_POINTS","DATA_TYPE","STRING","NUMBER","dataStreams","id","toString","resolution","data","color","name","concat","detailedName","unit","dataType","ScKpiStandard","hostRef","_classCallCheck","registerInstance","this","_createClass","key","viewPort","yMin","yMax","duration","YEAR_IN_MS","start","end","widgetId","viewport","SECOND_IN_MS","MINUTE_IN_MS","HOUR_IN_MS","DAY_IN_MS","convertMS","milliseconds","Error","seconds","floor","displayDate","date","_ref","viewportDurationMS","toLocaleString","hour12","parseDuration","parsedTime"],"sourceRoot":""}