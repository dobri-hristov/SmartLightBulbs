{"version":3,"file":"static/js/7542.7f65c39b.chunk.js","mappings":"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","sources":["../node_modules/@iot-app-kit/components/dist/esm/Value-47ec6a7b.js","../node_modules/@iot-app-kit/components/dist/esm/constants-9d5458e0.js","../node_modules/@iot-app-kit/components/dist/esm/getDataPoints-c53771e0.js","../node_modules/@iot-app-kit/components/dist/esm/number-3e8376bf.js","../node_modules/@iot-app-kit/components/dist/esm/sc-table-cell.entry.js","../node_modules/@iot-app-kit/components/dist/esm/terms-7b76cdf8.js"],"sourcesContent":["import { h } from './index-1cec361c.js';\nimport { r as round } from './number-3e8376bf.js';\nimport { N as NO_VALUE_PRESENT } from './terms-7b76cdf8.js';\n\n/**\n * Display value of a data point, supports all data types\n */\nconst Value = ({ isEnabled = true, value, unit }) => {\n    if (!isEnabled || value == null) {\n        return h(\"span\", { \"data-testid\": \"no-value-present\" }, NO_VALUE_PRESENT);\n    }\n    if (typeof value === 'number') {\n        /** Display Number */\n        return [round(value), unit && h(\"span\", { class: \"unit\" },\n                \" \",\n                unit)];\n    }\n    /** Display String or Booleans */\n    return [String(value), unit && h(\"span\", { class: \"unit\" },\n            \" \",\n            unit)];\n};\n\nexport { Value as V };\n","// NOTE: `enum`s are held separately from the types which are exported\n// as part of the package, since `enum`'s cannot be present in a type declaration file.\n// THis is due to an `enum` being a type plus an implementation, while type declaration\n// files can only contain typing information.\n/**\n * Maps the view model to d3 axis types. In the future we could add additional\n * custom scale types beyond what's available in `d3-axis`.\n */\nvar ScaleType;\n(function (ScaleType) {\n    ScaleType[\"TimeSeries\"] = \"time-series\";\n    ScaleType[\"Log\"] = \"log\";\n    ScaleType[\"Linear\"] = \"linear\";\n})(ScaleType || (ScaleType = {}));\nvar LEGEND_POSITION;\n(function (LEGEND_POSITION) {\n    LEGEND_POSITION[\"RIGHT\"] = \"RIGHT\";\n    LEGEND_POSITION[\"BOTTOM\"] = \"BOTTOM\";\n})(LEGEND_POSITION || (LEGEND_POSITION = {}));\nvar COMPARISON_OPERATOR;\n(function (COMPARISON_OPERATOR) {\n    COMPARISON_OPERATOR[\"LESS_THAN\"] = \"LT\";\n    COMPARISON_OPERATOR[\"GREATER_THAN\"] = \"GT\";\n    COMPARISON_OPERATOR[\"LESS_THAN_EQUAL\"] = \"LTE\";\n    COMPARISON_OPERATOR[\"GREATER_THAN_EQUAL\"] = \"GTE\";\n    COMPARISON_OPERATOR[\"EQUAL\"] = \"EQ\";\n    COMPARISON_OPERATOR[\"CONTAINS\"] = \"CONTAINS\";\n})(COMPARISON_OPERATOR || (COMPARISON_OPERATOR = {}));\nconst COMPARATOR_MAP = {\n    GTE: '>=',\n    GT: '>',\n    LTE: '<=',\n    LT: '<',\n    EQ: '=',\n};\nvar StatusIcon;\n(function (StatusIcon) {\n    StatusIcon[\"ERROR\"] = \"error\";\n    StatusIcon[\"ACTIVE\"] = \"active\";\n    StatusIcon[\"NORMAL\"] = \"normal\";\n    StatusIcon[\"ACKNOWLEDGED\"] = \"acknowledged\";\n    StatusIcon[\"SNOOZED\"] = \"snoozed\";\n    StatusIcon[\"DISABLED\"] = \"disabled\";\n    StatusIcon[\"LATCHED\"] = \"latched\";\n})(StatusIcon || (StatusIcon = {}));\nvar DATA_ALIGNMENT;\n(function (DATA_ALIGNMENT) {\n    DATA_ALIGNMENT[\"EITHER\"] = \"EITHER\";\n    DATA_ALIGNMENT[\"RIGHT\"] = \"RIGHT\";\n    DATA_ALIGNMENT[\"LEFT\"] = \"LEFT\";\n})(DATA_ALIGNMENT || (DATA_ALIGNMENT = {}));\n\nexport { COMPARISON_OPERATOR as C, DATA_ALIGNMENT as D, LEGEND_POSITION as L, StatusIcon as S, COMPARATOR_MAP as a, ScaleType as b };\n","/**\n * Get the points for a given resolution from a data stream\n */\nconst getDataPoints = (stream, resolution) => {\n    if (resolution === 0) {\n        return stream.data;\n    }\n    if (stream.aggregates == null) {\n        return [];\n    }\n    return stream.aggregates[resolution] || [];\n};\n\nexport { getDataPoints as g };\n","const MAX_PRECISION = 4;\n/**\n * Rounds a number to a pre-determined precision\n *\n * i.e. round(100000.1234) => 100000.1234\n *      round(100000.12345678) => 100000.1234\n *      round(.02345678) => 0.02346\n */\nconst round = (num) => {\n    if (Number.isNaN(num) || num === Infinity || num === -Infinity) {\n        return num;\n    }\n    if (Math.abs(num) < 1) {\n        return Number(num.toPrecision(MAX_PRECISION));\n    }\n    const integer = Math.trunc(num);\n    const decimal = num - integer;\n    return Number((integer + Number(decimal.toFixed(MAX_PRECISION))).toFixed(MAX_PRECISION));\n};\n/**\n * Checks if value can be used as a number\n */\nconst isNumeric = (value) => /^(\\+|-)?(Infinity|\\d+)(\\.\\d+)?e?((\\+|-)?\\d+)?$/.test(String(value));\n\nexport { isNumeric as i, round as r };\n","import { r as registerInstance, h } from './index-1cec361c.js';\nimport { V as Value } from './Value-47ec6a7b.js';\nimport { S as StatusIcon } from './constants-9d5458e0.js';\nimport { g as getDataPoints } from './getDataPoints-c53771e0.js';\nimport './number-3e8376bf.js';\nimport './terms-7b76cdf8.js';\n\nconst ScTableCell = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * Return the most recent value from the data stream present.\n     *\n     * If no such value exists, returns `undefined`.\n     */\n    this.value = () => {\n      const { dataStream = undefined } = this.cell || {};\n      const points = dataStream ? getDataPoints(dataStream, dataStream.resolution) : [];\n      if (points.length === 0) {\n        return undefined;\n      }\n      // data is sorted chronological, from old to more recent - making this the latest value.\n      return points[points.length - 1].y;\n    };\n  }\n  render() {\n    const { dataStream = undefined, color = undefined, icon = undefined } = this.cell || {};\n    const error = dataStream && dataStream.error;\n    const isLoading = dataStream && dataStream.isLoading;\n    if (error != null) {\n      /** Error */\n      // If there is an error associated with the data stream, we cannot necessarily trust what\n      // the data stream is telling us - i.e. it may be stale. So even if we could display some\n      // existing data, error UX takes precedence.\n      return (h(\"div\", { class: \"error\" }, h(\"sc-chart-icon\", { name: StatusIcon.ERROR }), error));\n    }\n    if (isLoading) {\n      /** Loading */\n      // Loading is render blocking, so even if we have a value we could display, we display the spinner\n      return (h(\"div\", { class: \"loading-wrapper\" }, h(\"sc-loading-spinner\", null)));\n    }\n    /** Display cell value */\n    return (this.cell &&\n      this.cell.dataStream && (h(\"span\", { style: { color: color || 'unset', display: 'flex' } }, icon && h(\"sc-chart-icon\", { name: icon }), h(Value, { value: this.value() }))));\n  }\n};\n\nexport { ScTableCell as sc_table_cell };\n","// For use when there is a data stream, but there is no value contained within the time frame being viewed.\nconst NO_VALUE_PRESENT = '-';\n/**\n * default messages, can be overridden via `MessageOverrides` API.\n */\n/* default 'no data streams' empty state messaging */\nconst NO_DATA_STREAMS_PRESENT_HEADER = 'No properties or alarms';\nconst NO_DATA_STREAMS_PRESENT_SUB_HEADER = \"This widget doesn't have any properties or alarms.\";\n/* default 'no data' empty state messaging */\nconst NO_DATA_PRESENT_HEADER = 'No data';\nconst NO_DATA_PRESENT_SUB_HEADER = \"There's no data to display for this time range.\";\n\nexport { NO_VALUE_PRESENT as N, NO_DATA_PRESENT_HEADER as a, NO_DATA_PRESENT_SUB_HEADER as b, NO_DATA_STREAMS_PRESENT_HEADER as c, NO_DATA_STREAMS_PRESENT_SUB_HEADER as d };\n"],"names":["Value","_ref","_ref$isEnabled","isEnabled","value","unit","round","h","class","String","NO_VALUE_PRESENT","ScaleType","LEGEND_POSITION","COMPARISON_OPERATOR","StatusIcon","DATA_ALIGNMENT","COMPARATOR_MAP","GTE","GT","LTE","LT","EQ","getDataPoints","stream","resolution","data","aggregates","num","Number","isNaN","Infinity","Math","abs","toPrecision","integer","trunc","toFixed","isNumeric","test","ScTableCell","hostRef","_this","_classCallCheck","registerInstance","this","_ref$dataStream","cell","dataStream","undefined","points","length","y","_createClass","key","_ref2","_ref2$dataStream","_ref2$color","color","_ref2$icon","icon","error","isLoading","name","ERROR","style","display","NO_DATA_STREAMS_PRESENT_HEADER","NO_DATA_STREAMS_PRESENT_SUB_HEADER","NO_DATA_PRESENT_HEADER","NO_DATA_PRESENT_SUB_HEADER"],"sourceRoot":""}