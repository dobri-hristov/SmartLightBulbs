{"version":3,"file":"static/js/1980.e0762510.chunk.js","mappings":"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","sources":["../node_modules/@iot-app-kit/components/dist/esm/constants-8fe8bb38.js","../node_modules/@iot-app-kit/components/dist/esm/constants-9d5458e0.js","../node_modules/@iot-app-kit/components/dist/esm/dataConstants-71f11842.js","../node_modules/@iot-app-kit/components/dist/esm/line-chart-unsupported-data-types.entry.js"],"sourcesContent":["import './constants-9d5458e0.js';\n\nconst Y_MIN = 0;\nconst Y_MAX = 5000;\nconst X_MIN = new Date(2000, 0, 0, 0, 0);\nconst X_MAX = new Date(2000, 0, 0, 0, 10);\nconst Y_VALUE = 2500;\nconst Y_VALUE_STRING = 'Warning';\n({\n    value: new Date(X_MIN.getTime() + (1 / 3) * (X_MAX.getTime() - X_MIN.getTime())),\n    label: {\n        text: 'here is a x label',\n        show: true,\n    },\n    showValue: true,\n    color: 'purple',\n    id: 'purple-x-annotation',\n});\n// test data point dead center of the viewport\nconst TEST_DATA_POINT_STANDARD = {\n    x: (X_MIN.getTime() + X_MAX.getTime()) / 2,\n    y: Y_VALUE,\n};\n\nexport { TEST_DATA_POINT_STANDARD as T, X_MIN as X, Y_VALUE_STRING as Y, Y_VALUE as a, Y_MIN as b, Y_MAX as c, X_MAX as d };\n","// NOTE: `enum`s are held separately from the types which are exported\n// as part of the package, since `enum`'s cannot be present in a type declaration file.\n// THis is due to an `enum` being a type plus an implementation, while type declaration\n// files can only contain typing information.\n/**\n * Maps the view model to d3 axis types. In the future we could add additional\n * custom scale types beyond what's available in `d3-axis`.\n */\nvar ScaleType;\n(function (ScaleType) {\n    ScaleType[\"TimeSeries\"] = \"time-series\";\n    ScaleType[\"Log\"] = \"log\";\n    ScaleType[\"Linear\"] = \"linear\";\n})(ScaleType || (ScaleType = {}));\nvar LEGEND_POSITION;\n(function (LEGEND_POSITION) {\n    LEGEND_POSITION[\"RIGHT\"] = \"RIGHT\";\n    LEGEND_POSITION[\"BOTTOM\"] = \"BOTTOM\";\n})(LEGEND_POSITION || (LEGEND_POSITION = {}));\nvar COMPARISON_OPERATOR;\n(function (COMPARISON_OPERATOR) {\n    COMPARISON_OPERATOR[\"LESS_THAN\"] = \"LT\";\n    COMPARISON_OPERATOR[\"GREATER_THAN\"] = \"GT\";\n    COMPARISON_OPERATOR[\"LESS_THAN_EQUAL\"] = \"LTE\";\n    COMPARISON_OPERATOR[\"GREATER_THAN_EQUAL\"] = \"GTE\";\n    COMPARISON_OPERATOR[\"EQUAL\"] = \"EQ\";\n    COMPARISON_OPERATOR[\"CONTAINS\"] = \"CONTAINS\";\n})(COMPARISON_OPERATOR || (COMPARISON_OPERATOR = {}));\nconst COMPARATOR_MAP = {\n    GTE: '>=',\n    GT: '>',\n    LTE: '<=',\n    LT: '<',\n    EQ: '=',\n};\nvar StatusIcon;\n(function (StatusIcon) {\n    StatusIcon[\"ERROR\"] = \"error\";\n    StatusIcon[\"ACTIVE\"] = \"active\";\n    StatusIcon[\"NORMAL\"] = \"normal\";\n    StatusIcon[\"ACKNOWLEDGED\"] = \"acknowledged\";\n    StatusIcon[\"SNOOZED\"] = \"snoozed\";\n    StatusIcon[\"DISABLED\"] = \"disabled\";\n    StatusIcon[\"LATCHED\"] = \"latched\";\n})(StatusIcon || (StatusIcon = {}));\nvar DATA_ALIGNMENT;\n(function (DATA_ALIGNMENT) {\n    DATA_ALIGNMENT[\"EITHER\"] = \"EITHER\";\n    DATA_ALIGNMENT[\"RIGHT\"] = \"RIGHT\";\n    DATA_ALIGNMENT[\"LEFT\"] = \"LEFT\";\n})(DATA_ALIGNMENT || (DATA_ALIGNMENT = {}));\n\nexport { COMPARISON_OPERATOR as C, DATA_ALIGNMENT as D, LEGEND_POSITION as L, StatusIcon as S, COMPARATOR_MAP as a, ScaleType as b };\n","var DataType;\n(function (DataType) {\n    DataType[\"NUMBER\"] = \"NUMBER\";\n    DataType[\"STRING\"] = \"STRING\";\n    DataType[\"BOOLEAN\"] = \"BOOLEAN\";\n})(DataType || (DataType = {}));\n/**\n * Stream type is a classification of a `DataStream`, which contains with it additional structure and features specific\n * to the stream type.\n *\n * For example, for an alarm stream, if a stream is associated to the alarm stream, we interpret the stream as\n * representing the status for the given alarm and present alarm specific UX such as alarm status on the legend and tooltip.\n */\nvar StreamType;\n(function (StreamType) {\n    StreamType[\"ALARM\"] = \"ALARM\";\n    StreamType[\"ANOMALY\"] = \"ANOMALY\";\n    StreamType[\"ALARM_THRESHOLD\"] = \"ALARM_THRESHOLD\";\n})(StreamType || (StreamType = {}));\nvar TREND_TYPE;\n(function (TREND_TYPE) {\n    TREND_TYPE[\"LINEAR\"] = \"linear-regression\";\n})(TREND_TYPE || (TREND_TYPE = {}));\nvar ChartType;\n(function (ChartType) {\n    ChartType[\"BarChart\"] = \"bar-chart\";\n    ChartType[\"LineChart\"] = \"line-chart\";\n})(ChartType || (ChartType = {}));\n\nexport { DataType as D, StreamType as S, TREND_TYPE as T };\n","import { r as registerInstance, h } from './index-1cec361c.js';\nimport { D as DataType } from './dataConstants-71f11842.js';\nimport { Y as Y_VALUE_STRING } from './constants-8fe8bb38.js';\nimport './constants-9d5458e0.js';\n\n// viewport boundaries\nconst Y_MIN = 0;\nconst Y_MAX = 5000;\nconst X_MIN = new Date(1998, 0, 0);\nconst X_MAX = new Date(2000, 0, 1);\nconst WIDTH = X_MAX.getTime() - X_MIN.getTime();\nconst LineChartUnsupportedDataTypes = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  render() {\n    return (h(\"div\", { class: \"synchro-chart-tests\" }, h(\"div\", { id: \"chart-container\", style: { marginTop: '20px', width: '500px', height: '500px' } }, h(\"sc-line-chart\", { widgetId: \"widget-id\", dataStreams: [\n        {\n          id: 'test',\n          color: 'black',\n          name: 'test stream',\n          data: [\n            {\n              x: new Date(X_MIN.getTime() + WIDTH / 4).getTime(),\n              y: Y_VALUE_STRING,\n            },\n            {\n              x: new Date(X_MIN.getTime() + WIDTH / 4).getTime(),\n              y: Y_VALUE_STRING,\n            },\n          ],\n          resolution: 0,\n          dataType: DataType.STRING,\n        },\n      ], size: {\n        height: 500,\n        width: 500,\n      }, viewport: { start: X_MIN, end: X_MAX, yMin: Y_MIN, yMax: Y_MAX }, bufferFactor: 1, minBufferSize: 1 }), h(\"sc-webgl-context\", null))));\n  }\n};\n\nexport { LineChartUnsupportedDataTypes as line_chart_unsupported_data_types };\n"],"names":["Y_MIN","Y_MAX","X_MIN","Date","X_MAX","Y_VALUE","Y_VALUE_STRING","getTime","TEST_DATA_POINT_STANDARD","x","y","ScaleType","LEGEND_POSITION","COMPARISON_OPERATOR","StatusIcon","DATA_ALIGNMENT","COMPARATOR_MAP","GTE","GT","LTE","LT","EQ","DataType","StreamType","TREND_TYPE","ChartType","WIDTH","LineChartUnsupportedDataTypes","hostRef","_classCallCheck","registerInstance","this","_createClass","key","value","h","class","id","style","marginTop","width","height","widgetId","dataStreams","color","name","data","resolution","dataType","STRING","size","viewport","start","end","yMin","yMax","bufferFactor","minBufferSize"],"sourceRoot":""}