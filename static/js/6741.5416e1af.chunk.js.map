{"version":3,"file":"static/js/6741.5416e1af.chunk.js","mappings":"4HAQA,IAAIA,EAMAC,EAKAC,E,mJAVJ,SAAWF,GACPA,EAAsB,WAAI,cAC1BA,EAAe,IAAI,MACnBA,EAAkB,OAAI,QACzB,CAJD,CAIGA,IAAcA,EAAY,CAAC,IAE9B,SAAWC,GACPA,EAAuB,MAAI,QAC3BA,EAAwB,OAAI,QAC/B,CAHD,CAGGA,IAAoBA,EAAkB,CAAC,IAE1C,SAAWC,GACPA,EAA+B,UAAI,KACnCA,EAAkC,aAAI,KACtCA,EAAqC,gBAAI,MACzCA,EAAwC,mBAAI,MAC5CA,EAA2B,MAAI,KAC/BA,EAA8B,SAAI,UACrC,CAPD,CAOGA,IAAwBA,EAAsB,CAAC,IAClD,IAOIC,EAUAC,EAjBEC,EAAiB,CACnBC,IAAK,KACLC,GAAI,IACJC,IAAK,KACLC,GAAI,IACJC,GAAI,MAGR,SAAWP,GACPA,EAAkB,MAAI,QACtBA,EAAmB,OAAI,SACvBA,EAAmB,OAAI,SACvBA,EAAyB,aAAI,eAC7BA,EAAoB,QAAI,UACxBA,EAAqB,SAAI,WACzBA,EAAoB,QAAI,SAC3B,CARD,CAQGA,IAAeA,EAAa,CAAC,IAEhC,SAAWC,GACPA,EAAuB,OAAI,SAC3BA,EAAsB,MAAI,QAC1BA,EAAqB,KAAI,MAC5B,CAJD,CAIGA,IAAmBA,EAAiB,CAAC,G,uBClDxC,IAAIO,EAaAC,EAMAC,EAIAC,E,8EAtBJ,SAAWH,GACPA,EAAiB,OAAI,SACrBA,EAAiB,OAAI,SACrBA,EAAkB,QAAI,SACzB,CAJD,CAIGA,IAAaA,EAAW,CAAC,IAS5B,SAAWC,GACPA,EAAkB,MAAI,QACtBA,EAAoB,QAAI,UACxBA,EAA4B,gBAAI,iBACnC,CAJD,CAIGA,IAAeA,EAAa,CAAC,IAEhC,SAAWC,GACPA,EAAmB,OAAI,mBAC1B,CAFD,CAEGA,IAAeA,EAAa,CAAC,IAEhC,SAAWC,GACPA,EAAoB,SAAI,YACxBA,EAAqB,UAAI,YAC5B,CAHD,CAGGA,IAAcA,EAAY,CAAC,G,sDC3B9B,IAAIC,EAAa,k9PAsDjB,SAASC,IAA0B,IAApBC,EAAGC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAC,GAAIG,EAAMH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAC,KACxBI,EAAS,KAQb,OANAL,GAAOA,EAAI,IAAIM,QAAQ,gBAAiB,SACpCA,QAAQR,GAAY,SAASS,EAAGC,EAAGC,IACrCA,EAAQC,EAAUD,MACPJ,GAAUA,GAAU,GAAKM,WAAWH,EAAG,IAAMC,EAC1D,IAEOJ,GAAWA,GAAUK,EAAUN,IAAW,EACnD,CAEA,SAASM,EAAUV,GACjB,OAAOD,EAAMC,IAAQD,EAAMC,EAAIY,cAAcN,QAAQ,KAAM,IAC7D,CA7DAP,EAAMc,WACNd,EAAMe,GAAK,KAEXf,EAAM,SACNA,EAAM,WACNA,EAAMgB,GACNhB,EAAMiB,YAAc,KAEpBjB,EAAMkB,YACNlB,EAAMmB,GACNnB,EAAM,IAAM,EAEZA,EAAMoB,OACNpB,EAAMqB,IACNrB,EAAMsB,EAAe,IAAXtB,EAAMmB,GAEhBnB,EAAMuB,OACNvB,EAAMwB,IACNxB,EAAMyB,EAAc,GAAVzB,EAAMsB,EAEhBtB,EAAM0B,KACN1B,EAAM2B,GACN3B,EAAM4B,EAAc,GAAV5B,EAAMyB,EAEhBzB,EAAM6B,IACN7B,EAAM8B,EAAc,GAAV9B,EAAM4B,EAEhB5B,EAAM+B,KACN/B,EAAMgC,GACNhC,EAAMiC,EAAc,EAAVjC,EAAM8B,EAEhB9B,EAAMkC,MACNlC,EAAMmC,EACI,QAAVnC,EAAM8B,EAEN9B,EAAMoC,KACNpC,EAAMqC,GACNrC,EAAMsC,EAAc,OAAVtC,EAAM8B,C,sLCrCVS,G,OAAQ,IAAIC,KAAK,KAAM,EAAG,IAC1BC,EAAQ,IAAID,KAAK,KAAM,EAAG,GAI1BE,EAAmB,CACvB,CACEC,EAAG,IAAIH,KAAK,KAAM,EAAG,GAAGI,UACxBN,EAAG,KAEL,CACEK,EAAG,IAAIH,KAAK,KAAM,EAAG,GAAGI,UACxBN,EAAG,KAEL,CACEK,EAAG,IAAIH,KAAK,KAAM,EAAG,GAAGI,UACxBN,EAAG,MAGDO,EAAyC,WAC7C,SAAAA,EAAYC,IAASC,EAAAA,EAAAA,GAAA,KAAAF,IACnBG,EAAAA,EAAAA,GAAiBC,KAAMH,EACzB,CA8BC,OA9BAI,EAAAA,EAAAA,GAAAL,EAAA,EAAAM,IAAA,SAAAC,MACD,WACE,OAAQxB,EAAAA,EAAAA,GAAE,MAAO,MAAMA,EAAAA,EAAAA,GAAE,gBAAiB,CAAEyB,SAAU,YAAaC,YAAa,CAC5E,CACEC,GAAI,OACJC,MAAO,MACPC,KAAM,cACNC,YAAUC,EAAAA,EAAAA,GAAA,GAAKC,EAAAA,EAAelB,GAC9BmB,KAAM,GACNC,WAAYF,EAAAA,EACZG,SAAUpE,EAAAA,EAASqE,SAEpBC,KAAM,CACPC,OAAQ,IACRC,MAAO,KACNC,SAAU,CACXC,MAAO9B,EACP+B,IAAK7B,EACL8B,KAtCM,EAuCNC,KAtCM,KAuCLC,OAAQ,CACTC,SAAUzF,EAAAA,EAAgB0F,OAC1BR,MAAO,KACNS,OAAQ,CACT,CACEC,aAAc,OACdC,KAAMjF,EAAAA,EAAWkF,OACjBvB,MAAO,eAEL5B,EAAAA,EAAAA,GAAE,mBAAoB,MAChC,KAACiB,CAAA,CAjC4C,E,4PCxBzCe,EAAe,IACfoB,EAAe,GAAKpB,EACpBqB,EAAa,GAAKD,EAClBE,EAAY,GAAKD,EAEjBE,EAAc,GAAKD,EACnBE,EAAa,GAAKD,EAyBlBE,EAAY,SAACC,GACf,GAAIA,EAAe,EACf,MAAM,IAAIC,MAAM,4BAEpB,IAAIC,EAAUC,KAAKC,MAAMJ,EAAe,KACpC/D,EAASkE,KAAKC,MAAMF,EAAU,IAC9B9D,EAAO+D,KAAKC,MAAMnE,EAAS,IAK/B,MAAO,CACHM,IALQ4D,KAAKC,MAAMhE,EAAO,IAM1BA,KAHJA,GAAQ,GAIJH,OALJA,GAAU,GAMNiE,QAPJA,GAAW,GASf,EACMG,EAAc,SAACC,EAAM9B,EAAU+B,GAAqB,IAAjBxB,EAAKwB,EAALxB,MAC/ByB,EADyCD,EAAHvB,IACb1B,UAAYyB,EAAMzB,UACjD,OAAIkB,EAAamB,EACTa,EAAqBd,EACdY,EAAKG,eAAe,QAAS,CAChCxE,OAAQ,UACRH,OAAQ,YAGZ0E,GAAsB,GAAKd,EACpBY,EAAKG,eAAe,QAAS,CAChCrE,KAAM,UACNH,OAAQ,UACRH,OAAQ,UACR4E,QAAQ,IAGZF,GAAsBb,EACfW,EAAKG,eAAe,QAAS,CAChCrE,KAAM,UACNH,OAAQ,UACRyE,QAAQ,IAGZF,GAAsBZ,EACfU,EAAKG,eAAe,QAAS,CAChCC,QAAQ,EACRtE,KAAM,UACNQ,MAAO,UACPX,OAAQ,UACRM,IAAK,YAGTiE,GAAsBX,EACfS,EAAKG,eAAe,QAAS,CAChCC,QAAQ,EACRtE,KAAM,UACNU,KAAM,UACNF,MAAO,UACPL,IAAK,YAGN+D,EAAKG,eAAe,QAAS,CAChClE,IAAK,UACLK,MAAO,UACPE,KAAM,YAGV0B,GAAcmB,EACPW,EAAKG,eAAe,QAAS,CAChCrE,KAAM,UACNG,IAAK,UACLK,MAAO,UACP8D,QAAQ,IAGZlC,EAAaoB,EACNU,EAAKG,eAAe,QAAS,CAChClE,IAAK,UACLK,MAAO,YAGR0D,EAAKG,eAAe,QAAS,CAChC3D,KAAM,UACNF,MAAO,UACPL,IAAK,WAEb,EACMoE,EAAgB,SAACC,GACnB,GAAwB,kBAAbA,EACP,OAAOA,EAEX,IAAMC,GAAanG,EAAAA,EAAAA,GAAMkG,EAAU,MAEnC,OAAqB,MAAdC,EAAqBA,EAAa,GAAKnB,CAClD,C","sources":["../node_modules/@iot-app-kit/components/dist/esm/constants-9d5458e0.js","../node_modules/@iot-app-kit/components/dist/esm/dataConstants-71f11842.js","../node_modules/@iot-app-kit/components/dist/esm/index-b3f1c3a1.js","../node_modules/@iot-app-kit/components/dist/esm/sc-scatter-chart-trend-line-color-configuration.entry.js","../node_modules/@iot-app-kit/components/dist/esm/time-b684d8c5.js"],"sourcesContent":["// NOTE: `enum`s are held separately from the types which are exported\n// as part of the package, since `enum`'s cannot be present in a type declaration file.\n// THis is due to an `enum` being a type plus an implementation, while type declaration\n// files can only contain typing information.\n/**\n * Maps the view model to d3 axis types. In the future we could add additional\n * custom scale types beyond what's available in `d3-axis`.\n */\nvar ScaleType;\n(function (ScaleType) {\n    ScaleType[\"TimeSeries\"] = \"time-series\";\n    ScaleType[\"Log\"] = \"log\";\n    ScaleType[\"Linear\"] = \"linear\";\n})(ScaleType || (ScaleType = {}));\nvar LEGEND_POSITION;\n(function (LEGEND_POSITION) {\n    LEGEND_POSITION[\"RIGHT\"] = \"RIGHT\";\n    LEGEND_POSITION[\"BOTTOM\"] = \"BOTTOM\";\n})(LEGEND_POSITION || (LEGEND_POSITION = {}));\nvar COMPARISON_OPERATOR;\n(function (COMPARISON_OPERATOR) {\n    COMPARISON_OPERATOR[\"LESS_THAN\"] = \"LT\";\n    COMPARISON_OPERATOR[\"GREATER_THAN\"] = \"GT\";\n    COMPARISON_OPERATOR[\"LESS_THAN_EQUAL\"] = \"LTE\";\n    COMPARISON_OPERATOR[\"GREATER_THAN_EQUAL\"] = \"GTE\";\n    COMPARISON_OPERATOR[\"EQUAL\"] = \"EQ\";\n    COMPARISON_OPERATOR[\"CONTAINS\"] = \"CONTAINS\";\n})(COMPARISON_OPERATOR || (COMPARISON_OPERATOR = {}));\nconst COMPARATOR_MAP = {\n    GTE: '>=',\n    GT: '>',\n    LTE: '<=',\n    LT: '<',\n    EQ: '=',\n};\nvar StatusIcon;\n(function (StatusIcon) {\n    StatusIcon[\"ERROR\"] = \"error\";\n    StatusIcon[\"ACTIVE\"] = \"active\";\n    StatusIcon[\"NORMAL\"] = \"normal\";\n    StatusIcon[\"ACKNOWLEDGED\"] = \"acknowledged\";\n    StatusIcon[\"SNOOZED\"] = \"snoozed\";\n    StatusIcon[\"DISABLED\"] = \"disabled\";\n    StatusIcon[\"LATCHED\"] = \"latched\";\n})(StatusIcon || (StatusIcon = {}));\nvar DATA_ALIGNMENT;\n(function (DATA_ALIGNMENT) {\n    DATA_ALIGNMENT[\"EITHER\"] = \"EITHER\";\n    DATA_ALIGNMENT[\"RIGHT\"] = \"RIGHT\";\n    DATA_ALIGNMENT[\"LEFT\"] = \"LEFT\";\n})(DATA_ALIGNMENT || (DATA_ALIGNMENT = {}));\n\nexport { COMPARISON_OPERATOR as C, DATA_ALIGNMENT as D, LEGEND_POSITION as L, StatusIcon as S, COMPARATOR_MAP as a, ScaleType as b };\n","var DataType;\n(function (DataType) {\n    DataType[\"NUMBER\"] = \"NUMBER\";\n    DataType[\"STRING\"] = \"STRING\";\n    DataType[\"BOOLEAN\"] = \"BOOLEAN\";\n})(DataType || (DataType = {}));\n/**\n * Stream type is a classification of a `DataStream`, which contains with it additional structure and features specific\n * to the stream type.\n *\n * For example, for an alarm stream, if a stream is associated to the alarm stream, we interpret the stream as\n * representing the status for the given alarm and present alarm specific UX such as alarm status on the legend and tooltip.\n */\nvar StreamType;\n(function (StreamType) {\n    StreamType[\"ALARM\"] = \"ALARM\";\n    StreamType[\"ANOMALY\"] = \"ANOMALY\";\n    StreamType[\"ALARM_THRESHOLD\"] = \"ALARM_THRESHOLD\";\n})(StreamType || (StreamType = {}));\nvar TREND_TYPE;\n(function (TREND_TYPE) {\n    TREND_TYPE[\"LINEAR\"] = \"linear-regression\";\n})(TREND_TYPE || (TREND_TYPE = {}));\nvar ChartType;\n(function (ChartType) {\n    ChartType[\"BarChart\"] = \"bar-chart\";\n    ChartType[\"LineChart\"] = \"line-chart\";\n})(ChartType || (ChartType = {}));\n\nexport { DataType as D, StreamType as S, TREND_TYPE as T };\n","let durationRE = /(-?(?:\\d+\\.?\\d*|\\d*\\.?\\d+)(?:e[-+]?\\d+)?)\\s*([\\p{L}]*)/uig;\r\n\r\n\r\n/**\r\n * conversion ratios\r\n */\r\n\r\nparse.nanosecond =\r\nparse.ns = 1 / 1e6;\r\n\r\nparse['µs'] =\r\nparse['μs'] =\r\nparse.us =\r\nparse.microsecond = 1 / 1e3;\r\n\r\nparse.millisecond =\r\nparse.ms =\r\nparse[''] = 1;\r\n\r\nparse.second =\r\nparse.sec =\r\nparse.s = parse.ms * 1000;\r\n\r\nparse.minute =\r\nparse.min =\r\nparse.m = parse.s * 60;\r\n\r\nparse.hour =\r\nparse.hr =\r\nparse.h = parse.m * 60;\r\n\r\nparse.day =\r\nparse.d = parse.h * 24;\r\n\r\nparse.week =\r\nparse.wk =\r\nparse.w = parse.d * 7;\r\n\r\nparse.month =\r\nparse.b =\r\nparse.d * (365.25 / 12);\r\n\r\nparse.year =\r\nparse.yr =\r\nparse.y = parse.d * 365.25;\r\n\r\n/**\r\n * convert `str` to ms\r\n *\r\n * @param {String} str\r\n * @param {String} format\r\n * @return {Number}\r\n */\r\n\r\nfunction parse(str='', format='ms'){\r\n  var result = null;\r\n  // ignore commas/placeholders\r\n  str = (str+'').replace(/(\\d)[,_](\\d)/g, '$1$2');\r\n  str.replace(durationRE, function(_, n, units){\r\n    units = unitRatio(units);\r\n    if (units) result = (result || 0) + parseFloat(n, 10) * units;\r\n  });\r\n\r\n  return result && (result / (unitRatio(format) || 1))\r\n}\r\n\r\nfunction unitRatio(str) {\r\n  return parse[str] || parse[str.toLowerCase().replace(/s$/, '')]\r\n}\n\nexport { parse as p };\n","import { r as registerInstance, h } from './index-1cec361c.js';\nimport { S as SECOND_IN_MS } from './time-b684d8c5.js';\nimport { D as DataType, T as TREND_TYPE } from './dataConstants-71f11842.js';\nimport { L as LEGEND_POSITION } from './constants-9d5458e0.js';\nimport './index-b3f1c3a1.js';\n\n// viewport boundaries\nconst X_MIN = new Date(2018, 0, 0);\nconst X_MAX = new Date(2020, 0, 0);\nconst Y_MIN = 0;\nconst Y_MAX = 5000;\n// test data point dead center of the viewport\nconst TEST_DATA_POINTS = [\n  {\n    x: new Date(2018, 6, 0).getTime(),\n    y: 1000,\n  },\n  {\n    x: new Date(2019, 0, 0).getTime(),\n    y: 4000,\n  },\n  {\n    x: new Date(2019, 6, 0).getTime(),\n    y: 3000,\n  },\n];\nconst ScScatterChartTrendLineColorConfiguration = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  render() {\n    return (h(\"div\", null, h(\"sc-line-chart\", { widgetId: \"widget-id\", dataStreams: [\n        {\n          id: 'test',\n          color: 'red',\n          name: 'test stream',\n          aggregates: { [SECOND_IN_MS]: TEST_DATA_POINTS },\n          data: [],\n          resolution: SECOND_IN_MS,\n          dataType: DataType.NUMBER,\n        },\n      ], size: {\n        height: 500,\n        width: 500,\n      }, viewport: {\n        start: X_MIN,\n        end: X_MAX,\n        yMin: Y_MIN,\n        yMax: Y_MAX,\n      }, legend: {\n        position: LEGEND_POSITION.BOTTOM,\n        width: 300,\n      }, trends: [\n        {\n          dataStreamId: 'test',\n          type: TREND_TYPE.LINEAR,\n          color: '#123abc',\n        },\n      ] }), h(\"sc-webgl-context\", null)));\n  }\n};\n\nexport { ScScatterChartTrendLineColorConfiguration as sc_scatter_chart_trend_line_color_configuration };\n","import { p as parse } from './index-b3f1c3a1.js';\n\nconst SECOND_IN_MS = 1000;\nconst MINUTE_IN_MS = 60 * SECOND_IN_MS;\nconst HOUR_IN_MS = 60 * MINUTE_IN_MS;\nconst DAY_IN_MS = 24 * HOUR_IN_MS;\n// Not precisely accurate, only estimates. exact duration depends on start date. use with care.\nconst MONTH_IN_MS = 30 * DAY_IN_MS;\nconst YEAR_IN_MS = 12 * MONTH_IN_MS;\n/**\n * ConvertMS is a helper function that will take in milliseconds and convert it to the highest detonator\n * and does not return the \"remainder\"\n *\n * It is important to note that the object returning does not represent equivalence!\n *\n * For Example:\n * convert(MINUTE_IN_MS) will return:\n * {\n *   day: 0,\n *   hour: 0\n *   minute: 1,\n *   seconds: 0,\n * }\n *\n * IT DOES NOT RETURN:\n *\n * {\n *   day: 0,\n *   hour: 0,\n *   minute: 1,\n *   seconds: 60, <--- does not return the \"equivalence\"\n * }\n */\nconst convertMS = (milliseconds) => {\n    if (milliseconds < 0) {\n        throw new Error('Time cannot be negative!');\n    }\n    let seconds = Math.floor(milliseconds / 1000);\n    let minute = Math.floor(seconds / 60);\n    let hour = Math.floor(minute / 60);\n    const day = Math.floor(hour / 24);\n    seconds %= 60;\n    minute %= 60;\n    hour %= 24;\n    return {\n        day,\n        hour,\n        minute,\n        seconds,\n    };\n};\nconst displayDate = (date, resolution, { start, end }) => {\n    const viewportDurationMS = end.getTime() - start.getTime();\n    if (resolution < HOUR_IN_MS) {\n        if (viewportDurationMS < MINUTE_IN_MS) {\n            return date.toLocaleString('en-US', {\n                minute: 'numeric',\n                second: 'numeric',\n            });\n        }\n        if (viewportDurationMS <= 10 * MINUTE_IN_MS) {\n            return date.toLocaleString('en-US', {\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n                hour12: true,\n            });\n        }\n        if (viewportDurationMS <= HOUR_IN_MS) {\n            return date.toLocaleString('en-US', {\n                hour: 'numeric',\n                minute: 'numeric',\n                hour12: true,\n            });\n        }\n        if (viewportDurationMS <= DAY_IN_MS) {\n            return date.toLocaleString('en-US', {\n                hour12: true,\n                hour: 'numeric',\n                month: 'numeric',\n                minute: 'numeric',\n                day: 'numeric',\n            });\n        }\n        if (viewportDurationMS <= MONTH_IN_MS) {\n            return date.toLocaleString('en-US', {\n                hour12: true,\n                hour: 'numeric',\n                year: 'numeric',\n                month: 'numeric',\n                day: 'numeric',\n            });\n        }\n        return date.toLocaleString('en-US', {\n            day: 'numeric',\n            month: 'numeric',\n            year: 'numeric',\n        });\n    }\n    if (resolution <= HOUR_IN_MS) {\n        return date.toLocaleString('en-US', {\n            hour: 'numeric',\n            day: 'numeric',\n            month: 'numeric',\n            hour12: true,\n        });\n    }\n    if (resolution < DAY_IN_MS) {\n        return date.toLocaleString('en-US', {\n            day: 'numeric',\n            month: 'numeric',\n        });\n    }\n    return date.toLocaleString('en-US', {\n        year: 'numeric',\n        month: 'numeric',\n        day: 'numeric',\n    });\n};\nconst parseDuration = (duration) => {\n    if (typeof duration === 'number') {\n        return duration;\n    }\n    const parsedTime = parse(duration, 'ms');\n    // if duration is a string but we cannot parse it, we default to 10 mins.\n    return parsedTime != null ? parsedTime : 10 * MINUTE_IN_MS;\n};\n\nexport { DAY_IN_MS as D, HOUR_IN_MS as H, MINUTE_IN_MS as M, SECOND_IN_MS as S, YEAR_IN_MS as Y, MONTH_IN_MS as a, convertMS as c, displayDate as d, parseDuration as p };\n"],"names":["ScaleType","LEGEND_POSITION","COMPARISON_OPERATOR","StatusIcon","DATA_ALIGNMENT","COMPARATOR_MAP","GTE","GT","LTE","LT","EQ","DataType","StreamType","TREND_TYPE","ChartType","durationRE","parse","str","arguments","length","undefined","format","result","replace","_","n","units","unitRatio","parseFloat","toLowerCase","nanosecond","ns","us","microsecond","millisecond","ms","second","sec","s","minute","min","m","hour","hr","h","day","d","week","wk","w","month","b","year","yr","y","X_MIN","Date","X_MAX","TEST_DATA_POINTS","x","getTime","ScScatterChartTrendLineColorConfiguration","hostRef","_classCallCheck","registerInstance","this","_createClass","key","value","widgetId","dataStreams","id","color","name","aggregates","_defineProperty","SECOND_IN_MS","data","resolution","dataType","NUMBER","size","height","width","viewport","start","end","yMin","yMax","legend","position","BOTTOM","trends","dataStreamId","type","LINEAR","MINUTE_IN_MS","HOUR_IN_MS","DAY_IN_MS","MONTH_IN_MS","YEAR_IN_MS","convertMS","milliseconds","Error","seconds","Math","floor","displayDate","date","_ref","viewportDurationMS","toLocaleString","hour12","parseDuration","duration","parsedTime"],"sourceRoot":""}