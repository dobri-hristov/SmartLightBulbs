{"version":3,"file":"static/js/821.a3d5461e.chunk.js","mappings":"2HAAA,IAAIA,EAaAC,EAMAC,EAIAC,E,8EAtBJ,SAAWH,GACPA,EAAiB,OAAI,SACrBA,EAAiB,OAAI,SACrBA,EAAkB,QAAI,SACzB,CAJD,CAIGA,IAAaA,EAAW,CAAC,IAS5B,SAAWC,GACPA,EAAkB,MAAI,QACtBA,EAAoB,QAAI,UACxBA,EAA4B,gBAAI,iBACnC,CAJD,CAIGA,IAAeA,EAAa,CAAC,IAEhC,SAAWC,GACPA,EAAmB,OAAI,mBAC1B,CAFD,CAEGA,IAAeA,EAAa,CAAC,IAEhC,SAAWC,GACPA,EAAoB,SAAI,YACxBA,EAAqB,UAAI,YAC5B,CAHD,CAGGA,IAAcA,EAAY,CAAC,G,+HCrBxBC,EAAQ,IAAIC,KAAK,KAAM,EAAG,GAC1BC,EAAQ,IAAID,KAAK,IAAM,EAAG,GAE1BE,EAAkB,CACtBC,EAAG,IAAIH,MAAMD,EAAMK,UAAYH,EAAMG,WAAa,GAAGA,UACrDC,EAAG,MAECC,EAAoB,WACxB,SAAAA,EAAYC,IAASC,EAAAA,EAAAA,GAAA,KAAAF,IACnBG,EAAAA,EAAAA,GAAiBC,KAAMH,EACzB,CAeC,OAfAI,EAAAA,EAAAA,GAAAL,EAAA,EAAAM,IAAA,SAAAC,MACD,WACE,OAAQC,EAAAA,EAAAA,GAAE,MAAO,MAAMA,EAAAA,EAAAA,GAAE,gBAAiB,CAAEC,SAAU,YAAaC,YAAa,CAC5E,CACEC,GAAI,OACJC,MAAO,QACPC,KAAM,cACNC,KAAM,CAAClB,GACPmB,WAAY,EACZC,SAAU3B,EAAAA,EAAS4B,SAEpBC,KAAM,CACPC,OAAQ,IACRC,MAAO,KACNC,SAAU,CAAEC,MAAO7B,EAAO8B,IAAK5B,EAAO6B,KA1BjC,EA0B8CC,KAzB9C,QAyBgEjB,EAAAA,EAAAA,GAAE,mBAAoB,MAClG,KAACR,CAAA,CAlBuB,E","sources":["../node_modules/@iot-app-kit/components/dist/esm/dataConstants-71f11842.js","../node_modules/@iot-app-kit/components/dist/esm/sc-webgl-chart-standard.entry.js"],"sourcesContent":["var DataType;\n(function (DataType) {\n    DataType[\"NUMBER\"] = \"NUMBER\";\n    DataType[\"STRING\"] = \"STRING\";\n    DataType[\"BOOLEAN\"] = \"BOOLEAN\";\n})(DataType || (DataType = {}));\n/**\n * Stream type is a classification of a `DataStream`, which contains with it additional structure and features specific\n * to the stream type.\n *\n * For example, for an alarm stream, if a stream is associated to the alarm stream, we interpret the stream as\n * representing the status for the given alarm and present alarm specific UX such as alarm status on the legend and tooltip.\n */\nvar StreamType;\n(function (StreamType) {\n    StreamType[\"ALARM\"] = \"ALARM\";\n    StreamType[\"ANOMALY\"] = \"ANOMALY\";\n    StreamType[\"ALARM_THRESHOLD\"] = \"ALARM_THRESHOLD\";\n})(StreamType || (StreamType = {}));\nvar TREND_TYPE;\n(function (TREND_TYPE) {\n    TREND_TYPE[\"LINEAR\"] = \"linear-regression\";\n})(TREND_TYPE || (TREND_TYPE = {}));\nvar ChartType;\n(function (ChartType) {\n    ChartType[\"BarChart\"] = \"bar-chart\";\n    ChartType[\"LineChart\"] = \"line-chart\";\n})(ChartType || (ChartType = {}));\n\nexport { DataType as D, StreamType as S, TREND_TYPE as T };\n","import { r as registerInstance, h } from './index-1cec361c.js';\nimport { D as DataType } from './dataConstants-71f11842.js';\n\n// viewport boundaries\nconst Y_MIN = 0;\nconst Y_MAX = 5000;\nconst X_MIN = new Date(1998, 0, 0);\nconst X_MAX = new Date(2000, 0, 1);\n// test data point dead center of the viewport\nconst TEST_DATA_POINT = {\n  x: new Date((X_MIN.getTime() + X_MAX.getTime()) / 2).getTime(),\n  y: (Y_MIN + Y_MAX) / 2,\n};\nconst ScWebglChartStandard = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  render() {\n    return (h(\"div\", null, h(\"sc-line-chart\", { widgetId: \"widget-id\", dataStreams: [\n        {\n          id: 'test',\n          color: 'black',\n          name: 'test stream',\n          data: [TEST_DATA_POINT],\n          resolution: 0,\n          dataType: DataType.NUMBER,\n        },\n      ], size: {\n        height: 500,\n        width: 500,\n      }, viewport: { start: X_MIN, end: X_MAX, yMin: Y_MIN, yMax: Y_MAX } }), h(\"sc-webgl-context\", null)));\n  }\n};\n\nexport { ScWebglChartStandard as sc_webgl_chart_standard };\n"],"names":["DataType","StreamType","TREND_TYPE","ChartType","X_MIN","Date","X_MAX","TEST_DATA_POINT","x","getTime","y","ScWebglChartStandard","hostRef","_classCallCheck","registerInstance","this","_createClass","key","value","h","widgetId","dataStreams","id","color","name","data","resolution","dataType","NUMBER","size","height","width","viewport","start","end","yMin","yMax"],"sourceRoot":""}