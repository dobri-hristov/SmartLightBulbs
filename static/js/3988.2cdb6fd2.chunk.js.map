{"version":3,"file":"static/js/3988.2cdb6fd2.chunk.js","mappings":"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","sources":["../node_modules/@iot-app-kit/components/dist/esm/dataConstants-71f11842.js","../node_modules/@iot-app-kit/components/dist/esm/index-b3f1c3a1.js","../node_modules/@iot-app-kit/components/dist/esm/sc-line-chart-stream-data.entry.js","../node_modules/@iot-app-kit/components/dist/esm/time-b684d8c5.js"],"sourcesContent":["var DataType;\n(function (DataType) {\n    DataType[\"NUMBER\"] = \"NUMBER\";\n    DataType[\"STRING\"] = \"STRING\";\n    DataType[\"BOOLEAN\"] = \"BOOLEAN\";\n})(DataType || (DataType = {}));\n/**\n * Stream type is a classification of a `DataStream`, which contains with it additional structure and features specific\n * to the stream type.\n *\n * For example, for an alarm stream, if a stream is associated to the alarm stream, we interpret the stream as\n * representing the status for the given alarm and present alarm specific UX such as alarm status on the legend and tooltip.\n */\nvar StreamType;\n(function (StreamType) {\n    StreamType[\"ALARM\"] = \"ALARM\";\n    StreamType[\"ANOMALY\"] = \"ANOMALY\";\n    StreamType[\"ALARM_THRESHOLD\"] = \"ALARM_THRESHOLD\";\n})(StreamType || (StreamType = {}));\nvar TREND_TYPE;\n(function (TREND_TYPE) {\n    TREND_TYPE[\"LINEAR\"] = \"linear-regression\";\n})(TREND_TYPE || (TREND_TYPE = {}));\nvar ChartType;\n(function (ChartType) {\n    ChartType[\"BarChart\"] = \"bar-chart\";\n    ChartType[\"LineChart\"] = \"line-chart\";\n})(ChartType || (ChartType = {}));\n\nexport { DataType as D, StreamType as S, TREND_TYPE as T };\n","let durationRE = /(-?(?:\\d+\\.?\\d*|\\d*\\.?\\d+)(?:e[-+]?\\d+)?)\\s*([\\p{L}]*)/uig;\r\n\r\n\r\n/**\r\n * conversion ratios\r\n */\r\n\r\nparse.nanosecond =\r\nparse.ns = 1 / 1e6;\r\n\r\nparse['µs'] =\r\nparse['μs'] =\r\nparse.us =\r\nparse.microsecond = 1 / 1e3;\r\n\r\nparse.millisecond =\r\nparse.ms =\r\nparse[''] = 1;\r\n\r\nparse.second =\r\nparse.sec =\r\nparse.s = parse.ms * 1000;\r\n\r\nparse.minute =\r\nparse.min =\r\nparse.m = parse.s * 60;\r\n\r\nparse.hour =\r\nparse.hr =\r\nparse.h = parse.m * 60;\r\n\r\nparse.day =\r\nparse.d = parse.h * 24;\r\n\r\nparse.week =\r\nparse.wk =\r\nparse.w = parse.d * 7;\r\n\r\nparse.month =\r\nparse.b =\r\nparse.d * (365.25 / 12);\r\n\r\nparse.year =\r\nparse.yr =\r\nparse.y = parse.d * 365.25;\r\n\r\n/**\r\n * convert `str` to ms\r\n *\r\n * @param {String} str\r\n * @param {String} format\r\n * @return {Number}\r\n */\r\n\r\nfunction parse(str='', format='ms'){\r\n  var result = null;\r\n  // ignore commas/placeholders\r\n  str = (str+'').replace(/(\\d)[,_](\\d)/g, '$1$2');\r\n  str.replace(durationRE, function(_, n, units){\r\n    units = unitRatio(units);\r\n    if (units) result = (result || 0) + parseFloat(n, 10) * units;\r\n  });\r\n\r\n  return result && (result / (unitRatio(format) || 1))\r\n}\r\n\r\nfunction unitRatio(str) {\r\n  return parse[str] || parse[str.toLowerCase().replace(/s$/, '')]\r\n}\n\nexport { parse as p };\n","import { r as registerInstance, h } from './index-1cec361c.js';\nimport { S as SECOND_IN_MS } from './time-b684d8c5.js';\nimport { D as DataType } from './dataConstants-71f11842.js';\nimport './index-b3f1c3a1.js';\n\n// viewport boundaries\nconst Y_MIN = 0;\nconst Y_MAX = 5000;\nconst X_MIN = new Date(1998, 0, 0);\nconst X_MAX = new Date(2000, 0, 1);\n// test data point dead center of the viewport\nconst TEST_DATA_POINT = {\n  x: (X_MIN.getTime() + X_MAX.getTime()) / 2,\n  y: (Y_MIN + Y_MAX) / 2,\n};\nconst urlParams = new URLSearchParams(window.location.search);\nconst dataPerRoundParam = urlParams.get('dataPerRound');\nconst roundFrequencyParam = urlParams.get('roundFrequency');\nconst viewportSpeedParam = urlParams.get('viewportSpeed');\nconst DATA_SIZE_BATCH = dataPerRoundParam ? Number.parseInt(dataPerRoundParam, 10) : 1;\nconst DATA_FREQUENCY_MS = roundFrequencyParam ? Number.parseInt(roundFrequencyParam, 10) : SECOND_IN_MS;\nconst VIEWPORT_SPEED = viewportSpeedParam ? Number.parseInt(viewportSpeedParam, 10) : 0;\nconst createData = (point) => new Array(DATA_SIZE_BATCH).fill(0).map((_, i) => ({\n  x: point.x,\n  y: point.y + i,\n}));\nconst ScLineChartStreamData = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.dataPoints = [TEST_DATA_POINT];\n    this.viewport = { start: X_MIN, end: X_MAX, yMin: Y_MIN, yMax: Y_MAX };\n    this.viewportLoop = () => window.requestAnimationFrame(() => {\n      this.viewport = Object.assign(Object.assign({}, this.viewport), { start: new Date(this.viewport.start.getTime() + VIEWPORT_SPEED), end: new Date(this.viewport.end.getTime() + VIEWPORT_SPEED) });\n      this.viewportShifter = this.viewportLoop();\n    });\n  }\n  componentWillLoad() {\n    if (VIEWPORT_SPEED > 0) {\n      this.viewportShifter = this.viewportLoop();\n    }\n    this.dataLoop = window.setInterval(() => {\n      this.dataPoints = [\n        ...this.dataPoints,\n        ...createData({\n          x: (this.dataPoints[this.dataPoints.length - 1].x + X_MAX.getTime()) / 2,\n          y: TEST_DATA_POINT.y,\n        }),\n      ];\n    }, DATA_FREQUENCY_MS);\n  }\n  disconnectedCallback() {\n    clearInterval(this.dataLoop);\n    if (this.viewportShifter != null) {\n      window.cancelAnimationFrame(this.viewportShifter);\n    }\n  }\n  render() {\n    return (h(\"div\", { id: \"chart-container\", style: { border: '1px solid lightgray', height: '500px', width: '500px' } }, h(\"sc-line-chart\", { widgetId: \"widget-id\", dataStreams: [\n        {\n          id: 'test',\n          color: 'black',\n          name: 'test stream',\n          data: this.dataPoints,\n          resolution: 0,\n          dataType: DataType.NUMBER,\n        },\n      ], size: {\n        height: 500,\n        width: 500,\n      }, viewport: this.viewport }), h(\"sc-webgl-context\", null)));\n  }\n};\n\nexport { ScLineChartStreamData as sc_line_chart_stream_data };\n","import { p as parse } from './index-b3f1c3a1.js';\n\nconst SECOND_IN_MS = 1000;\nconst MINUTE_IN_MS = 60 * SECOND_IN_MS;\nconst HOUR_IN_MS = 60 * MINUTE_IN_MS;\nconst DAY_IN_MS = 24 * HOUR_IN_MS;\n// Not precisely accurate, only estimates. exact duration depends on start date. use with care.\nconst MONTH_IN_MS = 30 * DAY_IN_MS;\nconst YEAR_IN_MS = 12 * MONTH_IN_MS;\n/**\n * ConvertMS is a helper function that will take in milliseconds and convert it to the highest detonator\n * and does not return the \"remainder\"\n *\n * It is important to note that the object returning does not represent equivalence!\n *\n * For Example:\n * convert(MINUTE_IN_MS) will return:\n * {\n *   day: 0,\n *   hour: 0\n *   minute: 1,\n *   seconds: 0,\n * }\n *\n * IT DOES NOT RETURN:\n *\n * {\n *   day: 0,\n *   hour: 0,\n *   minute: 1,\n *   seconds: 60, <--- does not return the \"equivalence\"\n * }\n */\nconst convertMS = (milliseconds) => {\n    if (milliseconds < 0) {\n        throw new Error('Time cannot be negative!');\n    }\n    let seconds = Math.floor(milliseconds / 1000);\n    let minute = Math.floor(seconds / 60);\n    let hour = Math.floor(minute / 60);\n    const day = Math.floor(hour / 24);\n    seconds %= 60;\n    minute %= 60;\n    hour %= 24;\n    return {\n        day,\n        hour,\n        minute,\n        seconds,\n    };\n};\nconst displayDate = (date, resolution, { start, end }) => {\n    const viewportDurationMS = end.getTime() - start.getTime();\n    if (resolution < HOUR_IN_MS) {\n        if (viewportDurationMS < MINUTE_IN_MS) {\n            return date.toLocaleString('en-US', {\n                minute: 'numeric',\n                second: 'numeric',\n            });\n        }\n        if (viewportDurationMS <= 10 * MINUTE_IN_MS) {\n            return date.toLocaleString('en-US', {\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n                hour12: true,\n            });\n        }\n        if (viewportDurationMS <= HOUR_IN_MS) {\n            return date.toLocaleString('en-US', {\n                hour: 'numeric',\n                minute: 'numeric',\n                hour12: true,\n            });\n        }\n        if (viewportDurationMS <= DAY_IN_MS) {\n            return date.toLocaleString('en-US', {\n                hour12: true,\n                hour: 'numeric',\n                month: 'numeric',\n                minute: 'numeric',\n                day: 'numeric',\n            });\n        }\n        if (viewportDurationMS <= MONTH_IN_MS) {\n            return date.toLocaleString('en-US', {\n                hour12: true,\n                hour: 'numeric',\n                year: 'numeric',\n                month: 'numeric',\n                day: 'numeric',\n            });\n        }\n        return date.toLocaleString('en-US', {\n            day: 'numeric',\n            month: 'numeric',\n            year: 'numeric',\n        });\n    }\n    if (resolution <= HOUR_IN_MS) {\n        return date.toLocaleString('en-US', {\n            hour: 'numeric',\n            day: 'numeric',\n            month: 'numeric',\n            hour12: true,\n        });\n    }\n    if (resolution < DAY_IN_MS) {\n        return date.toLocaleString('en-US', {\n            day: 'numeric',\n            month: 'numeric',\n        });\n    }\n    return date.toLocaleString('en-US', {\n        year: 'numeric',\n        month: 'numeric',\n        day: 'numeric',\n    });\n};\nconst parseDuration = (duration) => {\n    if (typeof duration === 'number') {\n        return duration;\n    }\n    const parsedTime = parse(duration, 'ms');\n    // if duration is a string but we cannot parse it, we default to 10 mins.\n    return parsedTime != null ? parsedTime : 10 * MINUTE_IN_MS;\n};\n\nexport { DAY_IN_MS as D, HOUR_IN_MS as H, MINUTE_IN_MS as M, SECOND_IN_MS as S, YEAR_IN_MS as Y, MONTH_IN_MS as a, convertMS as c, displayDate as d, parseDuration as p };\n"],"names":["DataType","StreamType","TREND_TYPE","ChartType","durationRE","parse","str","arguments","length","undefined","format","result","replace","_","n","units","unitRatio","parseFloat","toLowerCase","nanosecond","ns","us","microsecond","millisecond","ms","second","sec","s","minute","min","m","hour","hr","h","day","d","week","wk","w","month","b","year","yr","y","X_MIN","Date","X_MAX","TEST_DATA_POINT","x","getTime","urlParams","URLSearchParams","window","location","search","dataPerRoundParam","get","roundFrequencyParam","viewportSpeedParam","DATA_SIZE_BATCH","Number","parseInt","DATA_FREQUENCY_MS","SECOND_IN_MS","VIEWPORT_SPEED","ScLineChartStreamData","hostRef","_this","_classCallCheck","registerInstance","this","dataPoints","viewport","start","end","yMin","yMax","viewportLoop","requestAnimationFrame","Object","assign","viewportShifter","_createClass","key","value","_this2","dataLoop","setInterval","point","concat","_toConsumableArray","Array","fill","map","i","clearInterval","cancelAnimationFrame","id","style","border","height","width","widgetId","dataStreams","color","name","data","resolution","dataType","NUMBER","size","MINUTE_IN_MS","HOUR_IN_MS","DAY_IN_MS","MONTH_IN_MS","YEAR_IN_MS","convertMS","milliseconds","Error","seconds","Math","floor","displayDate","date","_ref","viewportDurationMS","toLocaleString","hour12","parseDuration","duration","parsedTime"],"sourceRoot":""}