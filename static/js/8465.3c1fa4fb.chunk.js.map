{"version":3,"file":"static/js/8465.3c1fa4fb.chunk.js","mappings":"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","sources":["../node_modules/@iot-app-kit/components/dist/esm/dataConstants-71f11842.js","../node_modules/@iot-app-kit/components/dist/esm/index-b3f1c3a1.js","../node_modules/@iot-app-kit/components/dist/esm/status-timeline-dynamic-data.entry.js","../node_modules/@iot-app-kit/components/dist/esm/time-b684d8c5.js"],"sourcesContent":["var DataType;\n(function (DataType) {\n    DataType[\"NUMBER\"] = \"NUMBER\";\n    DataType[\"STRING\"] = \"STRING\";\n    DataType[\"BOOLEAN\"] = \"BOOLEAN\";\n})(DataType || (DataType = {}));\n/**\n * Stream type is a classification of a `DataStream`, which contains with it additional structure and features specific\n * to the stream type.\n *\n * For example, for an alarm stream, if a stream is associated to the alarm stream, we interpret the stream as\n * representing the status for the given alarm and present alarm specific UX such as alarm status on the legend and tooltip.\n */\nvar StreamType;\n(function (StreamType) {\n    StreamType[\"ALARM\"] = \"ALARM\";\n    StreamType[\"ANOMALY\"] = \"ANOMALY\";\n    StreamType[\"ALARM_THRESHOLD\"] = \"ALARM_THRESHOLD\";\n})(StreamType || (StreamType = {}));\nvar TREND_TYPE;\n(function (TREND_TYPE) {\n    TREND_TYPE[\"LINEAR\"] = \"linear-regression\";\n})(TREND_TYPE || (TREND_TYPE = {}));\nvar ChartType;\n(function (ChartType) {\n    ChartType[\"BarChart\"] = \"bar-chart\";\n    ChartType[\"LineChart\"] = \"line-chart\";\n})(ChartType || (ChartType = {}));\n\nexport { DataType as D, StreamType as S, TREND_TYPE as T };\n","let durationRE = /(-?(?:\\d+\\.?\\d*|\\d*\\.?\\d+)(?:e[-+]?\\d+)?)\\s*([\\p{L}]*)/uig;\r\n\r\n\r\n/**\r\n * conversion ratios\r\n */\r\n\r\nparse.nanosecond =\r\nparse.ns = 1 / 1e6;\r\n\r\nparse['µs'] =\r\nparse['μs'] =\r\nparse.us =\r\nparse.microsecond = 1 / 1e3;\r\n\r\nparse.millisecond =\r\nparse.ms =\r\nparse[''] = 1;\r\n\r\nparse.second =\r\nparse.sec =\r\nparse.s = parse.ms * 1000;\r\n\r\nparse.minute =\r\nparse.min =\r\nparse.m = parse.s * 60;\r\n\r\nparse.hour =\r\nparse.hr =\r\nparse.h = parse.m * 60;\r\n\r\nparse.day =\r\nparse.d = parse.h * 24;\r\n\r\nparse.week =\r\nparse.wk =\r\nparse.w = parse.d * 7;\r\n\r\nparse.month =\r\nparse.b =\r\nparse.d * (365.25 / 12);\r\n\r\nparse.year =\r\nparse.yr =\r\nparse.y = parse.d * 365.25;\r\n\r\n/**\r\n * convert `str` to ms\r\n *\r\n * @param {String} str\r\n * @param {String} format\r\n * @return {Number}\r\n */\r\n\r\nfunction parse(str='', format='ms'){\r\n  var result = null;\r\n  // ignore commas/placeholders\r\n  str = (str+'').replace(/(\\d)[,_](\\d)/g, '$1$2');\r\n  str.replace(durationRE, function(_, n, units){\r\n    units = unitRatio(units);\r\n    if (units) result = (result || 0) + parseFloat(n, 10) * units;\r\n  });\r\n\r\n  return result && (result / (unitRatio(format) || 1))\r\n}\r\n\r\nfunction unitRatio(str) {\r\n  return parse[str] || parse[str.toLowerCase().replace(/s$/, '')]\r\n}\n\nexport { parse as p };\n","import { r as registerInstance, h } from './index-1cec361c.js';\nimport { a as MONTH_IN_MS } from './time-b684d8c5.js';\nimport { D as DataType } from './dataConstants-71f11842.js';\nimport './index-b3f1c3a1.js';\n\n// viewport boundaries\nconst Y_MIN = 0;\nconst Y_MAX = 5000;\nconst X_MIN = new Date(2000, 0);\nconst X_MAX = new Date(2001, 12);\nconst StatusTimelineDynamicData = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.data = [];\n    this.monthIndex = 1;\n    this.addDataPoint = () => {\n      const dataPoint = {\n        x: new Date(2000, this.monthIndex).getTime(),\n        y: 3000,\n      };\n      this.data = [dataPoint, ...this.data];\n      this.monthIndex += 2;\n    };\n    this.removeDataPoint = () => {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const [_firstPoint, ...rest] = this.data;\n      this.data = rest;\n    };\n  }\n  render() {\n    return (h(\"div\", { class: \"synchro-chart-tests\" }, h(\"button\", { id: \"add-data-point\", onClick: this.addDataPoint }, \"Add Data Point\"), h(\"button\", { id: \"remove-data-point\", onClick: this.removeDataPoint }, \"Remove Data Point\"), h(\"br\", null), h(\"br\", null), h(\"div\", { id: \"chart-container\", style: { height: '500px', width: '500px' } }, h(\"sc-status-timeline\", { alarms: { expires: MONTH_IN_MS }, dataStreams: [\n        {\n          id: 'test',\n          name: 'test stream',\n          color: 'red',\n          aggregates: { [MONTH_IN_MS]: this.data },\n          data: [],\n          resolution: MONTH_IN_MS,\n          dataType: DataType.NUMBER,\n        },\n      ], size: {\n        width: 500,\n        height: 500,\n      }, widgetId: \"widget-id\", viewport: {\n        yMin: Y_MIN,\n        yMax: Y_MAX,\n        start: X_MIN,\n        end: X_MAX,\n      } }), h(\"sc-webgl-context\", null))));\n  }\n};\n\nexport { StatusTimelineDynamicData as status_timeline_dynamic_data };\n","import { p as parse } from './index-b3f1c3a1.js';\n\nconst SECOND_IN_MS = 1000;\nconst MINUTE_IN_MS = 60 * SECOND_IN_MS;\nconst HOUR_IN_MS = 60 * MINUTE_IN_MS;\nconst DAY_IN_MS = 24 * HOUR_IN_MS;\n// Not precisely accurate, only estimates. exact duration depends on start date. use with care.\nconst MONTH_IN_MS = 30 * DAY_IN_MS;\nconst YEAR_IN_MS = 12 * MONTH_IN_MS;\n/**\n * ConvertMS is a helper function that will take in milliseconds and convert it to the highest detonator\n * and does not return the \"remainder\"\n *\n * It is important to note that the object returning does not represent equivalence!\n *\n * For Example:\n * convert(MINUTE_IN_MS) will return:\n * {\n *   day: 0,\n *   hour: 0\n *   minute: 1,\n *   seconds: 0,\n * }\n *\n * IT DOES NOT RETURN:\n *\n * {\n *   day: 0,\n *   hour: 0,\n *   minute: 1,\n *   seconds: 60, <--- does not return the \"equivalence\"\n * }\n */\nconst convertMS = (milliseconds) => {\n    if (milliseconds < 0) {\n        throw new Error('Time cannot be negative!');\n    }\n    let seconds = Math.floor(milliseconds / 1000);\n    let minute = Math.floor(seconds / 60);\n    let hour = Math.floor(minute / 60);\n    const day = Math.floor(hour / 24);\n    seconds %= 60;\n    minute %= 60;\n    hour %= 24;\n    return {\n        day,\n        hour,\n        minute,\n        seconds,\n    };\n};\nconst displayDate = (date, resolution, { start, end }) => {\n    const viewportDurationMS = end.getTime() - start.getTime();\n    if (resolution < HOUR_IN_MS) {\n        if (viewportDurationMS < MINUTE_IN_MS) {\n            return date.toLocaleString('en-US', {\n                minute: 'numeric',\n                second: 'numeric',\n            });\n        }\n        if (viewportDurationMS <= 10 * MINUTE_IN_MS) {\n            return date.toLocaleString('en-US', {\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n                hour12: true,\n            });\n        }\n        if (viewportDurationMS <= HOUR_IN_MS) {\n            return date.toLocaleString('en-US', {\n                hour: 'numeric',\n                minute: 'numeric',\n                hour12: true,\n            });\n        }\n        if (viewportDurationMS <= DAY_IN_MS) {\n            return date.toLocaleString('en-US', {\n                hour12: true,\n                hour: 'numeric',\n                month: 'numeric',\n                minute: 'numeric',\n                day: 'numeric',\n            });\n        }\n        if (viewportDurationMS <= MONTH_IN_MS) {\n            return date.toLocaleString('en-US', {\n                hour12: true,\n                hour: 'numeric',\n                year: 'numeric',\n                month: 'numeric',\n                day: 'numeric',\n            });\n        }\n        return date.toLocaleString('en-US', {\n            day: 'numeric',\n            month: 'numeric',\n            year: 'numeric',\n        });\n    }\n    if (resolution <= HOUR_IN_MS) {\n        return date.toLocaleString('en-US', {\n            hour: 'numeric',\n            day: 'numeric',\n            month: 'numeric',\n            hour12: true,\n        });\n    }\n    if (resolution < DAY_IN_MS) {\n        return date.toLocaleString('en-US', {\n            day: 'numeric',\n            month: 'numeric',\n        });\n    }\n    return date.toLocaleString('en-US', {\n        year: 'numeric',\n        month: 'numeric',\n        day: 'numeric',\n    });\n};\nconst parseDuration = (duration) => {\n    if (typeof duration === 'number') {\n        return duration;\n    }\n    const parsedTime = parse(duration, 'ms');\n    // if duration is a string but we cannot parse it, we default to 10 mins.\n    return parsedTime != null ? parsedTime : 10 * MINUTE_IN_MS;\n};\n\nexport { DAY_IN_MS as D, HOUR_IN_MS as H, MINUTE_IN_MS as M, SECOND_IN_MS as S, YEAR_IN_MS as Y, MONTH_IN_MS as a, convertMS as c, displayDate as d, parseDuration as p };\n"],"names":["DataType","StreamType","TREND_TYPE","ChartType","durationRE","parse","str","arguments","length","undefined","format","result","replace","_","n","units","unitRatio","parseFloat","toLowerCase","nanosecond","ns","us","microsecond","millisecond","ms","second","sec","s","minute","min","m","hour","hr","h","day","d","week","wk","w","month","b","year","yr","y","X_MIN","Date","X_MAX","StatusTimelineDynamicData","hostRef","_this","_classCallCheck","registerInstance","this","data","monthIndex","addDataPoint","dataPoint","x","getTime","concat","_toConsumableArray","removeDataPoint","_this$data","_toArray","rest","slice","_createClass","key","value","class","id","onClick","style","height","width","alarms","expires","MONTH_IN_MS","dataStreams","name","color","aggregates","_defineProperty","resolution","dataType","NUMBER","size","widgetId","viewport","yMin","yMax","start","end","SECOND_IN_MS","MINUTE_IN_MS","HOUR_IN_MS","DAY_IN_MS","YEAR_IN_MS","convertMS","milliseconds","Error","seconds","Math","floor","displayDate","date","_ref","viewportDurationMS","toLocaleString","hour12","parseDuration","duration","parsedTime"],"sourceRoot":""}