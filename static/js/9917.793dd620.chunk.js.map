{"version":3,"file":"static/js/9917.793dd620.chunk.js","mappings":"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","sources":["../node_modules/@iot-app-kit/components/dist/esm/Value-47ec6a7b.js","../node_modules/@iot-app-kit/components/dist/esm/breachedThreshold-ec78e357.js","../node_modules/@iot-app-kit/components/dist/esm/common-a2d0f0fb.js","../node_modules/@iot-app-kit/components/dist/esm/helper-534fd488.js","../node_modules/@iot-app-kit/components/dist/esm/terms-7b76cdf8.js"],"sourcesContent":["import { h } from './index-1cec361c.js';\nimport { r as round } from './number-3e8376bf.js';\nimport { N as NO_VALUE_PRESENT } from './terms-7b76cdf8.js';\n\n/**\n * Display value of a data point, supports all data types\n */\nconst Value = ({ isEnabled = true, value, unit }) => {\n    if (!isEnabled || value == null) {\n        return h(\"span\", { \"data-testid\": \"no-value-present\" }, NO_VALUE_PRESENT);\n    }\n    if (typeof value === 'number') {\n        /** Display Number */\n        return [round(value), unit && h(\"span\", { class: \"unit\" },\n                \" \",\n                unit)];\n    }\n    /** Display String or Booleans */\n    return [String(value), unit && h(\"span\", { class: \"unit\" },\n            \" \",\n            unit)];\n};\n\nexport { Value as V };\n","import { g as getBreachedThreshold } from './utils-0919edc8.js';\nimport { c as isDefined } from './predicates-248e16b2.js';\nimport { p as pointBisector, g as getDataBeforeDate } from './dataFilters-fa384f64.js';\nimport { g as getDataPoints } from './getDataPoints-c53771e0.js';\nimport { D as DATA_ALIGNMENT } from './constants-9d5458e0.js';\nimport { S as StreamType } from './dataConstants-71f11842.js';\n\n/**\n * Sorts points in order of their points values.\n * Places objects with no point at the end of the list.\n */\nconst sortTooltipPoints = (attr) => (a, b) => {\n    if (a.point == null && b.point == null) {\n        return 0;\n    }\n    if (a.point == null) {\n        return -1;\n    }\n    if (b.point == null) {\n        return 1;\n    }\n    if (attr(a.point) === attr(b.point)) {\n        return 0;\n    }\n    return attr(b.point) > attr(a.point) ? 1 : -1;\n};\n\n/**\n * Closest Points\n *\n * Returns the closest point to the left, and right of a\n * given point in time..\n *\n * @param maxDistance - maximum distance, measured in terms of milliseconds. if not present, there is no max distance.\n */\nconst closestPoint = (dataPoints, date, dataAlignment, maxDistance) => {\n    const idx = pointBisector.left(dataPoints, date);\n    const leftPoint = dataPoints[idx - 1];\n    const rightPoint = dataPoints[idx];\n    /**\n     * If a point falls on our point of time, return it immediately regardless of 'data alignment'.\n     */\n    if (leftPoint && leftPoint.x === date.getTime()) {\n        return leftPoint;\n    }\n    if (rightPoint && rightPoint.x === date.getTime()) {\n        return rightPoint;\n    }\n    /** Right Alignment */\n    if (dataAlignment === DATA_ALIGNMENT.RIGHT) {\n        if (!rightPoint) {\n            return undefined;\n        }\n        if (maxDistance == null) {\n            return rightPoint;\n        }\n        return rightPoint.x - date.getTime() <= maxDistance ? rightPoint : undefined;\n    }\n    /** Left Alignment */\n    if (dataAlignment === DATA_ALIGNMENT.LEFT) {\n        if (!leftPoint) {\n            return undefined;\n        }\n        if (maxDistance == null) {\n            return leftPoint;\n        }\n        return date.getTime() - leftPoint.x <= maxDistance ? leftPoint : undefined;\n    }\n    /** Either Alignment */\n    // If only the left, or only the right point exist, go ahead and just return it.\n    if (!leftPoint || !rightPoint) {\n        return leftPoint || rightPoint;\n    }\n    // We are right bias because the interval between two points is the time span for the point on the right.\n    return rightPoint;\n};\n/**\n * Get Active Points\n *\n * Returns at most one point per data stream - for each data stream, it finds the point which is\n * 1. within the given view port\n * 2. closest to the provided `selectedDate`\n *\n * Additionally, if `allowMultipleDates` is false, it will only return the points which are the closest\n * to the `selectedDate`. i.e. if you have 10 points that are all equally distant from the `selectedDate`,\n * all 10 are returned.\n *\n * However if you have 10 points of different dates, only the closest point would be returned.\n */\nconst activePoints = ({ viewport, dataStreams, selectedDate, allowMultipleDates, dataAlignment, maxDurationFromDate, }) => {\n    const dataStreamUtilizedData = dataStreams.map(stream => ({\n        streamId: stream.id,\n        dataPoints: getDataBeforeDate(getDataPoints(stream, stream.resolution), viewport.end),\n    }));\n    const selectedTimestamp = selectedDate.getTime();\n    // Find the closest point to the selected date for each stream\n    const points = dataStreamUtilizedData.map(({ streamId, dataPoints }) => ({\n        streamId,\n        point: closestPoint(dataPoints, selectedDate, dataAlignment, maxDurationFromDate),\n    }));\n    if (allowMultipleDates) {\n        return points;\n    }\n    const distanceFromDate = (p) => Math.abs(p.x - selectedTimestamp);\n    // Sort in ascending order by there distance from the selected date\n    const sortedPoints = points.sort(sortTooltipPoints(distanceFromDate));\n    if (sortedPoints.length === 0) {\n        return [];\n    }\n    const topPoint = sortedPoints[sortedPoints.length - 1].point;\n    if (topPoint == null) {\n        // everything must be a 'blank' point\n        return sortedPoints;\n    }\n    // Filter such that only the points with a date equal to the date of the point which is closest to the selected date.\n    return sortedPoints.filter(p => p.point && p.point.x === topPoint.x);\n};\n\nconst isHigherPriority = (t1, t2) => {\n    if (t1 == null) {\n        return t2;\n    }\n    if (t1.severity == null && t2.severity == null) {\n        return t1;\n    }\n    if (t1.severity == null) {\n        return t2;\n    }\n    if (t2.severity == null) {\n        return t1;\n    }\n    return t1.severity <= t2.severity ? t1 : t2;\n};\n/**\n * Returns the most important threshold.\n *\n * The most important threshold is the visual which is most important to a user\n * This is determined via the `severity`. Lower severity means highest importance.\n *\n * If no thresholds are present with `severity`, the first threshold is returned.\n */\nconst highestPriorityThreshold = (thresholds) => {\n    return thresholds.reduce(isHigherPriority, undefined);\n};\n/**\n * returns whether the given threshold can be applied to the requested data stream.\n *\n * EXPOSED FOR TESTING\n */\nconst thresholdAppliesToDataStream = (threshold, dataStreamId) => {\n    const { dataStreamIds } = threshold;\n    if (dataStreamIds == null) {\n        return true;\n    }\n    return dataStreamIds.includes(dataStreamId);\n};\n/**\n * Returns all of the breached thresholds for any of the alarms associated with the requested data stream.\n *\n * Does NOT return them in any sort of priority order.\n *\n * EXPOSED FOR TESTING\n */\nconst breachedAlarmThresholds = ({ date, dataStream, dataStreams, thresholds, }) => {\n    const alarmStreamIds = dataStream.associatedStreams != null\n        ? dataStream.associatedStreams.filter(({ type }) => type === StreamType.ALARM).map(({ id }) => id)\n        : [];\n    const isAssociatedAlarm = (stream) => alarmStreamIds.includes(stream.id);\n    const alarmStreams = dataStreams.filter(isAssociatedAlarm);\n    // thresholds considered breech, across all alarms for the requested data stream\n    const allBreachedAlarmThresholds = alarmStreams\n        .map(stream => {\n        const alarmThresholds = thresholds.filter(threshold => thresholdAppliesToDataStream(threshold, stream.id));\n        const latestAlarmValue = closestPoint(stream.data, date, DATA_ALIGNMENT.LEFT);\n        return latestAlarmValue != null ? getBreachedThreshold(latestAlarmValue.y, alarmThresholds) : undefined;\n    })\n        .filter(isDefined);\n    return allBreachedAlarmThresholds;\n};\n/**\n * Get the highest priority breached threshold.\n *\n * NOTE: If you do not want to get alarm thresholds, simply pass in an empty array for the `dataStreams`.\n */\nconst breachedThreshold = ({ value, date, thresholds, dataStreams, dataStream, }) => {\n    const applicableThresholds = thresholds.filter(threshold => thresholdAppliesToDataStream(threshold, dataStream.id));\n    const dataThreshold = value != null ? getBreachedThreshold(value, applicableThresholds) : undefined;\n    const alarmThresholds = breachedAlarmThresholds({\n        date,\n        dataStream,\n        dataStreams,\n        thresholds,\n    });\n    return highestPriorityThreshold([dataThreshold, ...alarmThresholds].filter(isDefined));\n};\n\nexport { activePoints as a, breachedThreshold as b, closestPoint as c, sortTooltipPoints as s };\n","/**\n * Line Chart Settings\n */\nconst STROKE_WIDTH = 1.5;\nconst getDataStreamForEventing = (dataStreams) => dataStreams.map(dataStream => ({\n    id: dataStream.id,\n    name: dataStream.name,\n    detailedName: dataStream.detailedName,\n    color: dataStream.color,\n    unit: dataStream.unit,\n    dataType: dataStream.dataType,\n    streamType: dataStream.streamType,\n    associatedStreams: dataStream.associatedStreams,\n    isLoading: dataStream.isLoading,\n    isRefreshing: dataStream.isRefreshing,\n    error: dataStream.error,\n    resolution: dataStream.resolution,\n}));\n\nexport { STROKE_WIDTH as S, getDataStreamForEventing as g };\n","import { c as createCommonjsModule, a as getDefaultExportFromCjs } from './_commonjsHelpers-f9dc4873.js';\nimport { c as convertMS } from './time-b684d8c5.js';\n\nvar immutabilityHelper = createCommonjsModule(function (module, exports) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction stringifiable(obj) {\n    // Safely stringify Object.create(null)\n    /* istanbul ignore next */\n    return typeof obj === 'object' && !('toString' in obj) ?\n        Object.prototype.toString.call(obj).slice(8, -1) :\n        obj;\n}\nvar isProduction = typeof process === 'object' && \"production\" === 'production';\nfunction invariant(condition, message) {\n    if (!condition) {\n        /* istanbul ignore next */\n        if (isProduction) {\n            throw new Error('Invariant failed');\n        }\n        throw new Error(message());\n    }\n}\nexports.invariant = invariant;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar splice = Array.prototype.splice;\nvar toString = Object.prototype.toString;\nfunction type(obj) {\n    return toString.call(obj).slice(8, -1);\n}\nvar assign = Object.assign || /* istanbul ignore next */ (function (target, source) {\n    getAllKeys(source).forEach(function (key) {\n        if (hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n        }\n    });\n    return target;\n});\nvar getAllKeys = typeof Object.getOwnPropertySymbols === 'function'\n    ? function (obj) { return Object.keys(obj).concat(Object.getOwnPropertySymbols(obj)); }\n    /* istanbul ignore next */\n    : function (obj) { return Object.keys(obj); };\nfunction copy(object) {\n    return Array.isArray(object)\n        ? assign(object.constructor(object.length), object)\n        : (type(object) === 'Map')\n            ? new Map(object)\n            : (type(object) === 'Set')\n                ? new Set(object)\n                : (object && typeof object === 'object')\n                    ? assign(Object.create(Object.getPrototypeOf(object)), object)\n                    /* istanbul ignore next */\n                    : object;\n}\nvar Context = /** @class */ (function () {\n    function Context() {\n        this.commands = assign({}, defaultCommands);\n        this.update = this.update.bind(this);\n        // Deprecated: update.extend, update.isEquals and update.newContext\n        this.update.extend = this.extend = this.extend.bind(this);\n        this.update.isEquals = function (x, y) { return x === y; };\n        this.update.newContext = function () { return new Context().update; };\n    }\n    Object.defineProperty(Context.prototype, \"isEquals\", {\n        get: function () {\n            return this.update.isEquals;\n        },\n        set: function (value) {\n            this.update.isEquals = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Context.prototype.extend = function (directive, fn) {\n        this.commands[directive] = fn;\n    };\n    Context.prototype.update = function (object, $spec) {\n        var _this = this;\n        var spec = (typeof $spec === 'function') ? { $apply: $spec } : $spec;\n        if (!(Array.isArray(object) && Array.isArray(spec))) {\n            invariant(!Array.isArray(spec), function () { return \"update(): You provided an invalid spec to update(). The spec may \" +\n                \"not contain an array except as the value of $set, $push, $unshift, \" +\n                \"$splice or any custom command allowing an array value.\"; });\n        }\n        invariant(typeof spec === 'object' && spec !== null, function () { return \"update(): You provided an invalid spec to update(). The spec and \" +\n            \"every included key path must be plain objects containing one of the \" +\n            (\"following commands: \" + Object.keys(_this.commands).join(', ') + \".\"); });\n        var nextObject = object;\n        getAllKeys(spec).forEach(function (key) {\n            if (hasOwnProperty.call(_this.commands, key)) {\n                var objectWasNextObject = object === nextObject;\n                nextObject = _this.commands[key](spec[key], nextObject, spec, object);\n                if (objectWasNextObject && _this.isEquals(nextObject, object)) {\n                    nextObject = object;\n                }\n            }\n            else {\n                var nextValueForKey = type(object) === 'Map'\n                    ? _this.update(object.get(key), spec[key])\n                    : _this.update(object[key], spec[key]);\n                var nextObjectValue = type(nextObject) === 'Map'\n                    ? nextObject.get(key)\n                    : nextObject[key];\n                if (!_this.isEquals(nextValueForKey, nextObjectValue)\n                    || typeof nextValueForKey === 'undefined'\n                        && !hasOwnProperty.call(object, key)) {\n                    if (nextObject === object) {\n                        nextObject = copy(object);\n                    }\n                    if (type(nextObject) === 'Map') {\n                        nextObject.set(key, nextValueForKey);\n                    }\n                    else {\n                        nextObject[key] = nextValueForKey;\n                    }\n                }\n            }\n        });\n        return nextObject;\n    };\n    return Context;\n}());\nexports.Context = Context;\nvar defaultCommands = {\n    $push: function (value, nextObject, spec) {\n        invariantPushAndUnshift(nextObject, spec, '$push');\n        return value.length ? nextObject.concat(value) : nextObject;\n    },\n    $unshift: function (value, nextObject, spec) {\n        invariantPushAndUnshift(nextObject, spec, '$unshift');\n        return value.length ? value.concat(nextObject) : nextObject;\n    },\n    $splice: function (value, nextObject, spec, originalObject) {\n        invariantSplices(nextObject, spec);\n        value.forEach(function (args) {\n            invariantSplice(args);\n            if (nextObject === originalObject && args.length) {\n                nextObject = copy(originalObject);\n            }\n            splice.apply(nextObject, args);\n        });\n        return nextObject;\n    },\n    $set: function (value, _nextObject, spec) {\n        invariantSet(spec);\n        return value;\n    },\n    $toggle: function (targets, nextObject) {\n        invariantSpecArray(targets, '$toggle');\n        var nextObjectCopy = targets.length ? copy(nextObject) : nextObject;\n        targets.forEach(function (target) {\n            nextObjectCopy[target] = !nextObject[target];\n        });\n        return nextObjectCopy;\n    },\n    $unset: function (value, nextObject, _spec, originalObject) {\n        invariantSpecArray(value, '$unset');\n        value.forEach(function (key) {\n            if (Object.hasOwnProperty.call(nextObject, key)) {\n                if (nextObject === originalObject) {\n                    nextObject = copy(originalObject);\n                }\n                delete nextObject[key];\n            }\n        });\n        return nextObject;\n    },\n    $add: function (values, nextObject, _spec, originalObject) {\n        invariantMapOrSet(nextObject, '$add');\n        invariantSpecArray(values, '$add');\n        if (type(nextObject) === 'Map') {\n            values.forEach(function (_a) {\n                var key = _a[0], value = _a[1];\n                if (nextObject === originalObject && nextObject.get(key) !== value) {\n                    nextObject = copy(originalObject);\n                }\n                nextObject.set(key, value);\n            });\n        }\n        else {\n            values.forEach(function (value) {\n                if (nextObject === originalObject && !nextObject.has(value)) {\n                    nextObject = copy(originalObject);\n                }\n                nextObject.add(value);\n            });\n        }\n        return nextObject;\n    },\n    $remove: function (value, nextObject, _spec, originalObject) {\n        invariantMapOrSet(nextObject, '$remove');\n        invariantSpecArray(value, '$remove');\n        value.forEach(function (key) {\n            if (nextObject === originalObject && nextObject.has(key)) {\n                nextObject = copy(originalObject);\n            }\n            nextObject.delete(key);\n        });\n        return nextObject;\n    },\n    $merge: function (value, nextObject, _spec, originalObject) {\n        invariantMerge(nextObject, value);\n        getAllKeys(value).forEach(function (key) {\n            if (value[key] !== nextObject[key]) {\n                if (nextObject === originalObject) {\n                    nextObject = copy(originalObject);\n                }\n                nextObject[key] = value[key];\n            }\n        });\n        return nextObject;\n    },\n    $apply: function (value, original) {\n        invariantApply(value);\n        return value(original);\n    },\n};\nvar defaultContext = new Context();\nexports.isEquals = defaultContext.update.isEquals;\nexports.extend = defaultContext.extend;\nexports.default = defaultContext.update;\n// @ts-ignore\nexports.default.default = module.exports = assign(exports.default, exports);\n// invariants\nfunction invariantPushAndUnshift(value, spec, command) {\n    invariant(Array.isArray(value), function () { return \"update(): expected target of \" + stringifiable(command) + \" to be an array; got \" + stringifiable(value) + \".\"; });\n    invariantSpecArray(spec[command], command);\n}\nfunction invariantSpecArray(spec, command) {\n    invariant(Array.isArray(spec), function () { return \"update(): expected spec of \" + stringifiable(command) + \" to be an array; got \" + stringifiable(spec) + \". \" +\n        \"Did you forget to wrap your parameter in an array?\"; });\n}\nfunction invariantSplices(value, spec) {\n    invariant(Array.isArray(value), function () { return \"Expected $splice target to be an array; got \" + stringifiable(value); });\n    invariantSplice(spec.$splice);\n}\nfunction invariantSplice(value) {\n    invariant(Array.isArray(value), function () { return \"update(): expected spec of $splice to be an array of arrays; got \" + stringifiable(value) + \". \" +\n        \"Did you forget to wrap your parameters in an array?\"; });\n}\nfunction invariantApply(fn) {\n    invariant(typeof fn === 'function', function () { return \"update(): expected spec of $apply to be a function; got \" + stringifiable(fn) + \".\"; });\n}\nfunction invariantSet(spec) {\n    invariant(Object.keys(spec).length === 1, function () { return \"Cannot have more than one key in an object with $set\"; });\n}\nfunction invariantMerge(target, specValue) {\n    invariant(specValue && typeof specValue === 'object', function () { return \"update(): $merge expects a spec of type 'object'; got \" + stringifiable(specValue); });\n    invariant(target && typeof target === 'object', function () { return \"update(): $merge expects a target of type 'object'; got \" + stringifiable(target); });\n}\nfunction invariantMapOrSet(target, command) {\n    var typeOfTarget = type(target);\n    invariant(typeOfTarget === 'Map' || typeOfTarget === 'Set', function () { return \"update(): \" + stringifiable(command) + \" expects a target of type Set or Map; got \" + stringifiable(typeOfTarget); });\n}\n});\n\nconst update = /*@__PURE__*/getDefaultExportFromCjs(immutabilityHelper);\n\nconst getAggregationFrequency = (dataResolution, aggregatedLevel) => {\n    if (dataResolution === 0) {\n        return 'raw data';\n    }\n    const { day, hour, minute, seconds } = convertMS(dataResolution);\n    const getPlural = (input) => (input > 1 ? 's' : '');\n    if (day !== 0) {\n        return `${day} day${getPlural(day)} ${aggregatedLevel}`;\n    }\n    if (hour !== 0) {\n        return `${hour} hour${getPlural(hour)} ${aggregatedLevel}`;\n    }\n    if (minute !== 0) {\n        return `${minute} minute${getPlural(minute)} ${aggregatedLevel}`;\n    }\n    if (seconds !== 0) {\n        return `${seconds} second${getPlural(seconds)} ${aggregatedLevel}`;\n    }\n    return 'N/A';\n};\n/**\n * Updates the `NameValue` it exists, otherwise creates a new `NameValue`.\n */\nconst updateName = (names, name, id) => {\n    const index = names.findIndex(o => o.id === id);\n    if (index >= 0) {\n        return update(names, { [index]: { $set: { id, name } } });\n    }\n    return [\n        ...names,\n        {\n            name,\n            id,\n        },\n    ];\n};\n\nexport { getAggregationFrequency as g, updateName as u };\n","// For use when there is a data stream, but there is no value contained within the time frame being viewed.\nconst NO_VALUE_PRESENT = '-';\n/**\n * default messages, can be overridden via `MessageOverrides` API.\n */\n/* default 'no data streams' empty state messaging */\nconst NO_DATA_STREAMS_PRESENT_HEADER = 'No properties or alarms';\nconst NO_DATA_STREAMS_PRESENT_SUB_HEADER = \"This widget doesn't have any properties or alarms.\";\n/* default 'no data' empty state messaging */\nconst NO_DATA_PRESENT_HEADER = 'No data';\nconst NO_DATA_PRESENT_SUB_HEADER = \"There's no data to display for this time range.\";\n\nexport { NO_VALUE_PRESENT as N, NO_DATA_PRESENT_HEADER as a, NO_DATA_PRESENT_SUB_HEADER as b, NO_DATA_STREAMS_PRESENT_HEADER as c, NO_DATA_STREAMS_PRESENT_SUB_HEADER as d };\n"],"names":["Value","_ref","_ref$isEnabled","isEnabled","value","unit","round","h","class","String","NO_VALUE_PRESENT","sortTooltipPoints","attr","a","b","point","closestPoint","dataPoints","date","dataAlignment","maxDistance","idx","pointBisector","left","leftPoint","rightPoint","x","getTime","DATA_ALIGNMENT","RIGHT","undefined","LEFT","activePoints","viewport","dataStreams","selectedDate","allowMultipleDates","maxDurationFromDate","dataStreamUtilizedData","map","stream","streamId","id","getDataBeforeDate","getDataPoints","resolution","end","selectedTimestamp","points","_ref2","sortedPoints","sort","p","Math","abs","length","topPoint","filter","isHigherPriority","t1","t2","severity","thresholdAppliesToDataStream","threshold","dataStreamId","dataStreamIds","includes","breachedThreshold","_ref6","thresholds","dataStream","applicableThresholds","dataThreshold","getBreachedThreshold","alarmThresholds","_ref3","alarmStreamIds","associatedStreams","_ref4","type","StreamType","ALARM","_ref5","latestAlarmValue","data","y","isDefined","breachedAlarmThresholds","reduce","highestPriorityThreshold","concat","_toConsumableArray","STROKE_WIDTH","getDataStreamForEventing","name","detailedName","color","dataType","streamType","isLoading","isRefreshing","error","immutabilityHelper","createCommonjsModule","module","exports","stringifiable","obj","Object","prototype","toString","call","slice","defineProperty","isProduction","process","invariant","condition","message","Error","hasOwnProperty","splice","Array","assign","target","source","getAllKeys","forEach","key","getOwnPropertySymbols","keys","copy","object","isArray","constructor","Map","Set","create","getPrototypeOf","Context","this","commands","defaultCommands","update","bind","extend","isEquals","newContext","get","set","enumerable","configurable","directive","fn","$spec","_this","spec","$apply","join","nextObject","objectWasNextObject","nextValueForKey","nextObjectValue","$push","invariantPushAndUnshift","$unshift","$splice","originalObject","invariantSplice","invariantSplices","args","apply","$set","_nextObject","invariantSet","$toggle","targets","invariantSpecArray","nextObjectCopy","$unset","_spec","$add","values","invariantMapOrSet","_a","has","add","$remove","delete","$merge","specValue","original","defaultContext","command","typeOfTarget","default","getDefaultExportFromCjs","getAggregationFrequency","dataResolution","aggregatedLevel","_convertMS","convertMS","day","hour","minute","seconds","getPlural","input","updateName","names","index","findIndex","o","_defineProperty","NO_DATA_STREAMS_PRESENT_HEADER","NO_DATA_STREAMS_PRESENT_SUB_HEADER","NO_DATA_PRESENT_HEADER","NO_DATA_PRESENT_SUB_HEADER"],"sourceRoot":""}