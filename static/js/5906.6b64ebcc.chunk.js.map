{"version":3,"file":"static/js/5906.6b64ebcc.chunk.js","mappings":"4HAAA,IAAIA,EAaAC,EAMAC,EAIAC,E,8EAtBJ,SAAWH,GACPA,EAAiB,OAAI,SACrBA,EAAiB,OAAI,SACrBA,EAAkB,QAAI,SACzB,CAJD,CAIGA,IAAaA,EAAW,CAAC,IAS5B,SAAWC,GACPA,EAAkB,MAAI,QACtBA,EAAoB,QAAI,UACxBA,EAA4B,gBAAI,iBACnC,CAJD,CAIGA,IAAeA,EAAa,CAAC,IAEhC,SAAWC,GACPA,EAAmB,OAAI,mBAC1B,CAFD,CAEGA,IAAeA,EAAa,CAAC,IAEhC,SAAWC,GACPA,EAAoB,SAAI,YACxBA,EAAqB,UAAI,YAC5B,CAHD,CAGGA,IAAcA,EAAY,CAAC,G,sICxBxBC,EAAW,CACfC,KAAM,EACNC,KAAM,IACNC,MAAO,IAAIC,KAAK,IAAM,EAAG,GACzBC,IAAK,IAAID,KAAK,KAAM,EAAG,IAGnBE,EAAkB,CACtBC,EAAG,IAAIH,MAAMJ,EAASG,MAAMK,UAAYR,EAASK,IAAIG,WAAa,GAAGA,UACrEC,GAAIT,EAASC,KAAOD,EAASE,MAAQ,GAEjCQ,EAAyB,WAC7B,SAAAA,EAAYC,IAASC,EAAAA,EAAAA,GAAA,KAAAF,IACnBG,EAAAA,EAAAA,GAAiBC,KAAMH,EACzB,CAeC,OAfAI,EAAAA,EAAAA,GAAAL,EAAA,EAAAM,IAAA,SAAAC,MACD,WACE,OAAQC,EAAAA,EAAAA,GAAE,MAAO,MAAMA,EAAAA,EAAAA,GAAE,gBAAiB,CAAEC,YAAa,CACrD,CACEC,GAAI,OACJC,MAAO,QACPC,KAAM,cACNC,KAAM,CAACjB,GACPkB,WAAY,EACZC,SAAU7B,EAAAA,EAAS8B,SAEpBC,SAAU,YAAaC,KAAM,CAC9BC,OAAQ,IACRC,MAAO,KACNC,SAAU/B,KAAakB,EAAAA,EAAAA,GAAE,mBAAoB,MACpD,KAACR,CAAA,CAlB4B,E","sources":["../node_modules/@iot-app-kit/components/dist/esm/dataConstants-71f11842.js","../node_modules/@iot-app-kit/components/dist/esm/sc-webgl-chart-large-viewport.entry.js"],"sourcesContent":["var DataType;\n(function (DataType) {\n    DataType[\"NUMBER\"] = \"NUMBER\";\n    DataType[\"STRING\"] = \"STRING\";\n    DataType[\"BOOLEAN\"] = \"BOOLEAN\";\n})(DataType || (DataType = {}));\n/**\n * Stream type is a classification of a `DataStream`, which contains with it additional structure and features specific\n * to the stream type.\n *\n * For example, for an alarm stream, if a stream is associated to the alarm stream, we interpret the stream as\n * representing the status for the given alarm and present alarm specific UX such as alarm status on the legend and tooltip.\n */\nvar StreamType;\n(function (StreamType) {\n    StreamType[\"ALARM\"] = \"ALARM\";\n    StreamType[\"ANOMALY\"] = \"ANOMALY\";\n    StreamType[\"ALARM_THRESHOLD\"] = \"ALARM_THRESHOLD\";\n})(StreamType || (StreamType = {}));\nvar TREND_TYPE;\n(function (TREND_TYPE) {\n    TREND_TYPE[\"LINEAR\"] = \"linear-regression\";\n})(TREND_TYPE || (TREND_TYPE = {}));\nvar ChartType;\n(function (ChartType) {\n    ChartType[\"BarChart\"] = \"bar-chart\";\n    ChartType[\"LineChart\"] = \"line-chart\";\n})(ChartType || (ChartType = {}));\n\nexport { DataType as D, StreamType as S, TREND_TYPE as T };\n","import { r as registerInstance, h } from './index-1cec361c.js';\nimport { D as DataType } from './dataConstants-71f11842.js';\n\nconst VIEWPORT = {\n  yMin: 0,\n  yMax: 5000,\n  start: new Date(2000, 0, 0),\n  end: new Date(2001, 0, 0),\n};\n// test data point dead center of the viewport\nconst TEST_DATA_POINT = {\n  x: new Date((VIEWPORT.start.getTime() + VIEWPORT.end.getTime()) / 2).getTime(),\n  y: (VIEWPORT.yMin + VIEWPORT.yMax) / 2,\n};\nconst ScWebglChartLargeViewport = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  render() {\n    return (h(\"div\", null, h(\"sc-line-chart\", { dataStreams: [\n        {\n          id: 'test',\n          color: 'black',\n          name: 'test stream',\n          data: [TEST_DATA_POINT],\n          resolution: 0,\n          dataType: DataType.NUMBER,\n        },\n      ], widgetId: \"widget-id\", size: {\n        height: 500,\n        width: 500,\n      }, viewport: VIEWPORT }), h(\"sc-webgl-context\", null)));\n  }\n};\n\nexport { ScWebglChartLargeViewport as sc_webgl_chart_large_viewport };\n"],"names":["DataType","StreamType","TREND_TYPE","ChartType","VIEWPORT","yMin","yMax","start","Date","end","TEST_DATA_POINT","x","getTime","y","ScWebglChartLargeViewport","hostRef","_classCallCheck","registerInstance","this","_createClass","key","value","h","dataStreams","id","color","name","data","resolution","dataType","NUMBER","widgetId","size","height","width","viewport"],"sourceRoot":""}