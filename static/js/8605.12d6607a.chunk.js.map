{"version":3,"file":"static/js/8605.12d6607a.chunk.js","mappings":"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","sources":["../node_modules/@iot-app-kit/components/dist/esm/constants-8fe8bb38.js","../node_modules/@iot-app-kit/components/dist/esm/constants-9d5458e0.js","../node_modules/@iot-app-kit/components/dist/esm/dataConstants-71f11842.js","../node_modules/@iot-app-kit/components/dist/esm/index-b3f1c3a1.js","../node_modules/@iot-app-kit/components/dist/esm/status-timeline-threshold-coloration-band.entry.js","../node_modules/@iot-app-kit/components/dist/esm/time-b684d8c5.js"],"sourcesContent":["import './constants-9d5458e0.js';\n\nconst Y_MIN = 0;\nconst Y_MAX = 5000;\nconst X_MIN = new Date(2000, 0, 0, 0, 0);\nconst X_MAX = new Date(2000, 0, 0, 0, 10);\nconst Y_VALUE = 2500;\nconst Y_VALUE_STRING = 'Warning';\n({\n    value: new Date(X_MIN.getTime() + (1 / 3) * (X_MAX.getTime() - X_MIN.getTime())),\n    label: {\n        text: 'here is a x label',\n        show: true,\n    },\n    showValue: true,\n    color: 'purple',\n    id: 'purple-x-annotation',\n});\n// test data point dead center of the viewport\nconst TEST_DATA_POINT_STANDARD = {\n    x: (X_MIN.getTime() + X_MAX.getTime()) / 2,\n    y: Y_VALUE,\n};\n\nexport { TEST_DATA_POINT_STANDARD as T, X_MIN as X, Y_VALUE_STRING as Y, Y_VALUE as a, Y_MIN as b, Y_MAX as c, X_MAX as d };\n","// NOTE: `enum`s are held separately from the types which are exported\n// as part of the package, since `enum`'s cannot be present in a type declaration file.\n// THis is due to an `enum` being a type plus an implementation, while type declaration\n// files can only contain typing information.\n/**\n * Maps the view model to d3 axis types. In the future we could add additional\n * custom scale types beyond what's available in `d3-axis`.\n */\nvar ScaleType;\n(function (ScaleType) {\n    ScaleType[\"TimeSeries\"] = \"time-series\";\n    ScaleType[\"Log\"] = \"log\";\n    ScaleType[\"Linear\"] = \"linear\";\n})(ScaleType || (ScaleType = {}));\nvar LEGEND_POSITION;\n(function (LEGEND_POSITION) {\n    LEGEND_POSITION[\"RIGHT\"] = \"RIGHT\";\n    LEGEND_POSITION[\"BOTTOM\"] = \"BOTTOM\";\n})(LEGEND_POSITION || (LEGEND_POSITION = {}));\nvar COMPARISON_OPERATOR;\n(function (COMPARISON_OPERATOR) {\n    COMPARISON_OPERATOR[\"LESS_THAN\"] = \"LT\";\n    COMPARISON_OPERATOR[\"GREATER_THAN\"] = \"GT\";\n    COMPARISON_OPERATOR[\"LESS_THAN_EQUAL\"] = \"LTE\";\n    COMPARISON_OPERATOR[\"GREATER_THAN_EQUAL\"] = \"GTE\";\n    COMPARISON_OPERATOR[\"EQUAL\"] = \"EQ\";\n    COMPARISON_OPERATOR[\"CONTAINS\"] = \"CONTAINS\";\n})(COMPARISON_OPERATOR || (COMPARISON_OPERATOR = {}));\nconst COMPARATOR_MAP = {\n    GTE: '>=',\n    GT: '>',\n    LTE: '<=',\n    LT: '<',\n    EQ: '=',\n};\nvar StatusIcon;\n(function (StatusIcon) {\n    StatusIcon[\"ERROR\"] = \"error\";\n    StatusIcon[\"ACTIVE\"] = \"active\";\n    StatusIcon[\"NORMAL\"] = \"normal\";\n    StatusIcon[\"ACKNOWLEDGED\"] = \"acknowledged\";\n    StatusIcon[\"SNOOZED\"] = \"snoozed\";\n    StatusIcon[\"DISABLED\"] = \"disabled\";\n    StatusIcon[\"LATCHED\"] = \"latched\";\n})(StatusIcon || (StatusIcon = {}));\nvar DATA_ALIGNMENT;\n(function (DATA_ALIGNMENT) {\n    DATA_ALIGNMENT[\"EITHER\"] = \"EITHER\";\n    DATA_ALIGNMENT[\"RIGHT\"] = \"RIGHT\";\n    DATA_ALIGNMENT[\"LEFT\"] = \"LEFT\";\n})(DATA_ALIGNMENT || (DATA_ALIGNMENT = {}));\n\nexport { COMPARISON_OPERATOR as C, DATA_ALIGNMENT as D, LEGEND_POSITION as L, StatusIcon as S, COMPARATOR_MAP as a, ScaleType as b };\n","var DataType;\n(function (DataType) {\n    DataType[\"NUMBER\"] = \"NUMBER\";\n    DataType[\"STRING\"] = \"STRING\";\n    DataType[\"BOOLEAN\"] = \"BOOLEAN\";\n})(DataType || (DataType = {}));\n/**\n * Stream type is a classification of a `DataStream`, which contains with it additional structure and features specific\n * to the stream type.\n *\n * For example, for an alarm stream, if a stream is associated to the alarm stream, we interpret the stream as\n * representing the status for the given alarm and present alarm specific UX such as alarm status on the legend and tooltip.\n */\nvar StreamType;\n(function (StreamType) {\n    StreamType[\"ALARM\"] = \"ALARM\";\n    StreamType[\"ANOMALY\"] = \"ANOMALY\";\n    StreamType[\"ALARM_THRESHOLD\"] = \"ALARM_THRESHOLD\";\n})(StreamType || (StreamType = {}));\nvar TREND_TYPE;\n(function (TREND_TYPE) {\n    TREND_TYPE[\"LINEAR\"] = \"linear-regression\";\n})(TREND_TYPE || (TREND_TYPE = {}));\nvar ChartType;\n(function (ChartType) {\n    ChartType[\"BarChart\"] = \"bar-chart\";\n    ChartType[\"LineChart\"] = \"line-chart\";\n})(ChartType || (ChartType = {}));\n\nexport { DataType as D, StreamType as S, TREND_TYPE as T };\n","let durationRE = /(-?(?:\\d+\\.?\\d*|\\d*\\.?\\d+)(?:e[-+]?\\d+)?)\\s*([\\p{L}]*)/uig;\r\n\r\n\r\n/**\r\n * conversion ratios\r\n */\r\n\r\nparse.nanosecond =\r\nparse.ns = 1 / 1e6;\r\n\r\nparse['µs'] =\r\nparse['μs'] =\r\nparse.us =\r\nparse.microsecond = 1 / 1e3;\r\n\r\nparse.millisecond =\r\nparse.ms =\r\nparse[''] = 1;\r\n\r\nparse.second =\r\nparse.sec =\r\nparse.s = parse.ms * 1000;\r\n\r\nparse.minute =\r\nparse.min =\r\nparse.m = parse.s * 60;\r\n\r\nparse.hour =\r\nparse.hr =\r\nparse.h = parse.m * 60;\r\n\r\nparse.day =\r\nparse.d = parse.h * 24;\r\n\r\nparse.week =\r\nparse.wk =\r\nparse.w = parse.d * 7;\r\n\r\nparse.month =\r\nparse.b =\r\nparse.d * (365.25 / 12);\r\n\r\nparse.year =\r\nparse.yr =\r\nparse.y = parse.d * 365.25;\r\n\r\n/**\r\n * convert `str` to ms\r\n *\r\n * @param {String} str\r\n * @param {String} format\r\n * @return {Number}\r\n */\r\n\r\nfunction parse(str='', format='ms'){\r\n  var result = null;\r\n  // ignore commas/placeholders\r\n  str = (str+'').replace(/(\\d)[,_](\\d)/g, '$1$2');\r\n  str.replace(durationRE, function(_, n, units){\r\n    units = unitRatio(units);\r\n    if (units) result = (result || 0) + parseFloat(n, 10) * units;\r\n  });\r\n\r\n  return result && (result / (unitRatio(format) || 1))\r\n}\r\n\r\nfunction unitRatio(str) {\r\n  return parse[str] || parse[str.toLowerCase().replace(/s$/, '')]\r\n}\n\nexport { parse as p };\n","import { r as registerInstance, h } from './index-1cec361c.js';\nimport { M as MINUTE_IN_MS } from './time-b684d8c5.js';\nimport { b as Y_MIN, c as Y_MAX, X as X_MIN, d as X_MAX, T as TEST_DATA_POINT_STANDARD } from './constants-8fe8bb38.js';\nimport { D as DataType } from './dataConstants-71f11842.js';\nimport { C as COMPARISON_OPERATOR } from './constants-9d5458e0.js';\nimport './index-b3f1c3a1.js';\n\nconst urlParams = new URLSearchParams(window.location.search);\nconst isDiscreteNumericData = urlParams.get('isDiscreteNumericData');\nconst isStringData = urlParams.get('isStringData');\nconst data = TEST_DATA_POINT_STANDARD;\nconst dataType = isDiscreteNumericData === '1' ? DataType.STRING : DataType.NUMBER;\ndata.y = 2000;\nif (isDiscreteNumericData === '1') {\n  data.y = 2000;\n}\nif (isStringData === '1') {\n  data.y = 'test';\n}\nconst StatusTimelineThresholdBand = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  render() {\n    return (h(\"div\", null, h(\"sc-status-timeline\", { alarms: { expires: MINUTE_IN_MS }, dataStreams: [\n        {\n          id: 'test',\n          color: 'black',\n          name: 'test stream',\n          aggregates: { [MINUTE_IN_MS]: [data] },\n          data: [],\n          resolution: MINUTE_IN_MS,\n          dataType,\n        },\n      ], annotations: {\n        y: [\n          {\n            value: isStringData ? 'test' : 2000,\n            label: {\n              text: 'y label',\n              show: true,\n            },\n            showValue: true,\n            color: 'blue',\n            comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n          },\n        ],\n        thresholdOptions: {\n          showColor: true,\n        },\n      }, widgetId: \"test-id\", size: {\n        width: 500,\n        height: 500,\n      }, viewport: { yMin: Y_MIN, yMax: Y_MAX, start: X_MIN, end: X_MAX } }), h(\"sc-webgl-context\", null)));\n  }\n};\n\nexport { StatusTimelineThresholdBand as status_timeline_threshold_coloration_band };\n","import { p as parse } from './index-b3f1c3a1.js';\n\nconst SECOND_IN_MS = 1000;\nconst MINUTE_IN_MS = 60 * SECOND_IN_MS;\nconst HOUR_IN_MS = 60 * MINUTE_IN_MS;\nconst DAY_IN_MS = 24 * HOUR_IN_MS;\n// Not precisely accurate, only estimates. exact duration depends on start date. use with care.\nconst MONTH_IN_MS = 30 * DAY_IN_MS;\nconst YEAR_IN_MS = 12 * MONTH_IN_MS;\n/**\n * ConvertMS is a helper function that will take in milliseconds and convert it to the highest detonator\n * and does not return the \"remainder\"\n *\n * It is important to note that the object returning does not represent equivalence!\n *\n * For Example:\n * convert(MINUTE_IN_MS) will return:\n * {\n *   day: 0,\n *   hour: 0\n *   minute: 1,\n *   seconds: 0,\n * }\n *\n * IT DOES NOT RETURN:\n *\n * {\n *   day: 0,\n *   hour: 0,\n *   minute: 1,\n *   seconds: 60, <--- does not return the \"equivalence\"\n * }\n */\nconst convertMS = (milliseconds) => {\n    if (milliseconds < 0) {\n        throw new Error('Time cannot be negative!');\n    }\n    let seconds = Math.floor(milliseconds / 1000);\n    let minute = Math.floor(seconds / 60);\n    let hour = Math.floor(minute / 60);\n    const day = Math.floor(hour / 24);\n    seconds %= 60;\n    minute %= 60;\n    hour %= 24;\n    return {\n        day,\n        hour,\n        minute,\n        seconds,\n    };\n};\nconst displayDate = (date, resolution, { start, end }) => {\n    const viewportDurationMS = end.getTime() - start.getTime();\n    if (resolution < HOUR_IN_MS) {\n        if (viewportDurationMS < MINUTE_IN_MS) {\n            return date.toLocaleString('en-US', {\n                minute: 'numeric',\n                second: 'numeric',\n            });\n        }\n        if (viewportDurationMS <= 10 * MINUTE_IN_MS) {\n            return date.toLocaleString('en-US', {\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n                hour12: true,\n            });\n        }\n        if (viewportDurationMS <= HOUR_IN_MS) {\n            return date.toLocaleString('en-US', {\n                hour: 'numeric',\n                minute: 'numeric',\n                hour12: true,\n            });\n        }\n        if (viewportDurationMS <= DAY_IN_MS) {\n            return date.toLocaleString('en-US', {\n                hour12: true,\n                hour: 'numeric',\n                month: 'numeric',\n                minute: 'numeric',\n                day: 'numeric',\n            });\n        }\n        if (viewportDurationMS <= MONTH_IN_MS) {\n            return date.toLocaleString('en-US', {\n                hour12: true,\n                hour: 'numeric',\n                year: 'numeric',\n                month: 'numeric',\n                day: 'numeric',\n            });\n        }\n        return date.toLocaleString('en-US', {\n            day: 'numeric',\n            month: 'numeric',\n            year: 'numeric',\n        });\n    }\n    if (resolution <= HOUR_IN_MS) {\n        return date.toLocaleString('en-US', {\n            hour: 'numeric',\n            day: 'numeric',\n            month: 'numeric',\n            hour12: true,\n        });\n    }\n    if (resolution < DAY_IN_MS) {\n        return date.toLocaleString('en-US', {\n            day: 'numeric',\n            month: 'numeric',\n        });\n    }\n    return date.toLocaleString('en-US', {\n        year: 'numeric',\n        month: 'numeric',\n        day: 'numeric',\n    });\n};\nconst parseDuration = (duration) => {\n    if (typeof duration === 'number') {\n        return duration;\n    }\n    const parsedTime = parse(duration, 'ms');\n    // if duration is a string but we cannot parse it, we default to 10 mins.\n    return parsedTime != null ? parsedTime : 10 * MINUTE_IN_MS;\n};\n\nexport { DAY_IN_MS as D, HOUR_IN_MS as H, MINUTE_IN_MS as M, SECOND_IN_MS as S, YEAR_IN_MS as Y, MONTH_IN_MS as a, convertMS as c, displayDate as d, parseDuration as p };\n"],"names":["Y_MIN","Y_MAX","X_MIN","Date","X_MAX","Y_VALUE","Y_VALUE_STRING","getTime","TEST_DATA_POINT_STANDARD","x","y","ScaleType","LEGEND_POSITION","COMPARISON_OPERATOR","StatusIcon","DATA_ALIGNMENT","COMPARATOR_MAP","GTE","GT","LTE","LT","EQ","DataType","StreamType","TREND_TYPE","ChartType","durationRE","parse","str","arguments","length","undefined","format","result","replace","_","n","units","unitRatio","parseFloat","toLowerCase","nanosecond","ns","us","microsecond","millisecond","ms","second","sec","s","minute","min","m","hour","hr","h","day","d","week","wk","w","month","b","year","yr","urlParams","URLSearchParams","window","location","search","isDiscreteNumericData","get","isStringData","data","dataType","STRING","NUMBER","StatusTimelineThresholdBand","hostRef","_classCallCheck","registerInstance","this","_createClass","key","value","alarms","expires","MINUTE_IN_MS","dataStreams","id","color","name","aggregates","_defineProperty","resolution","annotations","label","text","show","showValue","comparisonOperator","EQUAL","thresholdOptions","showColor","widgetId","size","width","height","viewport","yMin","yMax","start","end","SECOND_IN_MS","HOUR_IN_MS","DAY_IN_MS","MONTH_IN_MS","YEAR_IN_MS","convertMS","milliseconds","Error","seconds","Math","floor","displayDate","date","_ref","viewportDurationMS","toLocaleString","hour12","parseDuration","duration","parsedTime"],"sourceRoot":""}