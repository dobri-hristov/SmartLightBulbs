{"version":3,"file":"static/js/9579.17df0128.chunk.js","mappings":"4HAAA,IAAIA,EAaAC,EAMAC,EAIAC,E,8EAtBJ,SAAWH,GACPA,EAAiB,OAAI,SACrBA,EAAiB,OAAI,SACrBA,EAAkB,QAAI,SACzB,CAJD,CAIGA,IAAaA,EAAW,CAAC,IAS5B,SAAWC,GACPA,EAAkB,MAAI,QACtBA,EAAoB,QAAI,UACxBA,EAA4B,gBAAI,iBACnC,CAJD,CAIGA,IAAeA,EAAa,CAAC,IAEhC,SAAWC,GACPA,EAAmB,OAAI,mBAC1B,CAFD,CAEGA,IAAeA,EAAa,CAAC,IAEhC,SAAWC,GACPA,EAAoB,SAAI,YACxBA,EAAqB,UAAI,YAC5B,CAHD,CAGGA,IAAcA,EAAY,CAAC,G,qJCrBxBC,EAAQ,IAAIC,KAAK,KAAM,EAAG,GAC1BC,EAAQ,IAAID,KAAK,IAAM,EAAG,GAK1BE,EAAQD,EAAME,UAAYJ,EAAMI,UAChCC,EAA6B,WACjC,SAAAA,EAAYC,GAAS,IAAAC,EAAA,MAAAC,EAAAA,EAAAA,GAAA,KAAAH,IACnBI,EAAAA,EAAAA,GAAiBC,KAAMJ,GACvBI,KAAKC,KAAO,GACZD,KAAKE,aAAe,WAClB,IAAMC,EAAY,CAChBC,EAAG,IAAIb,KAAKD,EAAMI,UAAYD,GAAS,EAAII,EAAKI,KAAKI,SAASX,UAC9DY,EAAG,MAELT,EAAKI,KAAO,CAACE,GAASI,QAAAC,EAAAA,EAAAA,GAAKX,EAAKI,MAClC,CACF,CAeC,OAfAQ,EAAAA,EAAAA,GAAAd,EAAA,EAAAe,IAAA,SAAAC,MACD,WACE,OAAQC,EAAAA,EAAAA,GAAE,MAAO,CAAEC,MAAO,wBAAyBD,EAAAA,EAAAA,GAAE,SAAU,CAAEE,GAAI,iBAAkBC,QAASf,KAAKE,cAAgB,mBAAmBU,EAAAA,EAAAA,GAAE,MAAO,CAAEE,GAAI,kBAAmBE,MAAO,CAAEC,UAAW,OAAQC,MAAO,QAASC,OAAQ,WAAaP,EAAAA,EAAAA,GAAE,gBAAiB,CAAEQ,SAAU,YAAaC,YAAa,CAChS,CACEP,GAAI,OACJQ,MAAO,QACPC,KAAM,cACNtB,KAAMD,KAAKC,KACXuB,WAAY,EACZC,SAAUvC,EAAAA,EAASwC,SAEpBC,KAAM,CACPR,OAAQ,IACRD,MAAO,KACNU,SAAU,CAAEC,MAAOvC,EAAOwC,IAAKtC,EAAOuC,KAlCjC,EAkC8CC,KAjC9C,KAiC6DC,aAAc,EAAGC,cAAe,KAAMtB,EAAAA,EAAAA,GAAE,mBAAoB,OACrI,KAACjB,CAAA,CA1BgC,E","sources":["../node_modules/@iot-app-kit/components/dist/esm/dataConstants-71f11842.js","../node_modules/@iot-app-kit/components/dist/esm/sc-webgl-line-chart-dynamic-buffer.entry.js"],"sourcesContent":["var DataType;\n(function (DataType) {\n    DataType[\"NUMBER\"] = \"NUMBER\";\n    DataType[\"STRING\"] = \"STRING\";\n    DataType[\"BOOLEAN\"] = \"BOOLEAN\";\n})(DataType || (DataType = {}));\n/**\n * Stream type is a classification of a `DataStream`, which contains with it additional structure and features specific\n * to the stream type.\n *\n * For example, for an alarm stream, if a stream is associated to the alarm stream, we interpret the stream as\n * representing the status for the given alarm and present alarm specific UX such as alarm status on the legend and tooltip.\n */\nvar StreamType;\n(function (StreamType) {\n    StreamType[\"ALARM\"] = \"ALARM\";\n    StreamType[\"ANOMALY\"] = \"ANOMALY\";\n    StreamType[\"ALARM_THRESHOLD\"] = \"ALARM_THRESHOLD\";\n})(StreamType || (StreamType = {}));\nvar TREND_TYPE;\n(function (TREND_TYPE) {\n    TREND_TYPE[\"LINEAR\"] = \"linear-regression\";\n})(TREND_TYPE || (TREND_TYPE = {}));\nvar ChartType;\n(function (ChartType) {\n    ChartType[\"BarChart\"] = \"bar-chart\";\n    ChartType[\"LineChart\"] = \"line-chart\";\n})(ChartType || (ChartType = {}));\n\nexport { DataType as D, StreamType as S, TREND_TYPE as T };\n","import { r as registerInstance, h } from './index-1cec361c.js';\nimport { D as DataType } from './dataConstants-71f11842.js';\n\n// viewport boundaries\nconst Y_MIN = 0;\nconst Y_MAX = 5000;\nconst X_MIN = new Date(1998, 0, 0);\nconst X_MAX = new Date(2000, 0, 1);\n/**\n * Tests the scenario where a chart is updated to contain more data than the initialized buffers size.\n * The buffers should resize, resulting in the additional points being rendered onto the chart.\n */\nconst WIDTH = X_MAX.getTime() - X_MIN.getTime();\nconst ScWebglLineChartDynamicBuffer = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.data = [];\n    this.addDataPoint = () => {\n      const dataPoint = {\n        x: new Date(X_MIN.getTime() + WIDTH / (2 + this.data.length)).getTime(),\n        y: 2500,\n      };\n      this.data = [dataPoint, ...this.data];\n    };\n  }\n  render() {\n    return (h(\"div\", { class: \"synchro-chart-tests\" }, h(\"button\", { id: \"add-data-point\", onClick: this.addDataPoint }, \"Add Data Point\"), h(\"div\", { id: \"chart-container\", style: { marginTop: '20px', width: '500px', height: '500px' } }, h(\"sc-line-chart\", { widgetId: \"widget-id\", dataStreams: [\n        {\n          id: 'test',\n          color: 'black',\n          name: 'test stream',\n          data: this.data,\n          resolution: 0,\n          dataType: DataType.NUMBER,\n        },\n      ], size: {\n        height: 500,\n        width: 500,\n      }, viewport: { start: X_MIN, end: X_MAX, yMin: Y_MIN, yMax: Y_MAX }, bufferFactor: 1, minBufferSize: 1 }), h(\"sc-webgl-context\", null))));\n  }\n};\n\nexport { ScWebglLineChartDynamicBuffer as sc_webgl_line_chart_dynamic_buffer };\n"],"names":["DataType","StreamType","TREND_TYPE","ChartType","X_MIN","Date","X_MAX","WIDTH","getTime","ScWebglLineChartDynamicBuffer","hostRef","_this","_classCallCheck","registerInstance","this","data","addDataPoint","dataPoint","x","length","y","concat","_toConsumableArray","_createClass","key","value","h","class","id","onClick","style","marginTop","width","height","widgetId","dataStreams","color","name","resolution","dataType","NUMBER","size","viewport","start","end","yMin","yMax","bufferFactor","minBufferSize"],"sourceRoot":""}