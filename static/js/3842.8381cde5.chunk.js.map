{"version":3,"file":"static/js/3842.8381cde5.chunk.js","mappings":"oLAMMA,EAAc,SAAHC,GAAA,IAAMC,EAASD,EAATC,UAAWC,EAAgBF,EAAhBE,iBAAkBC,EAAuBH,EAAvBG,wBAAyBC,EAAgBJ,EAAhBI,iBAAkBC,EAAwBL,EAAxBK,yBAAwB,OAASC,EAAAA,EAAAA,GAAE,MAAO,CAAEC,MAAO,eAAgBC,SAAWN,GAAoBC,IAA4BF,IAAc,CAAEQ,QAAS,cAAaC,IAC9PT,GACGE,GAA2B,EAC3BG,EAAAA,EAAAA,GAAE,KAAM,KAAMF,EAAiBO,4BAA8BC,EAAAA,GAC7DR,EAAiBS,+BAAiCC,EAAAA,IAErDb,GACGI,IACCF,GACDD,GAAoB,EACpBI,EAAAA,EAAAA,GAAE,KAAM,KAAMF,EAAiBW,qBAAuBC,EAAAA,GACtDZ,EAAiBa,wBAA0BC,EAAAA,GAC7C,C,qMCPAC,EAAoB,SAACC,GAAI,OAAK,SAACC,EAAGC,GACpC,OAAe,MAAXD,EAAEE,OAA4B,MAAXD,EAAEC,MACd,EAEI,MAAXF,EAAEE,OACM,EAEG,MAAXD,EAAEC,MACK,EAEPH,EAAKC,EAAEE,SAAWH,EAAKE,EAAEC,OAClB,EAEJH,EAAKE,EAAEC,OAASH,EAAKC,EAAEE,OAAS,GAAK,CAChD,CAAC,EAUKC,EAAe,SAACC,EAAYC,EAAMC,EAAeC,GACnD,IAAMC,EAAMC,EAAAA,EAAcC,KAAKN,EAAYC,GACrCM,EAAYP,EAAWI,EAAM,GAC7BI,EAAaR,EAAWI,GAI9B,GAAIG,GAAaA,EAAUE,IAAMR,EAAKS,UAClC,OAAOH,EAEX,GAAIC,GAAcA,EAAWC,IAAMR,EAAKS,UACpC,OAAOF,EAGX,GAAIN,IAAkBS,EAAAA,EAAeC,MAAO,CACxC,IAAKJ,EACD,OAEJ,OAAmB,MAAfL,GAGGK,EAAWC,EAAIR,EAAKS,WAAaP,EAF7BK,OAEwDvB,CACvE,CAEA,GAAIiB,IAAkBS,EAAAA,EAAeE,KAAM,CACvC,IAAKN,EACD,OAEJ,OAAmB,MAAfJ,GAGGF,EAAKS,UAAYH,EAAUE,GAAKN,EAF5BI,OAEsDtB,CACrE,CAGA,OAAKsB,GAAcC,EAIZA,EAHID,GAAaC,CAI5B,EAcMM,EAAe,SAAHvC,GAAyG,IAAnGwC,EAAQxC,EAARwC,SAAUC,EAAWzC,EAAXyC,YAAaC,EAAY1C,EAAZ0C,aAAcC,EAAkB3C,EAAlB2C,mBAAoBhB,EAAa3B,EAAb2B,cAAeiB,EAAmB5C,EAAnB4C,oBACtFC,EAAyBJ,EAAYK,KAAI,SAAAC,GAAM,MAAK,CACtDC,SAAUD,EAAOE,GACjBxB,YAAYyB,EAAAA,EAAAA,IAAkBC,EAAAA,EAAAA,GAAcJ,EAAQA,EAAOK,YAAaZ,EAASa,KACpF,IACKC,EAAoBZ,EAAaP,UAEjCoB,EAASV,EAAuBC,KAAI,SAAAU,GAAA,IAAGR,EAAQQ,EAARR,SAAUvB,EAAU+B,EAAV/B,WAAU,MAAQ,CACrEuB,SAAAA,EACAzB,MAAOC,EAAaC,EAAYiB,EAAcf,EAAeiB,GAChE,IACD,GAAID,EACA,OAAOY,EAEX,IAEME,EAAeF,EAAOG,KAAKvC,GAFR,SAACwC,GAAC,OAAKC,KAAKC,IAAIF,EAAEzB,EAAIoB,EAAkB,KAGjE,GAA4B,IAAxBG,EAAaK,OACb,MAAO,GAEX,IAAMC,EAAWN,EAAaA,EAAaK,OAAS,GAAGvC,MACvD,OAAgB,MAAZwC,EAEON,EAGJA,EAAaO,QAAO,SAAAL,GAAC,OAAIA,EAAEpC,OAASoC,EAAEpC,MAAMW,IAAM6B,EAAS7B,CAAC,GACvE,EAEM+B,EAAmB,SAACC,EAAIC,GAC1B,OAAU,MAAND,EACOC,EAEQ,MAAfD,EAAGE,UAAmC,MAAfD,EAAGC,SACnBF,EAEQ,MAAfA,EAAGE,SACID,EAEQ,MAAfA,EAAGC,UAGAF,EAAGE,UAAYD,EAAGC,SAFdF,EAE8BC,CAC7C,EAiBME,EAA+B,SAACC,EAAWC,GAC7C,IAAQC,EAAkBF,EAAlBE,cACR,OAAqB,MAAjBA,GAGGA,EAAcC,SAASF,EAClC,EA6BMG,EAAoB,SAAHC,GAA8D,IAAxDC,EAAKD,EAALC,MAAOlD,EAAIiD,EAAJjD,KAAMmD,EAAUF,EAAVE,WAAYpC,EAAWkC,EAAXlC,YAAaqC,EAAUH,EAAVG,WACzDC,EAAuBF,EAAWb,QAAO,SAAAM,GAAS,OAAID,EAA6BC,EAAWQ,EAAW7B,GAAG,IAC5G+B,EAAyB,MAATJ,GAAgBK,EAAAA,EAAAA,GAAqBL,EAAOG,QAAwBrE,EACpFwE,EAxBsB,SAAHC,GAAuD,IAAjDzD,EAAIyD,EAAJzD,KAAMoD,EAAUK,EAAVL,WAAYrC,EAAW0C,EAAX1C,YAAaoC,EAAUM,EAAVN,WACxDO,EAAiD,MAAhCN,EAAWO,kBAC5BP,EAAWO,kBAAkBrB,QAAO,SAAAsB,GAAO,OAAAA,EAAJC,OAAoBC,EAAAA,EAAWC,KAAK,IAAE3C,KAAI,SAAA4C,GAAK,OAAAA,EAAFzC,EAAW,IAC/F,GAWN,OATqBR,EAAYuB,QADP,SAACjB,GAAM,OAAKqC,EAAeX,SAAS1B,EAAOE,GAAG,IAInEH,KAAI,SAAAC,GACL,IAAMmC,EAAkBL,EAAWb,QAAO,SAAAM,GAAS,OAAID,EAA6BC,EAAWvB,EAAOE,GAAG,IACnG0C,EAAmBnE,EAAauB,EAAO6C,KAAMlE,EAAMU,EAAAA,EAAeE,MACxE,OAA2B,MAApBqD,GAA2BV,EAAAA,EAAAA,GAAqBU,EAAiBE,EAAGX,QAAmBxE,CAClG,IACKsD,OAAO8B,EAAAA,EAEhB,CAS4BC,CAAwB,CAC5CrE,KAAAA,EACAoD,WAAAA,EACArC,YAAAA,EACAoC,WAAAA,IAEJ,OApD6B,SAACA,GAC9B,OAAOA,EAAWmB,OAAO/B,OAAkBvD,EAC/C,CAkDWuF,CAAyB,CAACjB,GAAakB,QAAAC,EAAAA,EAAAA,GAAKjB,IAAiBlB,OAAO8B,EAAAA,GAC/E,C,gHC7KMM,EAAqB,SAAHjB,GAIpB,IAJ6E,IAAnDkB,EAAYlB,EAAZkB,aAAc5D,EAAW0C,EAAX1C,YAAaoC,EAAUM,EAAVN,WAAYnD,EAAIyD,EAAJzD,KAC3D4E,EAAU1C,KAAK2C,IAAGC,MAAR5C,MAAIuC,EAAAA,EAAAA,GAAQE,EAAavD,KAAI,SAAAwC,GAAO,OAAAA,EAAJmB,KAAgB3C,MAAM,MAChE4C,EAAQ,GACdC,EAAA,SAAAC,GAEI,IAAMC,EAAM,CAAC,EACbR,EAAaS,SAAQ,SAAAC,GACjB,IAAMxC,EAAewC,EAAON,KAAKG,SAAMlG,EACvCmG,EAAIE,EAAOC,QA1BV,SAACnC,EAAYnD,EAAMe,EAAa8B,GACzC,IAAMxB,EAASN,EAAYwE,MAAK,SAAAjH,GAAK,OAAAA,EAAFiD,KAAgBsB,CAAY,IACzDhB,EAASR,GAASI,EAAAA,EAAAA,GAAcJ,EAAQA,EAAOK,YAAc,GAC7DwB,EAAQrB,EAAOA,EAAOO,OAAS,IAAMP,EAAOA,EAAOO,OAAS,GAAG+B,EASrErC,EARkBT,IACd2B,EAAAA,EAAAA,GAAkB,CACdE,MAAAA,EACAlD,KAAAA,EACAe,YAAAA,EACAqC,WAAY/B,EACZ8B,WAAAA,KAE6B,CAAC,EACtC,MAAO,CAAEC,WAAY/B,EAAQmE,MADhB1D,EAAL0D,MAC4BC,KADjB3D,EAAJ2D,KAEnB,CAYiCC,CAAKvC,EAAYnD,EAAMe,EAAa8B,EAC7D,IACAmC,EAAMW,KAAKR,EACf,EAPSD,EAAI,EAAGA,EAAIN,EAASM,IAAGD,EAAAC,GAQhC,OAAOF,CACX,EAIMY,EAA4B,SAACC,GAC/B,IAAMC,EAAaD,EAAoBE,QAAQ,MAC/C,OAAID,EAAa,EACN,CAAEE,UAAWH,EAAqBI,aAAc,IAIpD,CAAED,UAFSH,EAAoBK,MAAM,EAAGJ,GAE3BG,aADCJ,EAAoBK,MAAMJ,EAAa,GAEhE,C,4HCvCM1F,GAAgB+F,E,QAAAA,IAAS,SAAClE,GAAC,OAAKA,EAAEzB,CAAC,IAenC4F,EAAiB,SAAClC,EAAMpD,GAIG,IAAjCuF,IAAqBC,UAAAlE,OAAA,QAAApD,IAAAsH,UAAA,KAAAA,UAAA,GACXC,GAAQC,EAAAA,EAAAA,GAAwB1F,GAChC,IAAI2F,KAAK3F,EAASyF,OAClB,IAAIE,KAAKA,KAAKC,OAAQC,EAAAA,EAAAA,GAAc7F,EAAS8F,WAC7CjF,GAAM6E,EAAAA,EAAAA,GAAwB1F,GAAY,IAAI2F,KAAK3F,EAASa,KAAO,IAAI8E,KAE7E,GAAoB,IAAhBvC,EAAK9B,OACL,MAAO,GAGX,GAAImE,EAAM9F,UAAYyD,EAAKA,EAAK9B,OAAS,GAAG5B,EACxC,MAAO,GAGX,GAAImB,EAAIlB,UAAYyD,EAAK,GAAG1D,EACxB,MAAO,GAIX,IAAMqG,EAAa3E,KAAK2C,IAAIzE,EAAcC,KAAK6D,EAAMqC,IAAUF,EAAwB,EAAI,GAAI,GACzFS,EAAW5E,KAAK6E,IAAI3G,EAAc4G,MAAM9C,EAAMvC,IAAQ0E,EAAwB,EAAI,GAAInC,EAAK9B,OAAS,GAC1G,OAAO8B,EAAKgC,MAAMW,EAAYC,EAAW,EAC7C,EAMMtF,EAAoB,SAAC0C,EAAMlE,GAE7B,GAAoB,IAAhBkE,EAAK9B,OACL,MAAO,GAGX,GAAIpC,EAAKS,UAAYyD,EAAK,GAAG1D,EACzB,MAAO,GAIX,IAAMsG,EAAW5E,KAAK6E,IAAI3G,EAAc4G,MAAM9C,EAAMlE,GAAQ,EAAGkE,EAAK9B,OAAS,GAC7E,OAAO8B,EAAKgC,MAAM,EAAGY,EAAW,EACpC,C,mJCnEA,IAAMG,EAA4B,CAC9BC,wBAAyB,QACzBC,8BAA+B,QAC/BlI,2BAA4B,0BAC5BE,8BAA+B,qDAC/BE,oBAAqB,UACrBE,uBAAwB,kDACxB6H,aAAc,8GACdC,0BAA2B,6BAC3BC,6BAA8B,sDAC9BC,eAAgB,2BAGdC,EAA6B,QAC7BC,EAA2B,EAC3BC,EAA2B,aAC3BC,EAAwB,M,uDCb9B,IAAMlG,EAAgB,SAACJ,EAAQK,GAC3B,OAAmB,IAAfA,EACOL,EAAO6C,KAEO,MAArB7C,EAAOuG,WACA,GAEJvG,EAAOuG,WAAWlG,IAAe,EAC5C,C,0ICMMmG,G,8DAAc,SAAHvJ,GAA6C,IAAvCwJ,EAAOxJ,EAAPwJ,QAAS/C,EAAIzG,EAAJyG,KAAMrG,EAAgBJ,EAAhBI,iBAClC,OAAOqG,EAAK3C,QAAUxD,EAAAA,EAAAA,GAAE,QAAS,KAAMmG,EAAK3D,KAAI,SAAA+D,GAAG,OAAKvG,EAAAA,EAAAA,GAAE,KAAM,KAAMkJ,EAAQ1G,KAAI,SAACiE,EAAQ0C,GACvF,IAAMrC,EAAOP,EAAIE,EAAOC,QAClB0C,EAAMtC,GAAQA,EAAKtC,WAAa,GAAHoB,OAAMkB,EAAKtC,WAAW7B,GAAE,KAAAiD,OAAIuD,GAAC,SAAAvD,OAAcuD,GAC9E,OAAQnJ,EAAAA,EAAAA,GAAE,KAAM,CAAEoJ,IAAKA,EAAKzG,GAAI,QAAFiD,OAAUa,EAAOC,UAC3C1G,EAAAA,EAAAA,GAAE,gBAAiB,CAAE8G,KAAMA,IACnC,IAAG,MAAQ9G,EAAAA,EAAAA,GAAE,MAAO,CAAEC,MAAO,2BACzBD,EAAAA,EAAAA,GAAEP,EAAAA,EAAa,CAAEM,0BAA0B,EAAMD,iBAAkBA,EAAkBH,WAAW,EAAOC,kBAAkB,EAAMC,yBAAyB,IAChK,GAIMwJ,EAAW,WACf,SAAAA,EAAYC,IAASC,EAAAA,EAAAA,GAAA,KAAAF,IACnBG,EAAAA,EAAAA,GAAiBC,KAAMH,EACzB,CAKC,OALAI,EAAAA,EAAAA,GAAAL,EAAA,EAAAD,IAAA,SAAA9E,MACD,WACE,IAAIqF,EAAIC,EACRC,GAAoC7C,EAAAA,EAAAA,GAAuH,QAA5F4C,EAAsC,QAAhCD,EAAKF,KAAK3J,wBAAqC,IAAP6J,OAAgB,EAASA,EAAGnB,oBAAiC,IAAPoB,EAAgBA,EAAKvB,EAAAA,EAA0BG,cAA1MpB,EAASyC,EAATzC,UAAWC,EAAYwC,EAAZxC,aACnB,OAAQrH,EAAAA,EAAAA,GAAE,MAAO,CAAEC,MAAO,oBAAqBD,EAAAA,EAAAA,GAAE,QAAS,CAAE8J,KAAM,UAAW9J,EAAAA,EAAAA,GAAE,QAAS,MAAMA,EAAAA,EAAAA,GAAE,KAAM,KAAMyJ,KAAKP,QAAQ1G,KAAI,SAAAU,GAAA,IAAGwD,EAAMxD,EAANwD,OAAM,OAAQ1G,EAAAA,EAAAA,GAAE,KAAM,CAAEoJ,IAAK1C,IAAU1G,EAAAA,EAAAA,GAAE,OAAQ,CAAEC,MAAO,yBAA2ByG,GAAQ,MAAM+C,KAAKM,WAAa/J,EAAAA,EAAAA,GAAEiJ,EAAa,CAAE9C,KAAMsD,KAAKtD,KAAM+C,QAASO,KAAKP,QAASpJ,iBAAkB2J,KAAK3J,oBAAwBE,EAAAA,EAAAA,GAAE,MAAO,CAAEC,MAAO,6BAA8BD,EAAAA,EAAAA,GAAE,MAAO,CAAEC,MAAO,mBAAoBD,EAAAA,EAAAA,GAAE,KAAM,KAAMoH,GAAYC,KAC/c,KAACgC,CAAA,CARc,GAUjBA,EAAYnJ,MAZW,okE,mJC1BvB,IAAM8J,EAAmB,IAKnB1J,EAAiC,0BACjCE,EAAqC,qDAErCE,EAAyB,UACzBE,EAA6B,iD","sources":["../node_modules/@iot-app-kit/components/dist/esm/EmptyStatus-5d4f6b89.js","../node_modules/@iot-app-kit/components/dist/esm/breachedThreshold-ec78e357.js","../node_modules/@iot-app-kit/components/dist/esm/constructTableData-0bdc96c5.js","../node_modules/@iot-app-kit/components/dist/esm/dataFilters-fa384f64.js","../node_modules/@iot-app-kit/components/dist/esm/dataTypes-7f768b75.js","../node_modules/@iot-app-kit/components/dist/esm/getDataPoints-c53771e0.js","../node_modules/@iot-app-kit/components/dist/esm/sc-table-base.entry.js","../node_modules/@iot-app-kit/components/dist/esm/terms-7b76cdf8.js"],"sourcesContent":["import { h } from './index-1cec361c.js';\nimport { a as NO_DATA_PRESENT_HEADER, b as NO_DATA_PRESENT_SUB_HEADER, c as NO_DATA_STREAMS_PRESENT_HEADER, d as NO_DATA_STREAMS_PRESENT_SUB_HEADER } from './terms-7b76cdf8.js';\n\n/**\n * Provider messaging to clarify that the chart has no data/streams present\n */\nconst EmptyStatus = ({ isLoading, hasNoDataPresent, hasNoDataStreamsPresent, messageOverrides, displaysNoDataPresentMsg, }) => (h(\"div\", { class: \"empty-status\", style: ((!(hasNoDataPresent || hasNoDataStreamsPresent) || isLoading) && { display: 'none' }) || undefined },\n    !isLoading &&\n        hasNoDataStreamsPresent && [\n        h(\"h3\", null, messageOverrides.noDataStreamsPresentHeader || NO_DATA_STREAMS_PRESENT_HEADER),\n        messageOverrides.noDataStreamsPresentSubHeader || NO_DATA_STREAMS_PRESENT_SUB_HEADER,\n    ],\n    !isLoading &&\n        displaysNoDataPresentMsg &&\n        !hasNoDataStreamsPresent &&\n        hasNoDataPresent && [\n        h(\"h3\", null, messageOverrides.noDataPresentHeader || NO_DATA_PRESENT_HEADER),\n        messageOverrides.noDataPresentSubHeader || NO_DATA_PRESENT_SUB_HEADER,\n    ]));\n\nexport { EmptyStatus as E };\n","import { g as getBreachedThreshold } from './utils-0919edc8.js';\nimport { c as isDefined } from './predicates-248e16b2.js';\nimport { p as pointBisector, g as getDataBeforeDate } from './dataFilters-fa384f64.js';\nimport { g as getDataPoints } from './getDataPoints-c53771e0.js';\nimport { D as DATA_ALIGNMENT } from './constants-9d5458e0.js';\nimport { S as StreamType } from './dataConstants-71f11842.js';\n\n/**\n * Sorts points in order of their points values.\n * Places objects with no point at the end of the list.\n */\nconst sortTooltipPoints = (attr) => (a, b) => {\n    if (a.point == null && b.point == null) {\n        return 0;\n    }\n    if (a.point == null) {\n        return -1;\n    }\n    if (b.point == null) {\n        return 1;\n    }\n    if (attr(a.point) === attr(b.point)) {\n        return 0;\n    }\n    return attr(b.point) > attr(a.point) ? 1 : -1;\n};\n\n/**\n * Closest Points\n *\n * Returns the closest point to the left, and right of a\n * given point in time..\n *\n * @param maxDistance - maximum distance, measured in terms of milliseconds. if not present, there is no max distance.\n */\nconst closestPoint = (dataPoints, date, dataAlignment, maxDistance) => {\n    const idx = pointBisector.left(dataPoints, date);\n    const leftPoint = dataPoints[idx - 1];\n    const rightPoint = dataPoints[idx];\n    /**\n     * If a point falls on our point of time, return it immediately regardless of 'data alignment'.\n     */\n    if (leftPoint && leftPoint.x === date.getTime()) {\n        return leftPoint;\n    }\n    if (rightPoint && rightPoint.x === date.getTime()) {\n        return rightPoint;\n    }\n    /** Right Alignment */\n    if (dataAlignment === DATA_ALIGNMENT.RIGHT) {\n        if (!rightPoint) {\n            return undefined;\n        }\n        if (maxDistance == null) {\n            return rightPoint;\n        }\n        return rightPoint.x - date.getTime() <= maxDistance ? rightPoint : undefined;\n    }\n    /** Left Alignment */\n    if (dataAlignment === DATA_ALIGNMENT.LEFT) {\n        if (!leftPoint) {\n            return undefined;\n        }\n        if (maxDistance == null) {\n            return leftPoint;\n        }\n        return date.getTime() - leftPoint.x <= maxDistance ? leftPoint : undefined;\n    }\n    /** Either Alignment */\n    // If only the left, or only the right point exist, go ahead and just return it.\n    if (!leftPoint || !rightPoint) {\n        return leftPoint || rightPoint;\n    }\n    // We are right bias because the interval between two points is the time span for the point on the right.\n    return rightPoint;\n};\n/**\n * Get Active Points\n *\n * Returns at most one point per data stream - for each data stream, it finds the point which is\n * 1. within the given view port\n * 2. closest to the provided `selectedDate`\n *\n * Additionally, if `allowMultipleDates` is false, it will only return the points which are the closest\n * to the `selectedDate`. i.e. if you have 10 points that are all equally distant from the `selectedDate`,\n * all 10 are returned.\n *\n * However if you have 10 points of different dates, only the closest point would be returned.\n */\nconst activePoints = ({ viewport, dataStreams, selectedDate, allowMultipleDates, dataAlignment, maxDurationFromDate, }) => {\n    const dataStreamUtilizedData = dataStreams.map(stream => ({\n        streamId: stream.id,\n        dataPoints: getDataBeforeDate(getDataPoints(stream, stream.resolution), viewport.end),\n    }));\n    const selectedTimestamp = selectedDate.getTime();\n    // Find the closest point to the selected date for each stream\n    const points = dataStreamUtilizedData.map(({ streamId, dataPoints }) => ({\n        streamId,\n        point: closestPoint(dataPoints, selectedDate, dataAlignment, maxDurationFromDate),\n    }));\n    if (allowMultipleDates) {\n        return points;\n    }\n    const distanceFromDate = (p) => Math.abs(p.x - selectedTimestamp);\n    // Sort in ascending order by there distance from the selected date\n    const sortedPoints = points.sort(sortTooltipPoints(distanceFromDate));\n    if (sortedPoints.length === 0) {\n        return [];\n    }\n    const topPoint = sortedPoints[sortedPoints.length - 1].point;\n    if (topPoint == null) {\n        // everything must be a 'blank' point\n        return sortedPoints;\n    }\n    // Filter such that only the points with a date equal to the date of the point which is closest to the selected date.\n    return sortedPoints.filter(p => p.point && p.point.x === topPoint.x);\n};\n\nconst isHigherPriority = (t1, t2) => {\n    if (t1 == null) {\n        return t2;\n    }\n    if (t1.severity == null && t2.severity == null) {\n        return t1;\n    }\n    if (t1.severity == null) {\n        return t2;\n    }\n    if (t2.severity == null) {\n        return t1;\n    }\n    return t1.severity <= t2.severity ? t1 : t2;\n};\n/**\n * Returns the most important threshold.\n *\n * The most important threshold is the visual which is most important to a user\n * This is determined via the `severity`. Lower severity means highest importance.\n *\n * If no thresholds are present with `severity`, the first threshold is returned.\n */\nconst highestPriorityThreshold = (thresholds) => {\n    return thresholds.reduce(isHigherPriority, undefined);\n};\n/**\n * returns whether the given threshold can be applied to the requested data stream.\n *\n * EXPOSED FOR TESTING\n */\nconst thresholdAppliesToDataStream = (threshold, dataStreamId) => {\n    const { dataStreamIds } = threshold;\n    if (dataStreamIds == null) {\n        return true;\n    }\n    return dataStreamIds.includes(dataStreamId);\n};\n/**\n * Returns all of the breached thresholds for any of the alarms associated with the requested data stream.\n *\n * Does NOT return them in any sort of priority order.\n *\n * EXPOSED FOR TESTING\n */\nconst breachedAlarmThresholds = ({ date, dataStream, dataStreams, thresholds, }) => {\n    const alarmStreamIds = dataStream.associatedStreams != null\n        ? dataStream.associatedStreams.filter(({ type }) => type === StreamType.ALARM).map(({ id }) => id)\n        : [];\n    const isAssociatedAlarm = (stream) => alarmStreamIds.includes(stream.id);\n    const alarmStreams = dataStreams.filter(isAssociatedAlarm);\n    // thresholds considered breech, across all alarms for the requested data stream\n    const allBreachedAlarmThresholds = alarmStreams\n        .map(stream => {\n        const alarmThresholds = thresholds.filter(threshold => thresholdAppliesToDataStream(threshold, stream.id));\n        const latestAlarmValue = closestPoint(stream.data, date, DATA_ALIGNMENT.LEFT);\n        return latestAlarmValue != null ? getBreachedThreshold(latestAlarmValue.y, alarmThresholds) : undefined;\n    })\n        .filter(isDefined);\n    return allBreachedAlarmThresholds;\n};\n/**\n * Get the highest priority breached threshold.\n *\n * NOTE: If you do not want to get alarm thresholds, simply pass in an empty array for the `dataStreams`.\n */\nconst breachedThreshold = ({ value, date, thresholds, dataStreams, dataStream, }) => {\n    const applicableThresholds = thresholds.filter(threshold => thresholdAppliesToDataStream(threshold, dataStream.id));\n    const dataThreshold = value != null ? getBreachedThreshold(value, applicableThresholds) : undefined;\n    const alarmThresholds = breachedAlarmThresholds({\n        date,\n        dataStream,\n        dataStreams,\n        thresholds,\n    });\n    return highestPriorityThreshold([dataThreshold, ...alarmThresholds].filter(isDefined));\n};\n\nexport { activePoints as a, breachedThreshold as b, closestPoint as c, sortTooltipPoints as s };\n","import { b as breachedThreshold } from './breachedThreshold-ec78e357.js';\nimport { g as getDataPoints } from './getDataPoints-c53771e0.js';\n\nconst cell = (thresholds, date, dataStreams, dataStreamId) => {\n    const stream = dataStreams.find(({ id }) => id === dataStreamId);\n    const points = stream ? getDataPoints(stream, stream.resolution) : [];\n    const value = points[points.length - 1] && points[points.length - 1].y;\n    const threshold = stream &&\n        breachedThreshold({\n            value,\n            date,\n            dataStreams,\n            dataStream: stream,\n            thresholds,\n        });\n    const { color, icon } = threshold || {};\n    return { dataStream: stream, color, icon };\n};\n/**\n * Given the business models, output the view model representation of a table row.\n */\nconst constructTableData = ({ tableColumns, dataStreams, thresholds, date, }) => {\n    const numRows = Math.max(...tableColumns.map(({ rows }) => rows.length));\n    const table = [];\n    // eslint-disable-next-line no-plusplus\n    for (let r = 0; r < numRows; r++) {\n        const row = {};\n        tableColumns.forEach(column => {\n            const dataStreamId = column.rows[r] || undefined;\n            row[column.header] = cell(thresholds, date, dataStreams, dataStreamId);\n        });\n        table.push(row);\n    }\n    return table;\n};\n/**\n * Format liveModeOnlyMessage for Table disable State display\n */\nconst formatLiveModeOnlyMessage = (liveModeOnlyMessage) => {\n    const splitIndex = liveModeOnlyMessage.indexOf('. ');\n    if (splitIndex < 0) {\n        return { msgHeader: liveModeOnlyMessage, msgSubHeader: '' };\n    }\n    const msgHeader = liveModeOnlyMessage.slice(0, splitIndex);\n    const msgSubHeader = liveModeOnlyMessage.slice(splitIndex + 2);\n    return { msgHeader, msgSubHeader };\n};\n\nexport { constructTableData as c, formatLiveModeOnlyMessage as f };\n","import { a as isMinimalStaticViewport } from './predicates-248e16b2.js';\nimport { p as parseDuration } from './time-b684d8c5.js';\nimport { b as bisector } from './bisector-ecf52045.js';\n\n// By doing the mapping to a date within the bisector\n// we eliminate the need to iterate over the entire data.\n// (As opposed to mapping entire data to an array of dates)\nconst pointBisector = bisector((p) => p.x);\n/**\n * Get Visible Data\n *\n * Returns the data points which are required for the chart to correctly render.\n * This assumes linear interpolation between points\n * TODO: Support other interpolation methods\n *\n * NOTE: It's possible to have data not in the viewport which is required for the chart to render\n * it's fully visualization correctly. For Instance, even if a point isn't visible in the viewport, it may\n * be used within interpolation to calculate a path between the points which is within the viewport.\n *\n * Different interpolation methods need larger amount of context around the viewport to correctly render\n * the chart visualization.\n */\nconst getVisibleData = (data, viewport, \n// Whether we want to include a single point to the right, and to the left of the provide viewport.\n// This is useful when rendering lines since you need to connect a point to a point outside of the viewport\n// to fully render the data correctly.\nincludeBoundaryPoints = true) => {\n    const start = isMinimalStaticViewport(viewport)\n        ? new Date(viewport.start)\n        : new Date(Date.now() - parseDuration(viewport.duration));\n    const end = isMinimalStaticViewport(viewport) ? new Date(viewport.end) : new Date();\n    // If there is no data\n    if (data.length === 0) {\n        return [];\n    }\n    // If all data is before the view port\n    if (start.getTime() > data[data.length - 1].x) {\n        return [];\n    }\n    // If all data is after the view port\n    if (end.getTime() < data[0].x) {\n        return [];\n    }\n    // Otherwise return all the data within the viewport, plus an additional single data point that falls outside of\n    // the viewport in either direction.\n    const startIndex = Math.max(pointBisector.left(data, start) - (includeBoundaryPoints ? 1 : 0), 0);\n    const endIndex = Math.min(pointBisector.right(data, end) - (includeBoundaryPoints ? 0 : 1), data.length - 1);\n    return data.slice(startIndex, endIndex + 1);\n};\n/**\n * Returns all data before or at the given date.\n *\n * Assumes data is ordered chronologically.\n */\nconst getDataBeforeDate = (data, date) => {\n    // If there is no data\n    if (data.length === 0) {\n        return [];\n    }\n    // If all data is after the view port\n    if (date.getTime() < data[0].x) {\n        return [];\n    }\n    // Otherwise return all the data within the viewport, plus an additional single data point that falls outside of\n    // the viewport in either direction.\n    const endIndex = Math.min(pointBisector.right(data, date) - 1, data.length - 1);\n    return data.slice(0, endIndex + 1);\n};\n\nexport { getVisibleData as a, getDataBeforeDate as g, pointBisector as p };\n","const DEFAULT_MESSAGE_OVERRIDES = {\n    liveTimeFrameValueLabel: 'Value',\n    historicalTimeFrameValueLabel: 'Value',\n    noDataStreamsPresentHeader: 'No properties or alarms',\n    noDataStreamsPresentSubHeader: \"This widget doesn't have any properties or alarms.\",\n    noDataPresentHeader: 'No data',\n    noDataPresentSubHeader: \"There's no data to display for this time range.\",\n    liveModeOnly: 'This visualization displays only live data. Choose a live time frame to display data in this visualization.',\n    unsupportedDataTypeHeader: 'Unable to render your data',\n    unsupportedDataTypeSubHeader: 'This chart only supports the following DataType(s):',\n    supportedTypes: 'Number, String, Boolean',\n};\n/** SVG Constants */\nconst STREAM_ICON_STROKE_LINECAP = 'round';\nconst STREAM_ICON_STROKE_WIDTH = 3;\nconst STREAM_ICON_PATH_COMMAND = 'M 2 2 H 15';\nconst TREND_ICON_DASH_ARRAY = '1, 5';\n\nexport { DEFAULT_MESSAGE_OVERRIDES as D, STREAM_ICON_STROKE_LINECAP as S, TREND_ICON_DASH_ARRAY as T, STREAM_ICON_STROKE_WIDTH as a, STREAM_ICON_PATH_COMMAND as b };\n","/**\n * Get the points for a given resolution from a data stream\n */\nconst getDataPoints = (stream, resolution) => {\n    if (resolution === 0) {\n        return stream.data;\n    }\n    if (stream.aggregates == null) {\n        return [];\n    }\n    return stream.aggregates[resolution] || [];\n};\n\nexport { getDataPoints as g };\n","import { h, r as registerInstance } from './index-1cec361c.js';\nimport { f as formatLiveModeOnlyMessage } from './constructTableData-0bdc96c5.js';\nimport { E as EmptyStatus } from './EmptyStatus-5d4f6b89.js';\nimport { D as DEFAULT_MESSAGE_OVERRIDES } from './dataTypes-7f768b75.js';\nimport './breachedThreshold-ec78e357.js';\nimport './utils-0919edc8.js';\nimport './time-b684d8c5.js';\nimport './index-b3f1c3a1.js';\nimport './predicates-248e16b2.js';\nimport './dataConstants-71f11842.js';\nimport './number-3e8376bf.js';\nimport './constants-9d5458e0.js';\nimport './bisector-ecf52045.js';\nimport './dataFilters-fa384f64.js';\nimport './getDataPoints-c53771e0.js';\nimport './terms-7b76cdf8.js';\n\nconst ScTableRows = ({ columns, rows, messageOverrides, }) => {\n    return rows.length ? (h(\"tbody\", null, rows.map(row => (h(\"tr\", null, columns.map((column, i) => {\n        const cell = row[column.header];\n        const key = cell && cell.dataStream ? `${cell.dataStream.id}-${i}` : `empty-${i}`;\n        return (h(\"td\", { key: key, id: `cell-${column.header}` },\n            h(\"sc-table-cell\", { cell: cell })));\n    })))))) : (h(\"div\", { class: \"empty-status-container\" },\n        h(EmptyStatus, { displaysNoDataPresentMsg: true, messageOverrides: messageOverrides, isLoading: false, hasNoDataPresent: true, hasNoDataStreamsPresent: true })));\n};\n\nconst scTableBaseCss = \"sc-table{--spinner-size:18px}sc-table .container{overflow-x:auto;overflow-y:scroll;position:relative;height:100%;width:100%;box-shadow:0 1px 1px 0 rgba(0, 28, 36, 0.3),\\n    1px 1px 1px 0 rgba(0, 28, 36, 0.15),\\n    -1px 1px 1px 0 rgba(0, 28, 36, 0.15);border-top:1px solid var(--awsui-color-grey-200);border-radius:0;box-sizing:border-box;-ms-overflow-style:none;scrollbar-width:none}sc-table .container::-webkit-scrollbar{display:none}sc-table table{min-width:100%;border-spacing:0;box-sizing:border-box;color:var(--secondary-font-color);background-color:#fff}sc-table .column-header-content{display:inline-block;padding:1rem;border:1px solid transparent;color:var(--primary-font-color);font-weight:700}sc-table th{position:relative;text-align:left;padding:0.3rem 1rem;border-bottom:1px solid var(--awsui-color-grey-200);box-sizing:border-box;min-height:4rem;background:var(--awsui-color-grey-100);word-break:keep-all}sc-table th:not(:first-child)::before{content:'';position:absolute;bottom:25%;height:50%;border-left:1px solid var(--awsui-color-grey-200);box-sizing:border-box}sc-table td{border-bottom:1px solid var(--awsui-color-grey-200);border-top:1px solid transparent;padding:0.4rem 2rem;box-sizing:border-box;word-wrap:break-word}sc-table td:first-child{border-left:1px solid transparent;padding-left:1.9rem;box-sizing:border-box;height:4rem}sc-table .loading-wrapper{display:flex}sc-table sc-loading-spinner{width:var(--spinner-size);height:var(--spinner-size)}sc-table .error{display:flex;align-items:end;color:red}sc-table .empty-status,.disable-status{z-index:11;display:flex;flex-direction:column;align-items:center;color:var(--light-text)}sc-table .empty-status h3{font-size:var(--font-size-3);line-height:var(--line-height-3);padding-bottom:var(--font-size-2);font-weight:normal}sc-table .disable-status h3{font-size:var(--font-size-3);line-height:var(--line-height-3);padding-bottom:var(--font-size-2);font-weight:normal}sc-table .empty-status-container,.disable-status-container{display:flex;align-items:center;justify-content:center;height:100%;width:100%;position:absolute;top:0;padding:2rem}\";\n\nconst ScTableBase = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  render() {\n    var _a, _b;\n    const { msgHeader, msgSubHeader } = formatLiveModeOnlyMessage((_b = (_a = this.messageOverrides) === null || _a === void 0 ? void 0 : _a.liveModeOnly) !== null && _b !== void 0 ? _b : DEFAULT_MESSAGE_OVERRIDES.liveModeOnly);\n    return (h(\"div\", { class: \"awsui container\" }, h(\"table\", { role: \"table\" }, h(\"thead\", null, h(\"tr\", null, this.columns.map(({ header }) => (h(\"th\", { key: header }, h(\"span\", { class: \"column-header-content\" }, header)))))), this.isEnabled ? (h(ScTableRows, { rows: this.rows, columns: this.columns, messageOverrides: this.messageOverrides })) : (h(\"div\", { class: \"disable-status-container\" }, h(\"div\", { class: \"disable-status\" }, h(\"h3\", null, msgHeader), msgSubHeader))))));\n  }\n};\nScTableBase.style = scTableBaseCss;\n\nexport { ScTableBase as sc_table_base };\n","// For use when there is a data stream, but there is no value contained within the time frame being viewed.\nconst NO_VALUE_PRESENT = '-';\n/**\n * default messages, can be overridden via `MessageOverrides` API.\n */\n/* default 'no data streams' empty state messaging */\nconst NO_DATA_STREAMS_PRESENT_HEADER = 'No properties or alarms';\nconst NO_DATA_STREAMS_PRESENT_SUB_HEADER = \"This widget doesn't have any properties or alarms.\";\n/* default 'no data' empty state messaging */\nconst NO_DATA_PRESENT_HEADER = 'No data';\nconst NO_DATA_PRESENT_SUB_HEADER = \"There's no data to display for this time range.\";\n\nexport { NO_VALUE_PRESENT as N, NO_DATA_PRESENT_HEADER as a, NO_DATA_PRESENT_SUB_HEADER as b, NO_DATA_STREAMS_PRESENT_HEADER as c, NO_DATA_STREAMS_PRESENT_SUB_HEADER as d };\n"],"names":["EmptyStatus","_ref","isLoading","hasNoDataPresent","hasNoDataStreamsPresent","messageOverrides","displaysNoDataPresentMsg","h","class","style","display","undefined","noDataStreamsPresentHeader","NO_DATA_STREAMS_PRESENT_HEADER","noDataStreamsPresentSubHeader","NO_DATA_STREAMS_PRESENT_SUB_HEADER","noDataPresentHeader","NO_DATA_PRESENT_HEADER","noDataPresentSubHeader","NO_DATA_PRESENT_SUB_HEADER","sortTooltipPoints","attr","a","b","point","closestPoint","dataPoints","date","dataAlignment","maxDistance","idx","pointBisector","left","leftPoint","rightPoint","x","getTime","DATA_ALIGNMENT","RIGHT","LEFT","activePoints","viewport","dataStreams","selectedDate","allowMultipleDates","maxDurationFromDate","dataStreamUtilizedData","map","stream","streamId","id","getDataBeforeDate","getDataPoints","resolution","end","selectedTimestamp","points","_ref2","sortedPoints","sort","p","Math","abs","length","topPoint","filter","isHigherPriority","t1","t2","severity","thresholdAppliesToDataStream","threshold","dataStreamId","dataStreamIds","includes","breachedThreshold","_ref6","value","thresholds","dataStream","applicableThresholds","dataThreshold","getBreachedThreshold","alarmThresholds","_ref3","alarmStreamIds","associatedStreams","_ref4","type","StreamType","ALARM","_ref5","latestAlarmValue","data","y","isDefined","breachedAlarmThresholds","reduce","highestPriorityThreshold","concat","_toConsumableArray","constructTableData","tableColumns","numRows","max","apply","rows","table","_loop","r","row","forEach","column","header","find","color","icon","cell","push","formatLiveModeOnlyMessage","liveModeOnlyMessage","splitIndex","indexOf","msgHeader","msgSubHeader","slice","bisector","getVisibleData","includeBoundaryPoints","arguments","start","isMinimalStaticViewport","Date","now","parseDuration","duration","startIndex","endIndex","min","right","DEFAULT_MESSAGE_OVERRIDES","liveTimeFrameValueLabel","historicalTimeFrameValueLabel","liveModeOnly","unsupportedDataTypeHeader","unsupportedDataTypeSubHeader","supportedTypes","STREAM_ICON_STROKE_LINECAP","STREAM_ICON_STROKE_WIDTH","STREAM_ICON_PATH_COMMAND","TREND_ICON_DASH_ARRAY","aggregates","ScTableRows","columns","i","key","ScTableBase","hostRef","_classCallCheck","registerInstance","this","_createClass","_a","_b","_formatLiveModeOnlyMe","role","isEnabled","NO_VALUE_PRESENT"],"sourceRoot":""}