{"version":3,"file":"static/js/2603.b91c6809.chunk.js","mappings":"4HAAA,IAAIA,EAaAC,EAMAC,EAIAC,E,8EAtBJ,SAAWH,GACPA,EAAiB,OAAI,SACrBA,EAAiB,OAAI,SACrBA,EAAkB,QAAI,SACzB,CAJD,CAIGA,IAAaA,EAAW,CAAC,IAS5B,SAAWC,GACPA,EAAkB,MAAI,QACtBA,EAAoB,QAAI,UACxBA,EAA4B,gBAAI,iBACnC,CAJD,CAIGA,IAAeA,EAAa,CAAC,IAEhC,SAAWC,GACPA,EAAmB,OAAI,mBAC1B,CAFD,CAEGA,IAAeA,EAAa,CAAC,IAEhC,SAAWC,GACPA,EAAoB,SAAI,YACxBA,EAAqB,UAAI,YAC5B,CAHD,CAGGA,IAAcA,EAAY,CAAC,G,6HCxBxBC,EAAiB,QAGjBC,EAAQ,IACRC,EAAQ,IAAIC,KAAK,KAAM,EAAG,GAC1BC,EAAQ,IAAID,KAAK,IAAM,EAAG,GAE1BE,EAAkB,CACtBC,EAAG,IAAIH,MAAMD,EAAMK,UAAYH,EAAMG,WAAa,GAAGA,UACrDC,EAAG,MAECC,EAAiB,WACrB,SAAAA,EAAYC,IAASC,EAAAA,EAAAA,GAAA,KAAAF,IACnBG,EAAAA,EAAAA,GAAiBC,KAAMH,EACzB,CAwBC,OAxBAI,EAAAA,EAAAA,GAAAL,EAAA,EAAAM,IAAA,SAAAC,MACD,WACE,OAAQC,EAAAA,EAAAA,GAAE,MAAO,CAAEC,GAAI,kBAAmBC,MAAO,CAAEC,OAAQ,sBAAuBC,OAAQ,QAASC,MAAO,WAAaL,EAAAA,EAAAA,GAAE,gBAAiB,CAAEM,SAAU,WAAYC,YAAa,CAC3K,CACEN,GAAI,OACJO,MAAO,QACPC,KAAM,cACNC,KAAM,CAACtB,GACPuB,WAAY,EACZC,SAAUjC,EAAAA,EAASkC,SAEpBC,SAAU,CAAEC,MAAO9B,EAAO+B,IAAK7B,EAAO8B,KAvBjC,EAuB8CC,KAAMlC,EAAOmC,MAAOpC,MAAqBiB,EAAAA,EAAAA,GAAE,gBAAiB,CAAEM,SAAU,WAAYC,YAAa,CACrJ,CACEN,GAAI,OACJO,MAAO,QACPC,KAAM,cACNC,KAAM,CAACtB,GACPuB,WAAY,EACZC,SAAUjC,EAAAA,EAASkC,SAEpBO,KAAM,CACPhB,OAAQ,IACRC,MAAO,KACNS,SAAU,CAAEC,MAAO9B,EAAO+B,IAAK7B,EAAO8B,KAnCjC,EAmC8CC,KAAMlC,EAAOmC,MAAOpC,MAAqBiB,EAAAA,EAAAA,GAAE,mBAAoB,MACzH,KAACR,CAAA,CA3BoB,E","sources":["../node_modules/@iot-app-kit/components/dist/esm/dataConstants-71f11842.js","../node_modules/@iot-app-kit/components/dist/esm/sc-webgl-chart-multi.entry.js"],"sourcesContent":["var DataType;\n(function (DataType) {\n    DataType[\"NUMBER\"] = \"NUMBER\";\n    DataType[\"STRING\"] = \"STRING\";\n    DataType[\"BOOLEAN\"] = \"BOOLEAN\";\n})(DataType || (DataType = {}));\n/**\n * Stream type is a classification of a `DataStream`, which contains with it additional structure and features specific\n * to the stream type.\n *\n * For example, for an alarm stream, if a stream is associated to the alarm stream, we interpret the stream as\n * representing the status for the given alarm and present alarm specific UX such as alarm status on the legend and tooltip.\n */\nvar StreamType;\n(function (StreamType) {\n    StreamType[\"ALARM\"] = \"ALARM\";\n    StreamType[\"ANOMALY\"] = \"ANOMALY\";\n    StreamType[\"ALARM_THRESHOLD\"] = \"ALARM_THRESHOLD\";\n})(StreamType || (StreamType = {}));\nvar TREND_TYPE;\n(function (TREND_TYPE) {\n    TREND_TYPE[\"LINEAR\"] = \"linear-regression\";\n})(TREND_TYPE || (TREND_TYPE = {}));\nvar ChartType;\n(function (ChartType) {\n    ChartType[\"BarChart\"] = \"bar-chart\";\n    ChartType[\"LineChart\"] = \"line-chart\";\n})(ChartType || (ChartType = {}));\n\nexport { DataType as D, StreamType as S, TREND_TYPE as T };\n","import { r as registerInstance, h } from './index-1cec361c.js';\nimport { D as DataType } from './dataConstants-71f11842.js';\n\nconst VIEWPORT_GROUP = 'group';\n// viewport boundaries\nconst Y_MIN = 0;\nconst Y_MAX = 5000;\nconst X_MIN = new Date(1998, 0, 0);\nconst X_MAX = new Date(2000, 0, 1);\n// test data point dead center of the viewport\nconst TEST_DATA_POINT = {\n  x: new Date((X_MIN.getTime() + X_MAX.getTime()) / 2).getTime(),\n  y: (Y_MIN + Y_MAX) / 2,\n};\nconst ScWebglChartMulti = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  render() {\n    return (h(\"div\", { id: \"chart-container\", style: { border: '1px solid lightgray', height: '500px', width: '500px' } }, h(\"sc-line-chart\", { widgetId: \"widget-a\", dataStreams: [\n        {\n          id: 'test',\n          color: 'black',\n          name: 'test stream',\n          data: [TEST_DATA_POINT],\n          resolution: 0,\n          dataType: DataType.NUMBER,\n        },\n      ], viewport: { start: X_MIN, end: X_MAX, yMin: Y_MIN, yMax: Y_MAX, group: VIEWPORT_GROUP } }), h(\"sc-line-chart\", { widgetId: \"widget-b\", dataStreams: [\n        {\n          id: 'test',\n          color: 'black',\n          name: 'test stream',\n          data: [TEST_DATA_POINT],\n          resolution: 0,\n          dataType: DataType.NUMBER,\n        },\n      ], size: {\n        height: 150,\n        width: 500,\n      }, viewport: { start: X_MIN, end: X_MAX, yMin: Y_MIN, yMax: Y_MAX, group: VIEWPORT_GROUP } }), h(\"sc-webgl-context\", null)));\n  }\n};\n\nexport { ScWebglChartMulti as sc_webgl_chart_multi };\n"],"names":["DataType","StreamType","TREND_TYPE","ChartType","VIEWPORT_GROUP","Y_MAX","X_MIN","Date","X_MAX","TEST_DATA_POINT","x","getTime","y","ScWebglChartMulti","hostRef","_classCallCheck","registerInstance","this","_createClass","key","value","h","id","style","border","height","width","widgetId","dataStreams","color","name","data","resolution","dataType","NUMBER","viewport","start","end","yMin","yMax","group","size"],"sourceRoot":""}