{"version":3,"file":"static/js/3221.a42c2750.chunk.js","mappings":"oLA4DMA,EA1DyB,SAACC,EAAcC,GAC1C,IAAIC,EAAY,IAAIC,IAChBC,EAAeJ,EACbK,EAAiB,SAACC,EAAQC,GACxBC,MAAMC,QAAQH,IACdI,EAAAA,EAAAA,GAAIJ,GAAQK,SAAQ,SAAAC,GAChBL,EAASK,GAAaR,EAAaQ,EACvC,IAGAL,EAASD,GAAUO,OAAOC,OAAO,CAAC,EAAGV,EAE7C,EACMW,EAAY,SAACR,EAAUS,GAKzB,OAJKd,EAAUe,IAAIV,KACfL,EAAUgB,IAAIX,EAAUS,GACxBX,EAAeW,EAAUT,IAEtB,WACCL,EAAUe,IAAIV,IACdL,EAAUiB,OAAOZ,EAEzB,CACJ,EA4BA,MAAO,CACHa,SA5Ba,SAAHC,EAAeC,GAAa,IAAtBC,EAAKF,EAALE,MAGhB,OAFAnB,EAAemB,EACfrB,EAAUS,QAAQN,GACXiB,CACX,EAyBIE,SAxBa,SAACC,EAAOH,GAGrB,OAAOrB,EAAec,EAAWO,EAAS,GAC9C,EAqBII,YApBgB,SAACC,EAAMC,GACvB,IAAMC,EAAgBF,EAAKG,UACrBC,EAAwBF,EAAcG,kBACtCC,EAA2BJ,EAAcK,qBAC/CL,EAAcG,kBAAoB,WAE9B,GADAjB,EAAUoB,KAAMP,GACZG,EACA,OAAOA,EAAsBK,KAAKD,KAE1C,EACAN,EAAcK,qBAAuB,WACjChC,EAAUiB,OAAOgB,MACbF,GACAA,EAAyBG,KAAKD,KAEtC,CACJ,EAMJ,CAEqBE,CAAuB,CACxCC,YAAa,UACbC,SAAU,CACNC,SAAU,GACVC,MAAO,CAAC,EACRC,IAAK,IAETC,YAAa,GACbC,KAAM,IACNC,kBAAmB,WAAQ,IAC5B,SAAC9B,EAAW+B,GAAK,OAAMC,EAAAA,EAAAA,GAAE,mBAAoB,CAAEhC,UAAWA,EAAWiC,SAAUF,GAAQ,G,4HCnEpFG,EAAU,WACd,SAAAA,EAAYC,IAASC,EAAAA,EAAAA,GAAA,KAAAF,IACnBG,EAAAA,EAAAA,GAAiBjB,KAAMe,GACvBf,KAAKQ,YAAc,GACnBR,KAAKkB,UAAY,EACnB,CAaI,OAbHC,EAAAA,EAAAA,GAAAL,EAAA,EAAAP,IAAA,sBAAAa,MACD,WACE,IAAMC,EAAKrB,KAAKqB,GACZA,EAAGC,gBACLD,EAAGC,cAAcC,MAAQ,GAAHC,OAAMxB,KAAKkB,WAASM,OAAGxB,KAAKQ,aAAe,IAErE,GAAC,CAAAD,IAAA,oBAAAa,MACD,WACEpB,KAAKyB,qBACP,GAAC,CAAAlB,IAAA,KAAAmB,IACD,WAAW,OAAOC,EAAAA,EAAAA,GAAW3B,KAAO,IAAC,EAAAO,IAAA,WAAAmB,IACrC,WAAwB,MAAO,CAC7B,UAAa,CAAC,uBACb,KAACZ,CAAA,CAlBU,GAoBhBlD,EAAAA,EAAa2B,YAAYuB,EAAY,CACnC,e","sources":["../node_modules/@iot-app-kit/components/dist/esm/active-router-8f9f6b80.js","../node_modules/@iot-app-kit/components/dist/esm/stencil-route-title.entry.js"],"sourcesContent":["import { h } from './index-1cec361c.js';\n\nconst createProviderConsumer = (defaultState, consumerRender) => {\r\n    let listeners = new Map();\r\n    let currentState = defaultState;\r\n    const updateListener = (fields, instance) => {\r\n        if (Array.isArray(fields)) {\r\n            [...fields].forEach(fieldName => {\r\n                instance[fieldName] = currentState[fieldName];\r\n            });\r\n        }\r\n        else {\r\n            instance[fields] = Object.assign({}, currentState);\r\n        }\r\n    };\r\n    const subscribe = (instance, propList) => {\r\n        if (!listeners.has(instance)) {\r\n            listeners.set(instance, propList);\r\n            updateListener(propList, instance);\r\n        }\r\n        return () => {\r\n            if (listeners.has(instance)) {\r\n                listeners.delete(instance);\r\n            }\r\n        };\r\n    };\r\n    const Provider = ({ state }, children) => {\r\n        currentState = state;\r\n        listeners.forEach(updateListener);\r\n        return children;\r\n    };\r\n    const Consumer = (props, children) => {\r\n        // The casting on subscribe is to allow for crossover through the stencil compiler\r\n        // In the future we should allow for generics in components.\r\n        return consumerRender(subscribe, children[0]);\r\n    };\r\n    const injectProps = (Cstr, fieldList) => {\r\n        const CstrPrototype = Cstr.prototype;\r\n        const cstrConnectedCallback = CstrPrototype.connectedCallback;\r\n        const cstrDisconnectedCallback = CstrPrototype.disconnectedCallback;\r\n        CstrPrototype.connectedCallback = function () {\r\n            subscribe(this, fieldList);\r\n            if (cstrConnectedCallback) {\r\n                return cstrConnectedCallback.call(this);\r\n            }\r\n        };\r\n        CstrPrototype.disconnectedCallback = function () {\r\n            listeners.delete(this);\r\n            if (cstrDisconnectedCallback) {\r\n                cstrDisconnectedCallback.call(this);\r\n            }\r\n        };\r\n    };\r\n    return {\r\n        Provider,\r\n        Consumer,\r\n        injectProps\r\n    };\r\n};\n\nconst ActiveRouter = createProviderConsumer({\r\n    historyType: 'browser',\r\n    location: {\r\n        pathname: '',\r\n        query: {},\r\n        key: ''\r\n    },\r\n    titleSuffix: '',\r\n    root: '/',\r\n    routeViewsUpdated: () => { }\r\n}, (subscribe, child) => (h(\"context-consumer\", { subscribe: subscribe, renderer: child })));\n\nexport { ActiveRouter as A };\n","import { r as registerInstance, g as getElement } from './index-1cec361c.js';\nimport { A as ActiveRouter } from './active-router-8f9f6b80.js';\n\nconst RouteTitle = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.titleSuffix = '';\n    this.pageTitle = '';\n  }\n  updateDocumentTitle() {\n    const el = this.el;\n    if (el.ownerDocument) {\n      el.ownerDocument.title = `${this.pageTitle}${this.titleSuffix || ''}`;\n    }\n  }\n  componentWillLoad() {\n    this.updateDocumentTitle();\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"pageTitle\": [\"updateDocumentTitle\"]\n  }; }\n};\nActiveRouter.injectProps(RouteTitle, [\n  'titleSuffix',\n]);\n\nexport { RouteTitle as stencil_route_title };\n"],"names":["ActiveRouter","defaultState","consumerRender","listeners","Map","currentState","updateListener","fields","instance","Array","isArray","_toConsumableArray","forEach","fieldName","Object","assign","subscribe","propList","has","set","delete","Provider","_ref","children","state","Consumer","props","injectProps","Cstr","fieldList","CstrPrototype","prototype","cstrConnectedCallback","connectedCallback","cstrDisconnectedCallback","disconnectedCallback","this","call","createProviderConsumer","historyType","location","pathname","query","key","titleSuffix","root","routeViewsUpdated","child","h","renderer","RouteTitle","hostRef","_classCallCheck","registerInstance","pageTitle","_createClass","value","el","ownerDocument","title","concat","updateDocumentTitle","get","getElement"],"sourceRoot":""}