{"version":3,"file":"static/js/7142.f35a8777.chunk.js","mappings":"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","sources":["../node_modules/@iot-app-kit/components/dist/esm/bisector-ecf52045.js","../node_modules/@iot-app-kit/components/dist/esm/constants-9d5458e0.js","../node_modules/@iot-app-kit/components/dist/esm/dataConstants-71f11842.js","../node_modules/@iot-app-kit/components/dist/esm/index-b3f1c3a1.js","../node_modules/@iot-app-kit/components/dist/esm/number-3e8376bf.js","../node_modules/@iot-app-kit/components/dist/esm/predicates-248e16b2.js","../node_modules/@iot-app-kit/components/dist/esm/time-b684d8c5.js","../node_modules/@iot-app-kit/components/dist/esm/utils-0919edc8.js"],"sourcesContent":["function ascending(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n\nfunction bisector(f) {\n  let delta = f;\n  let compare = f;\n\n  if (f.length === 1) {\n    delta = (d, x) => f(d) - x;\n    compare = ascendingComparator(f);\n  }\n\n  function left(a, x, lo, hi) {\n    if (lo == null) lo = 0;\n    if (hi == null) hi = a.length;\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1;\n      if (compare(a[mid], x) < 0) lo = mid + 1;\n      else hi = mid;\n    }\n    return lo;\n  }\n\n  function right(a, x, lo, hi) {\n    if (lo == null) lo = 0;\n    if (hi == null) hi = a.length;\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1;\n      if (compare(a[mid], x) > 0) hi = mid;\n      else lo = mid + 1;\n    }\n    return lo;\n  }\n\n  function center(a, x, lo, hi) {\n    if (lo == null) lo = 0;\n    if (hi == null) hi = a.length;\n    const i = left(a, x, lo, hi - 1);\n    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;\n  }\n\n  return {left, center, right};\n}\n\nfunction ascendingComparator(f) {\n  return (d, x) => ascending(f(d), x);\n}\n\nexport { ascending as a, bisector as b };\n","// NOTE: `enum`s are held separately from the types which are exported\n// as part of the package, since `enum`'s cannot be present in a type declaration file.\n// THis is due to an `enum` being a type plus an implementation, while type declaration\n// files can only contain typing information.\n/**\n * Maps the view model to d3 axis types. In the future we could add additional\n * custom scale types beyond what's available in `d3-axis`.\n */\nvar ScaleType;\n(function (ScaleType) {\n    ScaleType[\"TimeSeries\"] = \"time-series\";\n    ScaleType[\"Log\"] = \"log\";\n    ScaleType[\"Linear\"] = \"linear\";\n})(ScaleType || (ScaleType = {}));\nvar LEGEND_POSITION;\n(function (LEGEND_POSITION) {\n    LEGEND_POSITION[\"RIGHT\"] = \"RIGHT\";\n    LEGEND_POSITION[\"BOTTOM\"] = \"BOTTOM\";\n})(LEGEND_POSITION || (LEGEND_POSITION = {}));\nvar COMPARISON_OPERATOR;\n(function (COMPARISON_OPERATOR) {\n    COMPARISON_OPERATOR[\"LESS_THAN\"] = \"LT\";\n    COMPARISON_OPERATOR[\"GREATER_THAN\"] = \"GT\";\n    COMPARISON_OPERATOR[\"LESS_THAN_EQUAL\"] = \"LTE\";\n    COMPARISON_OPERATOR[\"GREATER_THAN_EQUAL\"] = \"GTE\";\n    COMPARISON_OPERATOR[\"EQUAL\"] = \"EQ\";\n    COMPARISON_OPERATOR[\"CONTAINS\"] = \"CONTAINS\";\n})(COMPARISON_OPERATOR || (COMPARISON_OPERATOR = {}));\nconst COMPARATOR_MAP = {\n    GTE: '>=',\n    GT: '>',\n    LTE: '<=',\n    LT: '<',\n    EQ: '=',\n};\nvar StatusIcon;\n(function (StatusIcon) {\n    StatusIcon[\"ERROR\"] = \"error\";\n    StatusIcon[\"ACTIVE\"] = \"active\";\n    StatusIcon[\"NORMAL\"] = \"normal\";\n    StatusIcon[\"ACKNOWLEDGED\"] = \"acknowledged\";\n    StatusIcon[\"SNOOZED\"] = \"snoozed\";\n    StatusIcon[\"DISABLED\"] = \"disabled\";\n    StatusIcon[\"LATCHED\"] = \"latched\";\n})(StatusIcon || (StatusIcon = {}));\nvar DATA_ALIGNMENT;\n(function (DATA_ALIGNMENT) {\n    DATA_ALIGNMENT[\"EITHER\"] = \"EITHER\";\n    DATA_ALIGNMENT[\"RIGHT\"] = \"RIGHT\";\n    DATA_ALIGNMENT[\"LEFT\"] = \"LEFT\";\n})(DATA_ALIGNMENT || (DATA_ALIGNMENT = {}));\n\nexport { COMPARISON_OPERATOR as C, DATA_ALIGNMENT as D, LEGEND_POSITION as L, StatusIcon as S, COMPARATOR_MAP as a, ScaleType as b };\n","var DataType;\n(function (DataType) {\n    DataType[\"NUMBER\"] = \"NUMBER\";\n    DataType[\"STRING\"] = \"STRING\";\n    DataType[\"BOOLEAN\"] = \"BOOLEAN\";\n})(DataType || (DataType = {}));\n/**\n * Stream type is a classification of a `DataStream`, which contains with it additional structure and features specific\n * to the stream type.\n *\n * For example, for an alarm stream, if a stream is associated to the alarm stream, we interpret the stream as\n * representing the status for the given alarm and present alarm specific UX such as alarm status on the legend and tooltip.\n */\nvar StreamType;\n(function (StreamType) {\n    StreamType[\"ALARM\"] = \"ALARM\";\n    StreamType[\"ANOMALY\"] = \"ANOMALY\";\n    StreamType[\"ALARM_THRESHOLD\"] = \"ALARM_THRESHOLD\";\n})(StreamType || (StreamType = {}));\nvar TREND_TYPE;\n(function (TREND_TYPE) {\n    TREND_TYPE[\"LINEAR\"] = \"linear-regression\";\n})(TREND_TYPE || (TREND_TYPE = {}));\nvar ChartType;\n(function (ChartType) {\n    ChartType[\"BarChart\"] = \"bar-chart\";\n    ChartType[\"LineChart\"] = \"line-chart\";\n})(ChartType || (ChartType = {}));\n\nexport { DataType as D, StreamType as S, TREND_TYPE as T };\n","let durationRE = /(-?(?:\\d+\\.?\\d*|\\d*\\.?\\d+)(?:e[-+]?\\d+)?)\\s*([\\p{L}]*)/uig;\r\n\r\n\r\n/**\r\n * conversion ratios\r\n */\r\n\r\nparse.nanosecond =\r\nparse.ns = 1 / 1e6;\r\n\r\nparse['µs'] =\r\nparse['μs'] =\r\nparse.us =\r\nparse.microsecond = 1 / 1e3;\r\n\r\nparse.millisecond =\r\nparse.ms =\r\nparse[''] = 1;\r\n\r\nparse.second =\r\nparse.sec =\r\nparse.s = parse.ms * 1000;\r\n\r\nparse.minute =\r\nparse.min =\r\nparse.m = parse.s * 60;\r\n\r\nparse.hour =\r\nparse.hr =\r\nparse.h = parse.m * 60;\r\n\r\nparse.day =\r\nparse.d = parse.h * 24;\r\n\r\nparse.week =\r\nparse.wk =\r\nparse.w = parse.d * 7;\r\n\r\nparse.month =\r\nparse.b =\r\nparse.d * (365.25 / 12);\r\n\r\nparse.year =\r\nparse.yr =\r\nparse.y = parse.d * 365.25;\r\n\r\n/**\r\n * convert `str` to ms\r\n *\r\n * @param {String} str\r\n * @param {String} format\r\n * @return {Number}\r\n */\r\n\r\nfunction parse(str='', format='ms'){\r\n  var result = null;\r\n  // ignore commas/placeholders\r\n  str = (str+'').replace(/(\\d)[,_](\\d)/g, '$1$2');\r\n  str.replace(durationRE, function(_, n, units){\r\n    units = unitRatio(units);\r\n    if (units) result = (result || 0) + parseFloat(n, 10) * units;\r\n  });\r\n\r\n  return result && (result / (unitRatio(format) || 1))\r\n}\r\n\r\nfunction unitRatio(str) {\r\n  return parse[str] || parse[str.toLowerCase().replace(/s$/, '')]\r\n}\n\nexport { parse as p };\n","const MAX_PRECISION = 4;\n/**\n * Rounds a number to a pre-determined precision\n *\n * i.e. round(100000.1234) => 100000.1234\n *      round(100000.12345678) => 100000.1234\n *      round(.02345678) => 0.02346\n */\nconst round = (num) => {\n    if (Number.isNaN(num) || num === Infinity || num === -Infinity) {\n        return num;\n    }\n    if (Math.abs(num) < 1) {\n        return Number(num.toPrecision(MAX_PRECISION));\n    }\n    const integer = Math.trunc(num);\n    const decimal = num - integer;\n    return Number((integer + Number(decimal.toFixed(MAX_PRECISION))).toFixed(MAX_PRECISION));\n};\n/**\n * Checks if value can be used as a number\n */\nconst isNumeric = (value) => /^(\\+|-)?(Infinity|\\d+)(\\.\\d+)?e?((\\+|-)?\\d+)?$/.test(String(value));\n\nexport { isNumeric as i, round as r };\n","import { D as DataType } from './dataConstants-71f11842.js';\n\nconst isDefined = (value) => value != null;\nconst isValid = (predicate) => (t) => predicate(t);\n// As of now, we only check if the current component supports string or not.\nconst isSupportedDataType = (supportsString) => ({ dataType }) => (supportsString && dataType === DataType.STRING) || dataType !== DataType.STRING;\nconst isNumberDataStream = (stream) => stream.dataType === DataType.NUMBER;\nconst isNumber = (val) => typeof val === 'number';\nconst isMinimalStaticViewport = (viewport) => 'start' in viewport && 'end' in viewport;\n\nexport { isMinimalStaticViewport as a, isNumberDataStream as b, isDefined as c, isSupportedDataType as d, isNumber as e, isValid as i };\n","import { p as parse } from './index-b3f1c3a1.js';\n\nconst SECOND_IN_MS = 1000;\nconst MINUTE_IN_MS = 60 * SECOND_IN_MS;\nconst HOUR_IN_MS = 60 * MINUTE_IN_MS;\nconst DAY_IN_MS = 24 * HOUR_IN_MS;\n// Not precisely accurate, only estimates. exact duration depends on start date. use with care.\nconst MONTH_IN_MS = 30 * DAY_IN_MS;\nconst YEAR_IN_MS = 12 * MONTH_IN_MS;\n/**\n * ConvertMS is a helper function that will take in milliseconds and convert it to the highest detonator\n * and does not return the \"remainder\"\n *\n * It is important to note that the object returning does not represent equivalence!\n *\n * For Example:\n * convert(MINUTE_IN_MS) will return:\n * {\n *   day: 0,\n *   hour: 0\n *   minute: 1,\n *   seconds: 0,\n * }\n *\n * IT DOES NOT RETURN:\n *\n * {\n *   day: 0,\n *   hour: 0,\n *   minute: 1,\n *   seconds: 60, <--- does not return the \"equivalence\"\n * }\n */\nconst convertMS = (milliseconds) => {\n    if (milliseconds < 0) {\n        throw new Error('Time cannot be negative!');\n    }\n    let seconds = Math.floor(milliseconds / 1000);\n    let minute = Math.floor(seconds / 60);\n    let hour = Math.floor(minute / 60);\n    const day = Math.floor(hour / 24);\n    seconds %= 60;\n    minute %= 60;\n    hour %= 24;\n    return {\n        day,\n        hour,\n        minute,\n        seconds,\n    };\n};\nconst displayDate = (date, resolution, { start, end }) => {\n    const viewportDurationMS = end.getTime() - start.getTime();\n    if (resolution < HOUR_IN_MS) {\n        if (viewportDurationMS < MINUTE_IN_MS) {\n            return date.toLocaleString('en-US', {\n                minute: 'numeric',\n                second: 'numeric',\n            });\n        }\n        if (viewportDurationMS <= 10 * MINUTE_IN_MS) {\n            return date.toLocaleString('en-US', {\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n                hour12: true,\n            });\n        }\n        if (viewportDurationMS <= HOUR_IN_MS) {\n            return date.toLocaleString('en-US', {\n                hour: 'numeric',\n                minute: 'numeric',\n                hour12: true,\n            });\n        }\n        if (viewportDurationMS <= DAY_IN_MS) {\n            return date.toLocaleString('en-US', {\n                hour12: true,\n                hour: 'numeric',\n                month: 'numeric',\n                minute: 'numeric',\n                day: 'numeric',\n            });\n        }\n        if (viewportDurationMS <= MONTH_IN_MS) {\n            return date.toLocaleString('en-US', {\n                hour12: true,\n                hour: 'numeric',\n                year: 'numeric',\n                month: 'numeric',\n                day: 'numeric',\n            });\n        }\n        return date.toLocaleString('en-US', {\n            day: 'numeric',\n            month: 'numeric',\n            year: 'numeric',\n        });\n    }\n    if (resolution <= HOUR_IN_MS) {\n        return date.toLocaleString('en-US', {\n            hour: 'numeric',\n            day: 'numeric',\n            month: 'numeric',\n            hour12: true,\n        });\n    }\n    if (resolution < DAY_IN_MS) {\n        return date.toLocaleString('en-US', {\n            day: 'numeric',\n            month: 'numeric',\n        });\n    }\n    return date.toLocaleString('en-US', {\n        year: 'numeric',\n        month: 'numeric',\n        day: 'numeric',\n    });\n};\nconst parseDuration = (duration) => {\n    if (typeof duration === 'number') {\n        return duration;\n    }\n    const parsedTime = parse(duration, 'ms');\n    // if duration is a string but we cannot parse it, we default to 10 mins.\n    return parsedTime != null ? parsedTime : 10 * MINUTE_IN_MS;\n};\n\nexport { DAY_IN_MS as D, HOUR_IN_MS as H, MINUTE_IN_MS as M, SECOND_IN_MS as S, YEAR_IN_MS as Y, MONTH_IN_MS as a, convertMS as c, displayDate as d, parseDuration as p };\n","import { d as displayDate } from './time-b684d8c5.js';\nimport { i as isValid } from './predicates-248e16b2.js';\nimport { i as isNumeric } from './number-3e8376bf.js';\nimport { a as COMPARATOR_MAP, C as COMPARISON_OPERATOR } from './constants-9d5458e0.js';\nimport { b as bisector } from './bisector-ecf52045.js';\n\nvar __rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n/**\n * Returns only thresholds defined for number\n * @param thresholds\n */\nconst getNumberThresholds = (thresholds) => thresholds.filter(threshold => isNumeric(threshold.value));\n/**\n * Returns only annotations defined for numbers\n * @param annotations\n */\nconst getNumberAnnotations = (annotations) => {\n    const yAnnotations = annotations && Array.isArray(annotations.y) && annotations.y;\n    if (!yAnnotations) {\n        return annotations;\n    }\n    const numberAnnotations = yAnnotations.filter(annotation => isNumeric(annotation.value));\n    if (numberAnnotations.length < 1) {\n        const annotationProps = __rest(annotations, [\"y\"]);\n        return annotationProps;\n    }\n    return Object.assign(Object.assign({}, annotations), { y: numberAnnotations });\n};\n/**\n * Returns an array of the higher priority thresholds.\n *\n * If there is only one threshold with the higher priority severity, returns an\n * array with just that one threshold.\n *\n * If there are multiple thresholds with the same higher priority threshold,\n * returns an array with those thresholds.\n *\n * @param {Array.<Threshold>} t1Array\n * @param {Threshold} t2\n * @returns {Array.<Threshold>}\n */\nconst isHigherPriorityThresholds = (t1Array, t2) => {\n    var _a;\n    const t1Severity = (_a = t1Array[0]) === null || _a === void 0 ? void 0 : _a.severity;\n    const t2Severity = t2.severity;\n    const t2Array = [t2];\n    // If no highest priority thresholds yet, return t2 in array.\n    if (t1Array.length === 0) {\n        return t2Array;\n    }\n    // If no severity declared OR same severity level, return t1 array with t2 added.\n    if ((t1Severity == null && t2Severity == null) || t1Severity === t2Severity) {\n        t1Array.push(t2);\n        return t1Array;\n    }\n    // If only t2 severity is declared, return t2 in an array.\n    if (t1Severity == null) {\n        return t2Array;\n    }\n    // If only t1 severity is declared, return t1 array.\n    if (t2Severity == null) {\n        return t1Array;\n    }\n    // If t1 severity is higher priority, return t1 array.\n    // If t2 severity is higher priority, return new array with t2.\n    return t1Severity < t2Severity ? t1Array : t2Array;\n};\n/**\n * Returns an array with the most important thresholds.\n *\n * The most important thresholds are the visuals which are most important to a user\n * This is determined via the `severity`. Lower severity means highest importance.\n *\n * If no thresholds are present with `severity`, an array with all thresholds is returned.\n *\n * @param {Array.<Threshold>} thresholds\n * @returns {Array.<Threshold>}\n */\nconst highestPriorityThresholds = (thresholds) => {\n    return thresholds.reduce(isHigherPriorityThresholds, []);\n};\nconst formatValueString = (thresholdValue) => {\n    const upperLimit = 99999;\n    const lowerLimit = -9999;\n    const lowerBound = 0.001;\n    const digits = 5;\n    const limit = 4;\n    // Handle large numbers greater than 5 digits --> exponential\n    if (thresholdValue > upperLimit || thresholdValue < lowerLimit) {\n        return thresholdValue.toExponential(digits - limit).toString();\n    }\n    // Handle small numbers with a large number of decimal places --> exponential\n    if ((thresholdValue < lowerBound && thresholdValue > 0) || (thresholdValue > -lowerBound && thresholdValue < 0)) {\n        return thresholdValue.toExponential(digits - limit).toString();\n    }\n    // All other numbers\n    return thresholdValue.toString().length > digits\n        ? thresholdValue.toString().substr(0, digits)\n        : thresholdValue.toString();\n};\nconst valueDisplayText = ({ value, resolution, viewport, formatText, }) => {\n    if (typeof value === 'number') {\n        if (formatText) {\n            return formatValueString(value);\n        }\n        return value.toString();\n    }\n    if (typeof value === 'string') {\n        return value;\n    }\n    if (typeof value === 'boolean') {\n        return String(value);\n    }\n    return displayDate(value, resolution, viewport);\n};\n/**\n * Getters\n */\nconst getColor = (annotation) => annotation.color;\nconst getValueAndText = ({ annotation, resolution, viewport, }) => {\n    const valueText = annotation.showValue\n        ? valueDisplayText({ value: annotation.value, resolution, viewport, formatText: false })\n        : null;\n    const labelText = annotation.label && annotation.label.show ? annotation.label.text : null;\n    if (labelText && valueText) {\n        return `${labelText} (${valueText})`;\n    }\n    if (!valueText && labelText) {\n        return labelText;\n    }\n    if (!labelText && valueText) {\n        return `(${valueText})`;\n    }\n    return '';\n};\nconst getText = (annotation) => {\n    const labelText = annotation.label && annotation.label.show ? annotation.label.text : null;\n    if (labelText) {\n        return `${labelText}`;\n    }\n    return '';\n};\nconst getLabelTextVisibility = (annotation) => {\n    if (annotation.label && annotation.label.show) {\n        return 'inline';\n    }\n    return 'none';\n};\nconst getValueTextVisibility = (annotation) => {\n    if (annotation.showValue) {\n        return 'inline';\n    }\n    return 'none';\n};\nconst getValueAndTextVisibility = (annotation) => {\n    const showValueText = annotation.showValue;\n    const showLabelText = annotation.label && annotation.label.show;\n    if (showValueText || showLabelText) {\n        return 'inline';\n    }\n    return 'none';\n};\nconst getValueText = ({ annotation, resolution, viewport, formatText, }) => {\n    var _a;\n    const valueText = annotation.showValue\n        ? valueDisplayText({ value: annotation.value, resolution, viewport, formatText })\n        : null;\n    // Add comparison operator with trailing space if it's a threshold\n    const comparisonOperator = 'comparisonOperator' in annotation ? `${(_a = COMPARATOR_MAP[annotation.comparisonOperator]) !== null && _a !== void 0 ? _a : ''} ` : '';\n    if (valueText) {\n        return `${comparisonOperator}${valueText}`;\n    }\n    return '';\n};\nconst isThresholdBreached = (value, threshold) => {\n    const dataStreamValue = isNumeric(value) ? Number(value) : value;\n    const thresholdValue = isNumeric(threshold.value) ? Number(threshold.value) : threshold.value;\n    const thresholdComparison = threshold.comparisonOperator;\n    if (typeof dataStreamValue === 'number' && typeof thresholdValue === 'number') {\n        switch (thresholdComparison) {\n            case COMPARISON_OPERATOR.GREATER_THAN:\n                return dataStreamValue > thresholdValue;\n            case COMPARISON_OPERATOR.GREATER_THAN_EQUAL:\n                return dataStreamValue >= thresholdValue;\n            case COMPARISON_OPERATOR.LESS_THAN:\n                return dataStreamValue < thresholdValue;\n            case COMPARISON_OPERATOR.LESS_THAN_EQUAL:\n                return dataStreamValue <= thresholdValue;\n            case COMPARISON_OPERATOR.EQUAL:\n                return dataStreamValue === thresholdValue;\n            default:\n                throw new Error(`Unsupported number threshold comparison operator: ${thresholdComparison}`);\n        }\n    }\n    if (typeof dataStreamValue === 'string' && typeof thresholdValue === 'string') {\n        if (thresholdComparison === COMPARISON_OPERATOR.EQUAL) {\n            return dataStreamValue === thresholdValue;\n        }\n        if (thresholdComparison === COMPARISON_OPERATOR.CONTAINS) {\n            return dataStreamValue.includes(thresholdValue);\n        }\n        throw new Error(`Unsupported string threshold comparison operator: ${thresholdComparison}`);\n    }\n    if (typeof dataStreamValue === 'string' && Array.isArray(thresholdValue)) {\n        if (thresholdComparison === COMPARISON_OPERATOR.EQUAL || thresholdComparison === COMPARISON_OPERATOR.CONTAINS) {\n            return thresholdValue.some(thresholdString => {\n                return dataStreamValue.includes(thresholdString);\n            });\n        }\n        throw new Error(`Unsupported string array threshold comparison operator: ${thresholdComparison}`);\n    }\n    if (typeof dataStreamValue === 'boolean' && typeof thresholdValue === 'boolean') {\n        if (thresholdComparison === COMPARISON_OPERATOR.EQUAL) {\n            return dataStreamValue === thresholdValue;\n        }\n        throw new Error(`Unsupported boolean threshold comparison operator: ${thresholdComparison}`);\n    }\n    return false;\n};\nconst thresholdBisector = bisector((threshold) => threshold.value).left;\n/**\n * This a map of comparison operator to order. The higher the order means higher the precedence.\n */\nconst operatorOrder = {\n    [COMPARISON_OPERATOR.LESS_THAN_EQUAL]: 1,\n    [COMPARISON_OPERATOR.LESS_THAN]: 2,\n    [COMPARISON_OPERATOR.GREATER_THAN_EQUAL]: 3,\n    [COMPARISON_OPERATOR.GREATER_THAN]: 4,\n    [COMPARISON_OPERATOR.EQUAL]: 5,\n};\n/**\n * Given a list of thresholds, we sort the by the value of the threshold from least to greatest and\n * by the comparators order from least to greatest\n *\n * In the event of multiple thresholds with the same value, the threshold with the highest order will be the\n * one that takes precedence, and other rules colliding will be ignored.\n *\n * Below is an example of sorted threshold:\n *   2 2  2 2     5 5  5 5\n *  >= > <= <    >= > <= <\n */\nconst sortThreshold = (thresholds) => [...thresholds].sort((a, b) => {\n    if (a.value === b.value) {\n        return operatorOrder[a.comparisonOperator] - operatorOrder[b.comparisonOperator];\n    }\n    // TODO: Fix this to work for all cases. value is not always a number or comparing to the same type\n    return a.value - b.value;\n});\n/**\n * Gets the most relevant threshold which is considered breached by a given value.\n *\n * The most relevant threshold to a point is determined by the threshold value and its comparator.\n *\n * When there are two or more relevant thresholds to a point,\n *\n * 1) When the value is positive, then we will take the upper threshold, which is the greater one\n *\n * 2) When the value is negative, then we will take the lower threshold, which is the lesser one.\n */\nconst getBreachedThreshold = (value, thresholds) => {\n    if (thresholds.length === 0) {\n        return undefined;\n    }\n    if (typeof value === 'string' || typeof value === 'boolean') {\n        return thresholds.find(threshold => isThresholdBreached(value, threshold)) || undefined;\n    }\n    /**\n     * Filter by breached thresholds to remove the 'band' feature as the default.\n     *\n     * https://github.com/awslabs/synchro-charts/issues/153\n     *\n     * TO-DO: Add the 'in between operator' feature as one of the operator selections to consider\n     * breached data points in between 2 thresholds.\n     */\n    const breachedThresholds = thresholds.filter(threshold => isThresholdBreached(value, threshold));\n    // Only consider the highest severity breached thresholds.\n    const highestSeverityThresholds = highestPriorityThresholds(breachedThresholds);\n    const numberThresholds = getNumberThresholds(highestSeverityThresholds);\n    const sortedThresholds = sortThreshold(numberThresholds);\n    const idx = thresholdBisector(sortedThresholds, value);\n    let annotationLeft = sortedThresholds[idx - 1];\n    let annotationRight = sortedThresholds[idx];\n    // Special case when the idx is exactly the array length and that the last two thresholds are of the same value\n    if (idx === numberThresholds.length &&\n        numberThresholds.length > 1 &&\n        sortedThresholds[idx - 1].value === sortedThresholds[idx - 2].value) {\n        annotationLeft = sortedThresholds[idx - 2];\n        annotationRight = sortedThresholds[idx - 1];\n    }\n    // Special case when the idx is at 0 and that the first two values are of the same value.\n    if (idx === 0 && numberThresholds.length > 1 && sortedThresholds[idx].value === sortedThresholds[idx + 1].value) {\n        annotationLeft = sortedThresholds[idx];\n        annotationRight = sortedThresholds[idx + 1];\n    }\n    if (annotationLeft == null && annotationRight == null) {\n        return undefined;\n    }\n    if (annotationLeft != null && annotationRight == null) {\n        return isThresholdBreached(value, annotationLeft) ? annotationLeft : undefined;\n    }\n    if (annotationLeft == null && annotationRight != null) {\n        return isThresholdBreached(value, annotationRight) ? annotationRight : undefined;\n    }\n    if (isThresholdBreached(value, annotationLeft) && isThresholdBreached(value, annotationRight)) {\n        return value >= 0 ? annotationRight : annotationLeft;\n    }\n    if (isThresholdBreached(value, annotationLeft) && !isThresholdBreached(value, annotationRight)) {\n        return annotationLeft;\n    }\n    if (!isThresholdBreached(value, annotationLeft) && isThresholdBreached(value, annotationRight)) {\n        return annotationRight;\n    }\n    return undefined;\n};\nconst isThreshold = isValid((maybeThreshold) => maybeThreshold.comparisonOperator != null);\nconst getThresholds = (annotations) => annotations && annotations.y ? annotations.y.filter(isThreshold) : [];\n\nexport { getNumberThresholds as a, getThresholds as b, getColor as c, getValueAndText as d, getValueAndTextVisibility as e, getValueTextVisibility as f, getBreachedThreshold as g, getValueText as h, isThreshold as i, getLabelTextVisibility as j, getText as k, getNumberAnnotations as l, sortThreshold as s };\n"],"names":["ascending","a","b","NaN","bisector","f","delta","compare","left","x","lo","hi","length","mid","d","ascendingComparator","center","i","right","ScaleType","LEGEND_POSITION","COMPARISON_OPERATOR","StatusIcon","DATA_ALIGNMENT","COMPARATOR_MAP","GTE","GT","LTE","LT","EQ","DataType","StreamType","TREND_TYPE","ChartType","durationRE","parse","str","arguments","undefined","format","result","replace","_","n","units","unitRatio","parseFloat","toLowerCase","nanosecond","ns","us","microsecond","millisecond","ms","second","sec","s","minute","min","m","hour","hr","h","day","week","wk","w","month","year","yr","y","round","num","Number","isNaN","Infinity","Math","abs","toPrecision","integer","trunc","toFixed","isNumeric","value","test","String","isDefined","isValid","predicate","t","isSupportedDataType","supportsString","_ref","dataType","STRING","isNumberDataStream","stream","NUMBER","isNumber","val","isMinimalStaticViewport","viewport","SECOND_IN_MS","MINUTE_IN_MS","HOUR_IN_MS","DAY_IN_MS","MONTH_IN_MS","YEAR_IN_MS","convertMS","milliseconds","Error","seconds","floor","displayDate","date","resolution","start","viewportDurationMS","end","getTime","toLocaleString","hour12","parseDuration","duration","parsedTime","__rest","e","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","propertyIsEnumerable","getNumberThresholds","thresholds","filter","threshold","getNumberAnnotations","annotations","yAnnotations","Array","isArray","numberAnnotations","annotation","assign","isHigherPriorityThresholds","t1Array","t2","_a","t1Severity","severity","t2Severity","t2Array","push","valueDisplayText","thresholdValue","formatText","toExponential","digits","toString","substr","getColor","color","getValueAndText","_ref2","valueText","showValue","labelText","label","show","text","concat","getText","getLabelTextVisibility","getValueTextVisibility","getValueAndTextVisibility","showValueText","showLabelText","getValueText","_ref3","comparisonOperator","isThresholdBreached","dataStreamValue","thresholdComparison","GREATER_THAN","GREATER_THAN_EQUAL","LESS_THAN","LESS_THAN_EQUAL","EQUAL","CONTAINS","includes","some","thresholdString","thresholdBisector","operatorOrder","_operatorOrder","_defineProperty","sortThreshold","_toConsumableArray","sort","getBreachedThreshold","find","highestSeverityThresholds","reduce","highestPriorityThresholds","numberThresholds","sortedThresholds","idx","annotationLeft","annotationRight","isThreshold","maybeThreshold","getThresholds"],"sourceRoot":""}