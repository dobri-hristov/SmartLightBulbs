{"version":3,"file":"static/js/2803.8063f09d.chunk.js","mappings":"4HAAA,IAAIA,EAaAC,EAMAC,EAIAC,E,8EAtBJ,SAAWH,GACPA,EAAiB,OAAI,SACrBA,EAAiB,OAAI,SACrBA,EAAkB,QAAI,SACzB,CAJD,CAIGA,IAAaA,EAAW,CAAC,IAS5B,SAAWC,GACPA,EAAkB,MAAI,QACtBA,EAAoB,QAAI,UACxBA,EAA4B,gBAAI,iBACnC,CAJD,CAIGA,IAAeA,EAAa,CAAC,IAEhC,SAAWC,GACPA,EAAmB,OAAI,mBAC1B,CAFD,CAEGA,IAAeA,EAAa,CAAC,IAEhC,SAAWC,GACPA,EAAoB,SAAI,YACxBA,EAAqB,UAAI,YAC5B,CAHD,CAGGA,IAAcA,EAAY,CAAC,G,uKCvBxBC,EAAQ,IAAIC,KAAK,KAAM,EAAG,GAC1BC,EAAQ,IAAID,KAAK,IAAM,EAAG,GAG1BE,EAAqB,CACzB,CACEC,EAAG,IAAIH,MAAM,EAAID,EAAMK,UAAYH,EAAMG,WAAa,GAAGA,UACzDC,EAAG,MAEL,CACEF,EAAG,IAAIH,MAAMD,EAAMK,UAAYH,EAAMG,WAAa,GAAGA,UACrDC,EAAG,KAEL,CACEF,EAAG,IAAIH,MAAMD,EAAMK,UAAY,EAAIH,EAAMG,WAAa,GAAGA,UACzDC,EAAG,OAGDC,EAAqB,CACzB,CACEH,EAAG,IAAIH,MAAM,EAAID,EAAMK,UAAYH,EAAMG,WAAa,GAAGA,UACzDC,EAAG,KAEL,CACEF,EAAG,IAAIH,MAAMD,EAAMK,UAAYH,EAAMG,WAAa,GAAGA,UACrDC,EAAG,MAEL,CACEF,EAAG,IAAIH,MAAMD,EAAMK,UAAY,EAAIH,EAAMG,WAAa,GAAGA,UACzDC,EAAG,OAGDE,EAAqD,WACzD,SAAAA,EAAYC,IAASC,EAAAA,EAAAA,GAAA,KAAAF,IACnBG,EAAAA,EAAAA,GAAiBC,KAAMH,EACzB,CAgCC,OAhCAI,EAAAA,EAAAA,GAAAL,EAAA,EAAAM,IAAA,SAAAC,MACD,WACE,OAAQC,EAAAA,EAAAA,GAAE,MAAO,MAAMA,EAAAA,EAAAA,GAAE,mBAAoB,CAAEC,YAAa,CACxD,CACEC,GAAI,OACJC,MAAO,QACPC,KAAM,gBACNC,KAAMlB,EACNmB,WAAY,EACZC,SAAU3B,EAAAA,EAAS4B,QAErB,CACEN,GAAI,QACJC,MAAO,MACPC,KAAM,gBACNC,KAAMd,EACNe,WAAY,EACZC,SAAU3B,EAAAA,EAAS4B,SAEpBC,SAAU,YAAaC,KAAM,CAC9BC,OAAQ,IACRC,MAAO,KACNC,SAAU,CAAEC,MAAO9B,EAAO+B,IAAK7B,EAAO8B,KAvDjC,EAuD8CC,KAtD9C,KAsD6DC,OAAQ,CAC3E,CACEC,KAAMrC,EAAAA,EAAWsC,OACjBC,aAAc,QAEhB,CACEF,KAAMrC,EAAAA,EAAWsC,OACjBC,aAAc,aAEZrB,EAAAA,EAAAA,GAAE,mBAAoB,MAChC,KAACR,CAAA,CAnCwD,E","sources":["../node_modules/@iot-app-kit/components/dist/esm/dataConstants-71f11842.js","../node_modules/@iot-app-kit/components/dist/esm/sc-scatter-chart-tooltip-with-multiple-data-streams-and-trends.entry.js"],"sourcesContent":["var DataType;\n(function (DataType) {\n    DataType[\"NUMBER\"] = \"NUMBER\";\n    DataType[\"STRING\"] = \"STRING\";\n    DataType[\"BOOLEAN\"] = \"BOOLEAN\";\n})(DataType || (DataType = {}));\n/**\n * Stream type is a classification of a `DataStream`, which contains with it additional structure and features specific\n * to the stream type.\n *\n * For example, for an alarm stream, if a stream is associated to the alarm stream, we interpret the stream as\n * representing the status for the given alarm and present alarm specific UX such as alarm status on the legend and tooltip.\n */\nvar StreamType;\n(function (StreamType) {\n    StreamType[\"ALARM\"] = \"ALARM\";\n    StreamType[\"ANOMALY\"] = \"ANOMALY\";\n    StreamType[\"ALARM_THRESHOLD\"] = \"ALARM_THRESHOLD\";\n})(StreamType || (StreamType = {}));\nvar TREND_TYPE;\n(function (TREND_TYPE) {\n    TREND_TYPE[\"LINEAR\"] = \"linear-regression\";\n})(TREND_TYPE || (TREND_TYPE = {}));\nvar ChartType;\n(function (ChartType) {\n    ChartType[\"BarChart\"] = \"bar-chart\";\n    ChartType[\"LineChart\"] = \"line-chart\";\n})(ChartType || (ChartType = {}));\n\nexport { DataType as D, StreamType as S, TREND_TYPE as T };\n","import { r as registerInstance, h } from './index-1cec361c.js';\nimport { D as DataType, T as TREND_TYPE } from './dataConstants-71f11842.js';\n\n// viewport boundaries\nconst X_MIN = new Date(1998, 0, 0);\nconst X_MAX = new Date(2000, 0, 1);\nconst Y_MIN = 0;\nconst Y_MAX = 5000;\nconst TEST_DATA_POINTS_1 = [\n  {\n    x: new Date((3 * X_MIN.getTime() + X_MAX.getTime()) / 4).getTime(),\n    y: 2500,\n  },\n  {\n    x: new Date((X_MIN.getTime() + X_MAX.getTime()) / 2).getTime(),\n    y: 1000,\n  },\n  {\n    x: new Date((X_MIN.getTime() + 3 * X_MAX.getTime()) / 4).getTime(),\n    y: 4500,\n  },\n];\nconst TEST_DATA_POINTS_2 = [\n  {\n    x: new Date((3 * X_MIN.getTime() + X_MAX.getTime()) / 4).getTime(),\n    y: 2000,\n  },\n  {\n    x: new Date((X_MIN.getTime() + X_MAX.getTime()) / 2).getTime(),\n    y: 2500,\n  },\n  {\n    x: new Date((X_MIN.getTime() + 3 * X_MAX.getTime()) / 4).getTime(),\n    y: 1500,\n  },\n];\nconst ScScatterChartTooltipWithMultipleDataStreamsAndTrends = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  render() {\n    return (h(\"div\", null, h(\"sc-scatter-chart\", { dataStreams: [\n        {\n          id: 'test',\n          color: 'black',\n          name: 'test stream 1',\n          data: TEST_DATA_POINTS_1,\n          resolution: 0,\n          dataType: DataType.NUMBER,\n        },\n        {\n          id: 'test2',\n          color: 'red',\n          name: 'test stream 2',\n          data: TEST_DATA_POINTS_2,\n          resolution: 0,\n          dataType: DataType.NUMBER,\n        },\n      ], widgetId: \"widget-id\", size: {\n        height: 500,\n        width: 500,\n      }, viewport: { start: X_MIN, end: X_MAX, yMin: Y_MIN, yMax: Y_MAX }, trends: [\n        {\n          type: TREND_TYPE.LINEAR,\n          dataStreamId: 'test',\n        },\n        {\n          type: TREND_TYPE.LINEAR,\n          dataStreamId: 'test2',\n        },\n      ] }), h(\"sc-webgl-context\", null)));\n  }\n};\n\nexport { ScScatterChartTooltipWithMultipleDataStreamsAndTrends as sc_scatter_chart_tooltip_with_multiple_data_streams_and_trends };\n"],"names":["DataType","StreamType","TREND_TYPE","ChartType","X_MIN","Date","X_MAX","TEST_DATA_POINTS_1","x","getTime","y","TEST_DATA_POINTS_2","ScScatterChartTooltipWithMultipleDataStreamsAndTrends","hostRef","_classCallCheck","registerInstance","this","_createClass","key","value","h","dataStreams","id","color","name","data","resolution","dataType","NUMBER","widgetId","size","height","width","viewport","start","end","yMin","yMax","trends","type","LINEAR","dataStreamId"],"sourceRoot":""}