{"version":3,"file":"static/js/1757.33fc9e6b.chunk.js","mappings":"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","sources":["../node_modules/@iot-app-kit/components/dist/esm/chartDefaults-eb37c77e.js","../node_modules/@iot-app-kit/components/dist/esm/chartScene-baf0ad0b.js","../node_modules/@iot-app-kit/components/dist/esm/getDistanceFromDuration-67232b99.js","../node_modules/@iot-app-kit/components/dist/esm/sc-bar-chart.entry.js","../node_modules/@iot-app-kit/components/dist/esm/validate-4270e546.js"],"sourcesContent":["import { b as ScaleType, L as LEGEND_POSITION } from './constants-9d5458e0.js';\n\nconst DEFAULT_CHART_CONFIG = {\n    widgetId: 'fake-id',\n    viewport: {\n        start: new Date(1995, 0, 0, 0),\n        end: new Date(2020, 1, 0, 0),\n        yMin: 0,\n        yMax: 10000,\n    },\n    // width is width - marginLeft - marginRight\n    size: { width: 400 + 50 + 25, height: 350, marginLeft: 50, marginRight: 50, marginTop: 24, marginBottom: 30 },\n    movement: {\n        enableXScroll: true,\n        enableYScroll: false,\n        zoomMax: Infinity,\n        zoomMin: 0.00001,\n    },\n    layout: {\n        xGridVisible: false,\n        yGridVisible: true,\n        xTicksVisible: true,\n        yTicksVisible: true,\n    },\n    scale: {\n        xScaleType: ScaleType.TimeSeries,\n        yScaleType: ScaleType.Linear,\n        xScaleSide: 'bottom',\n        yScaleSide: 'left',\n    },\n    dataStreams: [],\n    legend: {\n        position: LEGEND_POSITION.BOTTOM,\n        width: 170,\n    },\n};\nconst DEFAULT_THRESHOLD_OPTIONS = {\n    showColor: true,\n};\nconst DEFAULT_THRESHOLD_OPTIONS_OFF = {\n    showColor: false,\n};\n\nexport { DEFAULT_CHART_CONFIG as D, DEFAULT_THRESHOLD_OPTIONS as a, DEFAULT_THRESHOLD_OPTIONS_OFF as b };\n","import { I as InstancedBufferGeometry, R as RawShaderMaterial, D as DoubleSide, a as InstancedMesh, B as BufferAttribute, b as InstancedBufferAttribute, S as Scene } from './three.module-8c8bcb27.js';\nimport { n as numDataPoints, v as vertices, g as getCSSColorByString, c as constructChartScene, a as clipSpaceConversion, b as needsNewClipSpace } from './clipSpaceConversion-9fa25666.js';\nimport { g as getDistanceFromDuration } from './getDistanceFromDuration-67232b99.js';\nimport { g as getBreachedThreshold } from './utils-0919edc8.js';\nimport { b as isNumberDataStream } from './predicates-248e16b2.js';\n\n/* eslint-disable max-len */\nconst barVert = `\nprecision highp float;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float width;\nattribute vec2 bar;\nattribute vec2 position;\nattribute vec3 color;\nvarying vec3 vColor;\n\nvoid main() {\n  // Negative width here because we want to render the bars' width to the left side starting from its x position.\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position.x * -width + bar.x, position.y * bar.y, 0.0, 1.0);\n  vColor = color;\n}\n`;\n\nconst barFrag = `\nprecision highp float;\nvarying vec3 vColor;\n\nvoid main() {\n  gl_FragColor = vec4(vColor, 1.0);\n}\n`;\n\n/**\n * Display Constants\n *\n * Adjust these to scale the margins provided within the bar chart.\n * This represent which fraction of the 'width' of a given bar group a margin.\n */\nconst MARGIN_FACTOR = 1 / 6;\nconst getBarMargin = (toClipSpace, resolution) => getDistanceFromDuration(toClipSpace, resolution * MARGIN_FACTOR);\n/**\n * Get the bar width\n *\n * Returns the clipSpace width which each bar should be.\n * It is assumed that each bar within a group will have the same width.\n */\nconst getBarWidth = ({ toClipSpace, resolution, numDataStreams, }) => {\n    return (getDistanceFromDuration(toClipSpace, resolution) - getBarMargin(toClipSpace, resolution)) / numDataStreams;\n};\n\n// Used to set the default buffer size for a given chart - the larger this is set to, the more memory will be allocated\n// up front per `ChartScene`.\nconst NUM_POSITION_COMPONENTS = 2; // (x, y)\nconst NUM_COLOR_COMPONENTS = 3; // (r, g, b)\nconst numBars = (streamVertexSets) => {\n    return streamVertexSets.reduce((totalBars, streamVertexSet) => totalBars + streamVertexSet.length, 0);\n};\nconst getUniformWidth = (dataStreams, toClipSpace) => {\n    if (dataStreams.length === 0) {\n        return 0;\n    }\n    const { resolution } = dataStreams[0];\n    return getBarWidth({\n        toClipSpace,\n        numDataStreams: dataStreams.length,\n        resolution,\n    });\n};\nconst updateMesh = ({ dataStreams, mesh, toClipSpace, thresholds, thresholdOptions, }) => {\n    const streamVertexSets = dataStreams.filter(isNumberDataStream).map(stream => vertices(stream, stream.resolution));\n    // Set the number of instances of the bar are to be rendered.\n    // eslint-disable-next-line no-param-reassign\n    mesh.count = numBars(streamVertexSets);\n    const { geometry } = mesh;\n    const { color, bar } = geometry.attributes;\n    let positionIndex = 0;\n    let colorIndex = 0;\n    streamVertexSets.forEach((streamVertexSet, setIndex) => {\n        streamVertexSet.forEach(currVertex => {\n            const [currX, currY, r, g, b] = currVertex;\n            /**\n             * Subtracting setIndex * getUniformWidth(dataStreams, toClipSpace) because with each new\n             * data stream, we want to render it side by side on the left side.\n             */\n            bar.array[positionIndex] = toClipSpace(currX) - setIndex * getUniformWidth(dataStreams, toClipSpace);\n            bar.array[positionIndex + 1] = currY;\n            const breachedThreshold = getBreachedThreshold(currY, thresholds);\n            if (breachedThreshold == null || !thresholdOptions.showColor) {\n                // Set bar color (r, g, b)\n                color.array[colorIndex] = r;\n                color.array[colorIndex + 1] = g;\n                color.array[colorIndex + 2] = b;\n            }\n            else {\n                const [rr, gg, bb] = getCSSColorByString(breachedThreshold.color);\n                // Set bar color (r, g, b)\n                color.array[colorIndex] = rr;\n                color.array[colorIndex + 1] = gg;\n                color.array[colorIndex + 2] = bb;\n            }\n            // Increment Indexes by the associated stride of the buffer\n            colorIndex += NUM_COLOR_COMPONENTS;\n            positionIndex += NUM_POSITION_COMPONENTS;\n        });\n    });\n    bar.needsUpdate = true;\n    color.needsUpdate = true;\n};\n// https://wwwtyro.net/2019/11/18/instanced-lines.html\n// 2d vertices composing of two triangles which make up a square\n// (0, 1) - - - (1, 1)\n//   |  \\         |\n//   |     \\      |\n//   |        \\   |\n// (0, 0) - - - (1, 0)\nconst unitSquare = [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1];\nconst initializeGeometry = (geometry, bufferSize) => {\n    geometry.setAttribute('position', new BufferAttribute(new Float32Array(unitSquare), NUM_POSITION_COMPONENTS));\n    geometry.setAttribute('bar', new InstancedBufferAttribute(new Float32Array(bufferSize * NUM_POSITION_COMPONENTS), NUM_POSITION_COMPONENTS, false));\n    geometry.setAttribute('color', new InstancedBufferAttribute(new Uint8Array(bufferSize * NUM_COLOR_COMPONENTS), NUM_COLOR_COMPONENTS, true));\n};\nconst barMesh = ({ dataStreams, toClipSpace, bufferFactor, minBufferSize, thresholdOptions, thresholds, }) => {\n    const instGeo = new InstancedBufferGeometry();\n    const bufferSize = Math.max(minBufferSize, numDataPoints(dataStreams) * bufferFactor);\n    // Create and populate geometry\n    initializeGeometry(instGeo, bufferSize);\n    /**\n     * Create Bar Mesh\n     *\n     * The representation of the bars on a bar chart.\n     *\n     * Utilizes an instance of a single unit square, which then gets\n     * stretched and transposed across the canvas.\n     */\n    const barChartMaterial = new RawShaderMaterial({\n        vertexShader: barVert,\n        fragmentShader: barFrag,\n        side: DoubleSide,\n        transparent: false,\n        uniforms: {\n            width: {\n                value: getUniformWidth(dataStreams, toClipSpace),\n            },\n        },\n    });\n    const mesh = new InstancedMesh(instGeo, barChartMaterial, bufferSize);\n    updateMesh({ dataStreams, mesh, toClipSpace, thresholds, thresholdOptions });\n    // Prevent bounding sphere from being called\n    mesh.frustumCulled = false;\n    return mesh;\n};\nconst updateBarMesh = ({ bars, dataStreams, toClipSpace, hasDataChanged, thresholdOptions, thresholds, }) => {\n    if (hasDataChanged) {\n        // eslint-disable-next-line no-param-reassign\n        bars.material.uniforms.width.value = getUniformWidth(dataStreams, toClipSpace);\n        updateMesh({ dataStreams, mesh: bars, toClipSpace, thresholds, thresholdOptions });\n    }\n};\n\nconst maxDataPointsRendered = (bars) => bars.geometry.attributes.bar.array.length / NUM_POSITION_COMPONENTS;\nconst chartScene = ({ dataStreams, container, viewport, bufferFactor, minBufferSize, onUpdate, thresholdOptions, thresholds, }) => {\n    const scene = new Scene();\n    const toClipSpace = clipSpaceConversion(viewport);\n    scene.add(barMesh({ dataStreams, toClipSpace, bufferFactor, minBufferSize, thresholdOptions, thresholds }));\n    return constructChartScene({ scene, viewport, container, toClipSpace, onUpdate });\n};\nconst updateChartScene = ({ scene, dataStreams, hasDataChanged, minBufferSize, bufferFactor, viewport, container, onUpdate, chartSize, thresholdOptions, thresholds, hasAnnotationChanged, }) => {\n    const bars = scene.scene.children[0];\n    // If the amount of data being sent to the chart scene surpasses the size of the buffers within the\n    // chart scene, we must fully recreate the chart scene. This is a costly operation.\n    const isDataOverflowingBuffer = maxDataPointsRendered(bars) < numDataPoints(dataStreams);\n    if (isDataOverflowingBuffer || needsNewClipSpace(viewport, scene.toClipSpace) || hasAnnotationChanged) {\n        return chartScene({\n            onUpdate,\n            dataStreams,\n            container,\n            viewport,\n            minBufferSize,\n            bufferFactor,\n            chartSize,\n            thresholdOptions,\n            thresholds,\n        });\n    }\n    updateBarMesh({\n        bars,\n        dataStreams,\n        toClipSpace: scene.toClipSpace,\n        hasDataChanged,\n        thresholdOptions,\n        thresholds,\n    });\n    return scene;\n};\n\nexport { chartScene as c, updateChartScene as u };\n","/**\n *\n * Get Distance from Duration\n *\n * Return distance between `milliseconds` on a given `xScale`, assuming `xScale` is linear.\n * If `xScale` is not linear, the distance between two points can depend on the exact value of time,\n * rather than just the time between. Non-linear `xScale` requires the width to be computed for every point rather\n * than just once.\n *\n * Since a non-linear xAxis is an un-common use case we won't support that for now.\n */\nconst getDistanceFromDuration = (toClipSpace, milliseconds) => Math.abs(toClipSpace(new Date(milliseconds).getTime()) - toClipSpace(new Date(0).getTime()));\n\nexport { getDistanceFromDuration as g };\n","import { r as registerInstance, h } from './index-1cec361c.js';\nimport { u as updateChartScene, c as chartScene } from './chartScene-baf0ad0b.js';\nimport { D as DEFAULT_CHART_CONFIG } from './chartDefaults-eb37c77e.js';\nimport { D as DATA_ALIGNMENT } from './constants-9d5458e0.js';\nimport { v as validate } from './validate-4270e546.js';\nimport { D as DataType } from './dataConstants-71f11842.js';\nimport './three.module-8c8bcb27.js';\nimport './clipSpaceConversion-9fa25666.js';\nimport './v4-b6bb7e11.js';\nimport './_commonjsHelpers-f9dc4873.js';\nimport './getDataPoints-c53771e0.js';\nimport './index-42a9af88.js';\nimport './time-b684d8c5.js';\nimport './index-b3f1c3a1.js';\nimport './getDistanceFromDuration-67232b99.js';\nimport './utils-0919edc8.js';\nimport './predicates-248e16b2.js';\nimport './number-3e8376bf.js';\nimport './bisector-ecf52045.js';\n\n// The initial size of buffers. The larger this is, the more memory allocated up front per chart.\n// The lower this number is, more likely that charts will have to re-initialize there buffers which is\n// a slow operation (CPU bound).\nconst DEFAULT_MIN_BUFFER_SIZE = 1000;\nconst DEFAULT_BUFFER_FACTOR = 2;\nconst tooltip = (props) => (h(\"sc-tooltip\", Object.assign({}, props, { visualizesAlarms: false, supportString: false, dataAlignment: DATA_ALIGNMENT.EITHER })));\nconst ScBarChart = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.gestures = true;\n    /** Status */\n    this.isEditing = false;\n    /** Memory Management */\n    this.bufferFactor = DEFAULT_BUFFER_FACTOR;\n    this.minBufferSize = DEFAULT_MIN_BUFFER_SIZE;\n  }\n  componentWillRender() {\n    validate(this);\n  }\n  render() {\n    return (h(\"sc-size-provider\", { size: this.size, renderFunc: (size) => (h(\"sc-webgl-base-chart\", { supportedDataTypes: [DataType.NUMBER], axis: this.axis, gestures: this.gestures, configId: this.widgetId, legend: this.legend, annotations: this.annotations, trends: this.trends, updateChartScene: updateChartScene, createChartScene: chartScene, size: Object.assign(Object.assign(Object.assign({}, DEFAULT_CHART_CONFIG.size), this.size), size), dataStreams: this.dataStreams, alarms: this.alarms, viewport: this.viewport, minBufferSize: this.minBufferSize, bufferFactor: this.bufferFactor, isEditing: this.isEditing, yRangeStartFromZero: true, renderTooltip: tooltip, supportString: false, visualizesAlarms: false, messageOverrides: this.messageOverrides })) }));\n  }\n};\n\nexport { ScBarChart as sc_bar_chart };\n","import { p as parse } from './index-b3f1c3a1.js';\nimport { a as isMinimalStaticViewport } from './predicates-248e16b2.js';\nimport { c as createCommonjsModule, a as getDefaultExportFromCjs } from './_commonjsHelpers-f9dc4873.js';\n\nvar assertString_1 = createCommonjsModule(function (module, exports) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = assertString;\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction assertString(input) {\n  var isString = typeof input === 'string' || input instanceof String;\n\n  if (!isString) {\n    var invalidType = _typeof(input);\n\n    if (input === null) invalidType = 'null';else if (invalidType === 'object') invalidType = input.constructor.name;\n    throw new TypeError(\"Expected a string but received a \".concat(invalidType));\n  }\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;\n});\n\nvar isISO8601_1 = createCommonjsModule(function (module, exports) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isISO8601;\n\nvar _assertString = _interopRequireDefault(assertString_1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint-disable max-len */\n// from http://goo.gl/0ejHHW\nvar iso8601 = /^([\\+-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-3])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T\\s]((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24:?00)([\\.,]\\d+(?!:))?)?(\\17[0-5]\\d([\\.,]\\d+)?)?([zZ]|([\\+-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?$/; // same as above, except with a strict 'T' separator between date and time\n\nvar iso8601StrictSeparator = /^([\\+-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-3])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T]((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24:?00)([\\.,]\\d+(?!:))?)?(\\17[0-5]\\d([\\.,]\\d+)?)?([zZ]|([\\+-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?$/;\n/* eslint-enable max-len */\n\nvar isValidDate = function isValidDate(str) {\n  // str must have passed the ISO8601 check\n  // this check is meant to catch invalid dates\n  // like 2009-02-31\n  // first check for ordinal dates\n  var ordinalMatch = str.match(/^(\\d{4})-?(\\d{3})([ T]{1}\\.*|$)/);\n\n  if (ordinalMatch) {\n    var oYear = Number(ordinalMatch[1]);\n    var oDay = Number(ordinalMatch[2]); // if is leap year\n\n    if (oYear % 4 === 0 && oYear % 100 !== 0 || oYear % 400 === 0) return oDay <= 366;\n    return oDay <= 365;\n  }\n\n  var match = str.match(/(\\d{4})-?(\\d{0,2})-?(\\d*)/).map(Number);\n  var year = match[1];\n  var month = match[2];\n  var day = match[3];\n  var monthString = month ? \"0\".concat(month).slice(-2) : month;\n  var dayString = day ? \"0\".concat(day).slice(-2) : day; // create a date object and compare\n\n  var d = new Date(\"\".concat(year, \"-\").concat(monthString || '01', \"-\").concat(dayString || '01'));\n\n  if (month && day) {\n    return d.getUTCFullYear() === year && d.getUTCMonth() + 1 === month && d.getUTCDate() === day;\n  }\n\n  return true;\n};\n\nfunction isISO8601(str) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  (0, _assertString.default)(str);\n  var check = options.strictSeparator ? iso8601StrictSeparator.test(str) : iso8601.test(str);\n  if (check && options.strict) return isValidDate(str);\n  return check;\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;\n});\n\nconst isISO8601 = /*@__PURE__*/getDefaultExportFromCjs(isISO8601_1);\n\nconst isValidDate = (date) => (date instanceof Date ? true : isISO8601(date));\n\nconst validate = ({ viewport }) => {\n    // skips if viewport is undefine\n    if (viewport != null) {\n        /**\n         * We cannot enforce the type that is coming in. So we throw and warn message if all\n         * start, end, and duration is being passed in.\n         */\n        if (isMinimalStaticViewport(viewport) && viewport.duration != null) {\n            // eslint-disable-next-line no-console\n            console.warn('Detected both static and live viewport type. Duration will be used');\n        }\n        if (isMinimalStaticViewport(viewport) && (!isValidDate(viewport.start) || !isValidDate(viewport.end))) {\n            throw new Error(`Unable to parse start date: '${viewport.start}' and/or end date: '${viewport.end}'`);\n        }\n        if (!isMinimalStaticViewport(viewport) &&\n            typeof viewport.duration === 'string' &&\n            parse(viewport.duration, 'ms') == null) {\n            throw new Error(`Unable to parse duration: '${viewport.duration}'`);\n        }\n    }\n};\n\nexport { validate as v };\n"],"names":["DEFAULT_CHART_CONFIG","widgetId","viewport","start","Date","end","yMin","yMax","size","width","height","marginLeft","marginRight","marginTop","marginBottom","movement","enableXScroll","enableYScroll","zoomMax","Infinity","zoomMin","layout","xGridVisible","yGridVisible","xTicksVisible","yTicksVisible","scale","xScaleType","ScaleType","TimeSeries","yScaleType","Linear","xScaleSide","yScaleSide","dataStreams","legend","position","LEGEND_POSITION","BOTTOM","DEFAULT_THRESHOLD_OPTIONS","showColor","DEFAULT_THRESHOLD_OPTIONS_OFF","getBarWidth","_ref","toClipSpace","resolution","numDataStreams","getDistanceFromDuration","getBarMargin","getUniformWidth","length","updateMesh","_ref2","mesh","thresholds","thresholdOptions","streamVertexSets","filter","isNumberDataStream","map","stream","vertices","count","reduce","totalBars","streamVertexSet","numBars","_geometry$attributes","geometry","attributes","color","bar","positionIndex","colorIndex","forEach","setIndex","currVertex","_currVertex","_slicedToArray","currX","currY","r","g","b","array","breachedThreshold","getBreachedThreshold","_getCSSColorByString","getCSSColorByString","_getCSSColorByString2","rr","gg","bb","needsUpdate","unitSquare","barMesh","_ref3","bufferFactor","minBufferSize","instGeo","InstancedBufferGeometry","bufferSize","Math","max","numDataPoints","setAttribute","BufferAttribute","Float32Array","InstancedBufferAttribute","Uint8Array","initializeGeometry","barChartMaterial","RawShaderMaterial","vertexShader","fragmentShader","side","DoubleSide","transparent","uniforms","value","InstancedMesh","frustumCulled","chartScene","_ref5","container","onUpdate","scene","Scene","clipSpaceConversion","add","constructChartScene","updateChartScene","_ref6","hasDataChanged","chartSize","hasAnnotationChanged","bars","children","isDataOverflowingBuffer","maxDataPointsRendered","needsNewClipSpace","_ref4","material","updateBarMesh","milliseconds","abs","getTime","tooltip","props","h","Object","assign","visualizesAlarms","supportString","dataAlignment","DATA_ALIGNMENT","EITHER","ScBarChart","hostRef","_classCallCheck","registerInstance","this","gestures","isEditing","_createClass","key","validate","_this","renderFunc","supportedDataTypes","DataType","NUMBER","axis","configId","annotations","trends","createChartScene","alarms","yRangeStartFromZero","renderTooltip","messageOverrides","assertString_1","createCommonjsModule","module","exports","_typeof","obj","Symbol","iterator","constructor","prototype","defineProperty","default","input","String","invalidType","name","TypeError","concat","isISO8601_1","str","options","arguments","undefined","_assertString","check","strictSeparator","iso8601StrictSeparator","test","iso8601","strict","isValidDate","__esModule","ordinalMatch","match","oYear","Number","oDay","year","month","day","monthString","slice","dayString","d","getUTCFullYear","getUTCMonth","getUTCDate","isISO8601","getDefaultExportFromCjs","date","isMinimalStaticViewport","duration","console","warn","Error","parse"],"sourceRoot":""}